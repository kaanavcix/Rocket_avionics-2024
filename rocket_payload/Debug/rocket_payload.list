
rocket_payload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a37c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800a550  0800a550  0001a550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d8  0800a9d8  00020228  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d8  0800a9d8  0001a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e0  0800a9e0  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e4  0800a9e4  0001a9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800a9e8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000228  0800ac10  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006c0  0800ac10  000206c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020258  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d920  00000000  00000000  0002029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002275  00000000  00000000  0002dbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bb8  00000000  00000000  0002fe30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000928  00000000  00000000  000309e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c34  00000000  00000000  00031310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000106a2  00000000  00000000  00053f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce288  00000000  00000000  000645e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000044ec  00000000  00000000  00132870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00136d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000228 	.word	0x20000228
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a534 	.word	0x0800a534

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000022c 	.word	0x2000022c
 800020c:	0800a534 	.word	0x0800a534

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2319      	movs	r3, #25
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <TrimRead+0x1b8>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2288      	movs	r2, #136	; 0x88
 80010d8:	21ec      	movs	r1, #236	; 0xec
 80010da:	4868      	ldr	r0, [pc, #416]	; (800127c <TrimRead+0x1bc>)
 80010dc:	f003 f92e 	bl	800433c <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010e0:	4b67      	ldr	r3, [pc, #412]	; (8001280 <TrimRead+0x1c0>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	2207      	movs	r2, #7
 80010ea:	9201      	str	r2, [sp, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	22e1      	movs	r2, #225	; 0xe1
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	4861      	ldr	r0, [pc, #388]	; (800127c <TrimRead+0x1bc>)
 80010f6:	f003 f921 	bl	800433c <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <TrimRead+0x1b8>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <TrimRead+0x1b8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21b      	sxth	r3, r3
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <TrimRead+0x1c4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001112:	4b59      	ldr	r3, [pc, #356]	; (8001278 <TrimRead+0x1b8>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <TrimRead+0x1b8>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b58      	ldr	r3, [pc, #352]	; (8001288 <TrimRead+0x1c8>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <TrimRead+0x1b8>)
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b51      	ldr	r3, [pc, #324]	; (8001278 <TrimRead+0x1b8>)
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <TrimRead+0x1cc>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <TrimRead+0x1b8>)
 8001140:	79db      	ldrb	r3, [r3, #7]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <TrimRead+0x1b8>)
 8001148:	795b      	ldrb	r3, [r3, #5]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <TrimRead+0x1d0>)
 8001154:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <TrimRead+0x1b8>)
 8001158:	7a5b      	ldrb	r3, [r3, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <TrimRead+0x1b8>)
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <TrimRead+0x1d4>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <TrimRead+0x1b8>)
 800116e:	7adb      	ldrb	r3, [r3, #11]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <TrimRead+0x1b8>)
 8001176:	7a9b      	ldrb	r3, [r3, #10]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <TrimRead+0x1d8>)
 8001180:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <TrimRead+0x1b8>)
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <TrimRead+0x1b8>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <TrimRead+0x1dc>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <TrimRead+0x1b8>)
 800119a:	7bdb      	ldrb	r3, [r3, #15]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <TrimRead+0x1b8>)
 80011a2:	7b9b      	ldrb	r3, [r3, #14]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <TrimRead+0x1e0>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <TrimRead+0x1b8>)
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <TrimRead+0x1b8>)
 80011b8:	7c1b      	ldrb	r3, [r3, #16]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <TrimRead+0x1e4>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <TrimRead+0x1b8>)
 80011c6:	7cdb      	ldrb	r3, [r3, #19]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <TrimRead+0x1b8>)
 80011ce:	7c9b      	ldrb	r3, [r3, #18]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <TrimRead+0x1e8>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <TrimRead+0x1b8>)
 80011dc:	7d5b      	ldrb	r3, [r3, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <TrimRead+0x1b8>)
 80011e4:	7d1b      	ldrb	r3, [r3, #20]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <TrimRead+0x1ec>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <TrimRead+0x1b8>)
 80011f2:	7ddb      	ldrb	r3, [r3, #23]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <TrimRead+0x1b8>)
 80011fa:	7d9b      	ldrb	r3, [r3, #22]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <TrimRead+0x1f0>)
 8001204:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <TrimRead+0x1b8>)
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <TrimRead+0x1f4>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <TrimRead+0x1b8>)
 8001212:	7e9b      	ldrb	r3, [r3, #26]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <TrimRead+0x1b8>)
 800121a:	7e5b      	ldrb	r3, [r3, #25]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <TrimRead+0x1f8>)
 8001224:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <TrimRead+0x1b8>)
 8001228:	7edb      	ldrb	r3, [r3, #27]
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <TrimRead+0x1fc>)
 800122e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <TrimRead+0x1b8>)
 8001232:	7f1b      	ldrb	r3, [r3, #28]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <TrimRead+0x1b8>)
 800123a:	7f5b      	ldrb	r3, [r3, #29]
 800123c:	b21b      	sxth	r3, r3
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <TrimRead+0x200>)
 800124a:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <TrimRead+0x1b8>)
 800124e:	7f9b      	ldrb	r3, [r3, #30]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <TrimRead+0x1b8>)
 8001256:	7f5b      	ldrb	r3, [r3, #29]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <TrimRead+0x204>)
 8001264:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <TrimRead+0x1b8>)
 8001268:	7fdb      	ldrb	r3, [r3, #31]
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <TrimRead+0x208>)
 800126e:	801a      	strh	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000248 	.word	0x20000248
 800127c:	200002f0 	.word	0x200002f0
 8001280:	20000261 	.word	0x20000261
 8001284:	20000268 	.word	0x20000268
 8001288:	20000270 	.word	0x20000270
 800128c:	20000272 	.word	0x20000272
 8001290:	2000026a 	.word	0x2000026a
 8001294:	20000274 	.word	0x20000274
 8001298:	20000276 	.word	0x20000276
 800129c:	20000278 	.word	0x20000278
 80012a0:	2000027a 	.word	0x2000027a
 80012a4:	2000027c 	.word	0x2000027c
 80012a8:	2000027e 	.word	0x2000027e
 80012ac:	20000280 	.word	0x20000280
 80012b0:	20000282 	.word	0x20000282
 80012b4:	2000026c 	.word	0x2000026c
 80012b8:	20000284 	.word	0x20000284
 80012bc:	2000026e 	.word	0x2000026e
 80012c0:	20000286 	.word	0x20000286
 80012c4:	20000288 	.word	0x20000288
 80012c8:	2000028a 	.word	0x2000028a

080012cc <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	4603      	mov	r3, r0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	4613      	mov	r3, r2
 80012e8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012ea:	f7ff fee9 	bl	80010c0 <TrimRead>

	uint8_t datatowrite = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012f6:	23b6      	movs	r3, #182	; 0xb6
 80012f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22e0      	movs	r2, #224	; 0xe0
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4858      	ldr	r0, [pc, #352]	; (8001474 <BME280_Config+0x1a8>)
 8001312:	f002 ff19 	bl	8004148 <HAL_I2C_Mem_Write>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <BME280_Config+0x56>
	{
		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e0a3      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f002 fa70 	bl	8003808 <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f2      	movs	r2, #242	; 0xf2
 8001340:	21ec      	movs	r1, #236	; 0xec
 8001342:	484c      	ldr	r0, [pc, #304]	; (8001474 <BME280_Config+0x1a8>)
 8001344:	f002 ff00 	bl	8004148 <HAL_I2C_Mem_Write>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <BME280_Config+0x88>
	{
		return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e08a      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f002 fa57 	bl	8003808 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	22f2      	movs	r2, #242	; 0xf2
 800136e:	21ec      	movs	r1, #236	; 0xec
 8001370:	4840      	ldr	r0, [pc, #256]	; (8001474 <BME280_Config+0x1a8>)
 8001372:	f002 ffe3 	bl	800433c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001376:	7bba      	ldrb	r2, [r7, #14]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	429a      	cmp	r2, r3
 800137c:	d002      	beq.n	8001384 <BME280_Config+0xb8>
	{
		return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e072      	b.n	800146a <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	22f5      	movs	r2, #245	; 0xf5
 80013b0:	21ec      	movs	r1, #236	; 0xec
 80013b2:	4830      	ldr	r0, [pc, #192]	; (8001474 <BME280_Config+0x1a8>)
 80013b4:	f002 fec8 	bl	8004148 <HAL_I2C_Mem_Write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <BME280_Config+0xf8>
	{
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e052      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f002 fa1f 	bl	8003808 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22f5      	movs	r2, #245	; 0xf5
 80013de:	21ec      	movs	r1, #236	; 0xec
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <BME280_Config+0x1a8>)
 80013e2:	f002 ffab 	bl	800433c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d002      	beq.n	80013f4 <BME280_Config+0x128>
	{
		return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e03a      	b.n	800146a <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	22f4      	movs	r2, #244	; 0xf4
 8001424:	21ec      	movs	r1, #236	; 0xec
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <BME280_Config+0x1a8>)
 8001428:	f002 fe8e 	bl	8004148 <HAL_I2C_Mem_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <BME280_Config+0x16c>
	{
		return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e018      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f002 f9e5 	bl	8003808 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 030e 	add.w	r3, r7, #14
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f4      	movs	r2, #244	; 0xf4
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <BME280_Config+0x1a8>)
 8001456:	f002 ff71 	bl	800433c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	429a      	cmp	r2, r3
 8001460:	d002      	beq.n	8001468 <BME280_Config+0x19c>
	{
		return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e000      	b.n	800146a <BME280_Config+0x19e>
	}
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	200002f0 	.word	0x200002f0

08001478 <BMEReadRaw>:

int BMEReadRaw(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <BMEReadRaw+0x8c>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	22d0      	movs	r2, #208	; 0xd0
 8001490:	21ec      	movs	r1, #236	; 0xec
 8001492:	481d      	ldr	r0, [pc, #116]	; (8001508 <BMEReadRaw+0x90>)
 8001494:	f002 ff52 	bl	800433c <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <BMEReadRaw+0x8c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b60      	cmp	r3, #96	; 0x60
 800149e:	d12a      	bne.n	80014f6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2308      	movs	r3, #8
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	463b      	mov	r3, r7
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	22f7      	movs	r2, #247	; 0xf7
 80014b2:	21ec      	movs	r1, #236	; 0xec
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <BMEReadRaw+0x90>)
 80014b6:	f002 ff41 	bl	800433c <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	031a      	lsls	r2, r3, #12
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4313      	orrs	r3, r2
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	0912      	lsrs	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	4313      	orrs	r3, r2
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <BMEReadRaw+0x94>)
 80014ce:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	031a      	lsls	r2, r3, #12
 80014d4:	793b      	ldrb	r3, [r7, #4]
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4313      	orrs	r3, r2
 80014da:	797a      	ldrb	r2, [r7, #5]
 80014dc:	0912      	lsrs	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4313      	orrs	r3, r2
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <BMEReadRaw+0x98>)
 80014e4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <BMEReadRaw+0x9c>)
 80014f0:	6013      	str	r3, [r2, #0]

		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e001      	b.n	80014fa <BMEReadRaw+0x82>
	}
	else return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000244 	.word	0x20000244
 8001508:	200002f0 	.word	0x200002f0
 800150c:	20000290 	.word	0x20000290
 8001510:	2000028c 	.word	0x2000028c
 8001514:	20000294 	.word	0x20000294

08001518 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <BME280_compensate_T_int32+0x78>)
 800152e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	12db      	asrs	r3, r3, #11
 8001538:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	111b      	asrs	r3, r3, #4
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	1112      	asrs	r2, r2, #4
 8001548:	4910      	ldr	r1, [pc, #64]	; (800158c <BME280_compensate_T_int32+0x74>)
 800154a:	8809      	ldrh	r1, [r1, #0]
 800154c:	1a52      	subs	r2, r2, r1
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	131b      	asrs	r3, r3, #12
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <BME280_compensate_T_int32+0x7c>)
 8001556:	f9b2 2000 	ldrsh.w	r2, [r2]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	139b      	asrs	r3, r3, #14
 8001560:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3380      	adds	r3, #128	; 0x80
 8001578:	121b      	asrs	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
	return T;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000268 	.word	0x20000268
 8001590:	20000270 	.word	0x20000270
 8001594:	20000272 	.word	0x20000272
 8001598:	200002a0 	.word	0x200002a0

0800159c <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	b0ca      	sub	sp, #296	; 0x128
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80015a8:	4baf      	ldr	r3, [pc, #700]	; (8001868 <BME280_compensate_P_int64+0x2cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	17da      	asrs	r2, r3, #31
 80015ae:	461c      	mov	r4, r3
 80015b0:	4615      	mov	r5, r2
 80015b2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015b6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015ba:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80015be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c6:	fb03 f102 	mul.w	r1, r3, r2
 80015ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	18ca      	adds	r2, r1, r3
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015dc:	fba3 8903 	umull	r8, r9, r3, r3
 80015e0:	eb02 0309 	add.w	r3, r2, r9
 80015e4:	4699      	mov	r9, r3
 80015e6:	4ba1      	ldr	r3, [pc, #644]	; (800186c <BME280_compensate_P_int64+0x2d0>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	17da      	asrs	r2, r3, #31
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015f8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015fc:	4603      	mov	r3, r0
 80015fe:	fb03 f209 	mul.w	r2, r3, r9
 8001602:	460b      	mov	r3, r1
 8001604:	fb08 f303 	mul.w	r3, r8, r3
 8001608:	4413      	add	r3, r2
 800160a:	4602      	mov	r2, r0
 800160c:	fba8 1202 	umull	r1, r2, r8, r2
 8001610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800161a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001624:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001628:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800162c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001630:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <BME280_compensate_P_int64+0x2d4>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800163e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001646:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800164a:	462a      	mov	r2, r5
 800164c:	fb02 f203 	mul.w	r2, r2, r3
 8001650:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001654:	4621      	mov	r1, r4
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	441a      	add	r2, r3
 800165c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001660:	4621      	mov	r1, r4
 8001662:	fba3 1301 	umull	r1, r3, r3, r1
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800166a:	460b      	mov	r3, r1
 800166c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001686:	462b      	mov	r3, r5
 8001688:	0459      	lsls	r1, r3, #17
 800168a:	4623      	mov	r3, r4
 800168c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001690:	4623      	mov	r3, r4
 8001692:	0458      	lsls	r0, r3, #17
 8001694:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001698:	1814      	adds	r4, r2, r0
 800169a:	643c      	str	r4, [r7, #64]	; 0x40
 800169c:	414b      	adcs	r3, r1
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
 80016a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <BME280_compensate_P_int64+0x2d8>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	2000      	movs	r0, #0
 80016ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016ce:	1814      	adds	r4, r2, r0
 80016d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80016d2:	414b      	adcs	r3, r1
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80016de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e6:	fb03 f102 	mul.w	r1, r3, r2
 80016ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	18ca      	adds	r2, r1, r3
 80016f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fc:	fba3 1303 	umull	r1, r3, r3, r3
 8001700:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001704:	460b      	mov	r3, r1
 8001706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800170a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001714:	4b58      	ldr	r3, [pc, #352]	; (8001878 <BME280_compensate_P_int64+0x2dc>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800172a:	462b      	mov	r3, r5
 800172c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001730:	4642      	mov	r2, r8
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	464b      	mov	r3, r9
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	4622      	mov	r2, r4
 8001742:	4641      	mov	r1, r8
 8001744:	fba2 1201 	umull	r1, r2, r2, r1
 8001748:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800174c:	460a      	mov	r2, r1
 800174e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001752:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001756:	4413      	add	r3, r2
 8001758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001768:	4623      	mov	r3, r4
 800176a:	0a18      	lsrs	r0, r3, #8
 800176c:	462b      	mov	r3, r5
 800176e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001772:	462b      	mov	r3, r5
 8001774:	1219      	asrs	r1, r3, #8
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <BME280_compensate_P_int64+0x2e0>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	b21b      	sxth	r3, r3
 800177e:	17da      	asrs	r2, r3, #31
 8001780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001784:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001788:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800178c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001790:	464a      	mov	r2, r9
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800179a:	4644      	mov	r4, r8
 800179c:	fb04 f303 	mul.w	r3, r4, r3
 80017a0:	441a      	add	r2, r3
 80017a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017a6:	4644      	mov	r4, r8
 80017a8:	fba3 4304 	umull	r4, r3, r3, r4
 80017ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017b0:	4623      	mov	r3, r4
 80017b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017cc:	464c      	mov	r4, r9
 80017ce:	0323      	lsls	r3, r4, #12
 80017d0:	4644      	mov	r4, r8
 80017d2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017d6:	4644      	mov	r4, r8
 80017d8:	0322      	lsls	r2, r4, #12
 80017da:	1884      	adds	r4, r0, r2
 80017dc:	633c      	str	r4, [r7, #48]	; 0x30
 80017de:	eb41 0303 	adc.w	r3, r1, r3
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
 80017e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017f4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <BME280_compensate_P_int64+0x2e4>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800180c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001810:	462b      	mov	r3, r5
 8001812:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001816:	4642      	mov	r2, r8
 8001818:	fb02 f203 	mul.w	r2, r2, r3
 800181c:	464b      	mov	r3, r9
 800181e:	4621      	mov	r1, r4
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	4622      	mov	r2, r4
 8001828:	4641      	mov	r1, r8
 800182a:	fba2 1201 	umull	r1, r2, r2, r1
 800182e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001832:	460a      	mov	r2, r1
 8001834:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001838:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800183c:	4413      	add	r3, r2
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800184e:	4629      	mov	r1, r5
 8001850:	104a      	asrs	r2, r1, #1
 8001852:	4629      	mov	r1, r5
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800185a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800185e:	4313      	orrs	r3, r2
 8001860:	d110      	bne.n	8001884 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001862:	2300      	movs	r3, #0
 8001864:	e154      	b.n	8001b10 <BME280_compensate_P_int64+0x574>
 8001866:	bf00      	nop
 8001868:	200002a0 	.word	0x200002a0
 800186c:	2000027c 	.word	0x2000027c
 8001870:	2000027a 	.word	0x2000027a
 8001874:	20000278 	.word	0x20000278
 8001878:	20000276 	.word	0x20000276
 800187c:	20000274 	.word	0x20000274
 8001880:	2000026a 	.word	0x2000026a
	}
	p = 1048576-adc_P;
 8001884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001888:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800188c:	17da      	asrs	r2, r3, #31
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001892:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001896:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800189a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189e:	105b      	asrs	r3, r3, #1
 80018a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a89      	subs	r1, r1, r2
 80018ba:	67b9      	str	r1, [r7, #120]	; 0x78
 80018bc:	4629      	mov	r1, r5
 80018be:	eb61 0303 	sbc.w	r3, r1, r3
 80018c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018c8:	4622      	mov	r2, r4
 80018ca:	462b      	mov	r3, r5
 80018cc:	1891      	adds	r1, r2, r2
 80018ce:	6239      	str	r1, [r7, #32]
 80018d0:	415b      	adcs	r3, r3
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d8:	4621      	mov	r1, r4
 80018da:	1851      	adds	r1, r2, r1
 80018dc:	61b9      	str	r1, [r7, #24]
 80018de:	4629      	mov	r1, r5
 80018e0:	414b      	adcs	r3, r1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018f0:	4649      	mov	r1, r9
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4641      	mov	r1, r8
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4641      	mov	r1, r8
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4641      	mov	r1, r8
 8001900:	1889      	adds	r1, r1, r2
 8001902:	6139      	str	r1, [r7, #16]
 8001904:	4649      	mov	r1, r9
 8001906:	eb43 0101 	adc.w	r1, r3, r1
 800190a:	6179      	str	r1, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001918:	4649      	mov	r1, r9
 800191a:	008b      	lsls	r3, r1, #2
 800191c:	4641      	mov	r1, r8
 800191e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001922:	4641      	mov	r1, r8
 8001924:	008a      	lsls	r2, r1, #2
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	4603      	mov	r3, r0
 800192c:	4622      	mov	r2, r4
 800192e:	189b      	adds	r3, r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	460b      	mov	r3, r1
 8001934:	462a      	mov	r2, r5
 8001936:	eb42 0303 	adc.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001948:	4649      	mov	r1, r9
 800194a:	008b      	lsls	r3, r1, #2
 800194c:	4641      	mov	r1, r8
 800194e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001952:	4641      	mov	r1, r8
 8001954:	008a      	lsls	r2, r1, #2
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	4603      	mov	r3, r0
 800195c:	4622      	mov	r2, r4
 800195e:	189b      	adds	r3, r3, r2
 8001960:	673b      	str	r3, [r7, #112]	; 0x70
 8001962:	462b      	mov	r3, r5
 8001964:	460a      	mov	r2, r1
 8001966:	eb42 0303 	adc.w	r3, r2, r3
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
 800196c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001970:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001974:	f7ff f9a0 	bl	8000cb8 <__aeabi_ldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <BME280_compensate_P_int64+0x580>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	b21b      	sxth	r3, r3
 8001988:	17da      	asrs	r2, r3, #31
 800198a:	66bb      	str	r3, [r7, #104]	; 0x68
 800198c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0b50      	lsrs	r0, r2, #13
 80019dc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019e0:	1359      	asrs	r1, r3, #13
 80019e2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019e6:	462b      	mov	r3, r5
 80019e8:	fb00 f203 	mul.w	r2, r0, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	fb03 f301 	mul.w	r3, r3, r1
 80019f2:	4413      	add	r3, r2
 80019f4:	4622      	mov	r2, r4
 80019f6:	fba2 1200 	umull	r1, r2, r2, r0
 80019fa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019fe:	460a      	mov	r2, r1
 8001a00:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	0e4a      	lsrs	r2, r1, #25
 8001a1e:	4629      	mov	r1, r5
 8001a20:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a24:	4629      	mov	r1, r5
 8001a26:	164b      	asrs	r3, r1, #25
 8001a28:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <BME280_compensate_P_int64+0x584>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
 8001a38:	667a      	str	r2, [r7, #100]	; 0x64
 8001a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a42:	462a      	mov	r2, r5
 8001a44:	fb02 f203 	mul.w	r2, r2, r3
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a58:	4621      	mov	r1, r4
 8001a5a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a5e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a62:	460a      	mov	r2, r1
 8001a64:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a7e:	4621      	mov	r1, r4
 8001a80:	0cca      	lsrs	r2, r1, #19
 8001a82:	4629      	mov	r1, r5
 8001a84:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a88:	4629      	mov	r1, r5
 8001a8a:	14cb      	asrs	r3, r1, #19
 8001a8c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a90:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a94:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a98:	1884      	adds	r4, r0, r2
 8001a9a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a9c:	eb41 0303 	adc.w	r3, r1, r3
 8001aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001aa6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1889      	adds	r1, r1, r2
 8001aae:	6539      	str	r1, [r7, #80]	; 0x50
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb43 0101 	adc.w	r1, r3, r1
 8001ab6:	6579      	str	r1, [r7, #84]	; 0x54
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	0a18      	lsrs	r0, r3, #8
 8001ac8:	462b      	mov	r3, r5
 8001aca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ace:	462b      	mov	r3, r5
 8001ad0:	1219      	asrs	r1, r3, #8
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <BME280_compensate_P_int64+0x588>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	17da      	asrs	r2, r3, #31
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ade:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aec:	464c      	mov	r4, r9
 8001aee:	0123      	lsls	r3, r4, #4
 8001af0:	4644      	mov	r4, r8
 8001af2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001af6:	4644      	mov	r4, r8
 8001af8:	0122      	lsls	r2, r4, #4
 8001afa:	1884      	adds	r4, r0, r2
 8001afc:	603c      	str	r4, [r7, #0]
 8001afe:	eb41 0303 	adc.w	r3, r1, r3
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b08:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1c:	20000282 	.word	0x20000282
 8001b20:	20000280 	.word	0x20000280
 8001b24:	2000027e 	.word	0x2000027e

08001b28 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <bme280_compensate_H_int32+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b38:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	039a      	lsls	r2, r3, #14
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <bme280_compensate_H_int32+0xc0>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	051b      	lsls	r3, r3, #20
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <bme280_compensate_H_int32+0xc4>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b5c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <bme280_compensate_H_int32+0xc8>)
 8001b60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b64:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b6c:	1292      	asrs	r2, r2, #10
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <bme280_compensate_H_int32+0xcc>)
 8001b70:	8809      	ldrh	r1, [r1, #0]
 8001b72:	4608      	mov	r0, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	fb00 f101 	mul.w	r1, r0, r1
 8001b7a:	12c9      	asrs	r1, r1, #11
 8001b7c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b84:	1292      	asrs	r2, r2, #10
 8001b86:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <bme280_compensate_H_int32+0xd0>)
 8001b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b90:	fb01 f202 	mul.w	r2, r1, r2
 8001b94:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b98:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	13db      	asrs	r3, r3, #15
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	13d2      	asrs	r2, r2, #15
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <bme280_compensate_H_int32+0xd4>)
 8001bb0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001bb6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bc4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bcc:	bfa8      	it	ge
 8001bce:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bd2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	131b      	asrs	r3, r3, #12
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	200002a0 	.word	0x200002a0
 8001be8:	20000286 	.word	0x20000286
 8001bec:	20000288 	.word	0x20000288
 8001bf0:	2000028a 	.word	0x2000028a
 8001bf4:	2000026e 	.word	0x2000026e
 8001bf8:	20000284 	.word	0x20000284
 8001bfc:	2000026c 	.word	0x2000026c

08001c00 <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c04:	f7ff fc38 	bl	8001478 <BMEReadRaw>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <BME280_Pressure+0x78>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c16:	d104      	bne.n	8001c22 <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e01b      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <BME280_Pressure+0x78>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fcb8 	bl	800159c <BME280_compensate_P_int64>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc80 	bl	8000534 <__aeabi_ui2d>
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <BME280_Pressure+0x80>)
 8001c3a:	f7fe fe1f 	bl	800087c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffe7 	bl	8000c18 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e003      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc8a 	bl	8000578 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000290 	.word	0x20000290
 8001c7c:	200003dc 	.word	0x200003dc
 8001c80:	40700000 	.word	0x40700000

08001c84 <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c88:	f7ff fbf6 	bl	8001478 <BMEReadRaw>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d121      	bne.n	8001cd6 <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <BME280_Humidity+0x78>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9a:	d104      	bne.n	8001ca6 <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <BME280_Humidity+0x7c>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e01b      	b.n	8001cde <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <BME280_Humidity+0x78>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff3c 	bl	8001b28 <bme280_compensate_H_int32>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc3e 	bl	8000534 <__aeabi_ui2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <BME280_Humidity+0x80>)
 8001cbe:	f7fe fddd 	bl	800087c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ffa5 	bl	8000c18 <__aeabi_d2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e003      	b.n	8001cde <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <BME280_Humidity+0x7c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc48 	bl	8000578 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf4:	eef0 0a67 	vmov.f32	s1, s15
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000294 	.word	0x20000294
 8001d00:	200003e0 	.word	0x200003e0
 8001d04:	40900000 	.word	0x40900000

08001d08 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001d0c:	f7ff fbb4 	bl	8001478 <BMEReadRaw>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <BME280_Temperature+0x78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1e:	d104      	bne.n	8001d2a <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01b      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <BME280_Temperature+0x78>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fbf2 	bl	8001518 <BME280_compensate_T_int32>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_i2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <BME280_Temperature+0x80>)
 8001d42:	f7fe fd9b 	bl	800087c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff63 	bl	8000c18 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e003      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	eef0 0a67 	vmov.f32	s1, s15
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2000028c 	.word	0x2000028c
 8001d84:	200003d8 	.word	0x200003d8
 8001d88:	40590000 	.word	0x40590000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <BME280_Altitude>:

float BME280_Altitude(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 8001d94:	f7ff ff34 	bl	8001c00 <BME280_Pressure>
 8001d98:	ec53 2b10 	vmov	r2, r3, d0
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff3a 	bl	8000c18 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <BME280_Altitude+0xa8>)
 8001da8:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001e3c <BME280_Altitude+0xac>
 8001db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <BME280_Altitude+0xb0>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fbd1 	bl	8000578 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001e28 <BME280_Altitude+0x98>
 8001dde:	ec43 2b10 	vmov	d0, r2, r3
 8001de2:	f007 fc6d 	bl	80096c0 <pow>
 8001de6:	ec53 2b10 	vmov	r2, r3, d0
 8001dea:	f04f 0000 	mov.w	r0, #0
 8001dee:	4915      	ldr	r1, [pc, #84]	; (8001e44 <BME280_Altitude+0xb4>)
 8001df0:	f7fe fa62 	bl	80002b8 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	a30c      	add	r3, pc, #48	; (adr r3, 8001e30 <BME280_Altitude+0xa0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fc11 	bl	8000628 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe ff03 	bl	8000c18 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e16:	6013      	str	r3, [r2, #0]
	return Altitude;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	ee07 3a90 	vmov	s15, r3
}
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	ccd745e4 	.word	0xccd745e4
 8001e2c:	3fc85b95 	.word	0x3fc85b95
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40e5a540 	.word	0x40e5a540
 8001e38:	2000029c 	.word	0x2000029c
 8001e3c:	42c80000 	.word	0x42c80000
 8001e40:	20000000 	.word	0x20000000
 8001e44:	3ff00000 	.word	0x3ff00000
 8001e48:	20000298 	.word	0x20000298

08001e4c <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	ed87 0b00 	vstr	d0, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8001e56:	f7ff ff9b 	bl	8001d90 <BME280_Altitude>
 8001e5a:	ee10 3a10 	vmov	r3, s0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb8a 	bl	8000578 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbd6 	bl	8000628 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fbca 	bl	8000628 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fbc1 	bl	8000628 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <BME280_Kalman_Alt+0x140>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fa02 	bl	80002bc <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4931      	ldr	r1, [pc, #196]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fba5 	bl	8000628 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee6:	f7fe f9e7 	bl	80002b8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe f9d7 	bl	80002bc <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4920      	ldr	r1, [pc, #128]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fb80 	bl	8000628 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	4919      	ldr	r1, [pc, #100]	; (8001f98 <BME280_Kalman_Alt+0x14c>)
 8001f32:	f7fe f9c1 	bl	80002b8 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb70 	bl	8000628 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <BME280_Kalman_Alt+0x150>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f9b1 	bl	80002bc <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe53 	bl	8000c18 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	ee07 3a90 	vmov	s15, r3
}
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002a8 	.word	0x200002a8
 8001f88:	0800a590 	.word	0x0800a590
 8001f8c:	0800a598 	.word	0x0800a598
 8001f90:	200002b0 	.word	0x200002b0
 8001f94:	200002b8 	.word	0x200002b8
 8001f98:	3ff00000 	.word	0x3ff00000
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0b00 	vstr	d0, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 8001faa:	f7ff fe29 	bl	8001c00 <BME280_Pressure>
 8001fae:	ed87 0b00 	vstr	d0, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb33 	bl	8000628 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fb27 	bl	8000628 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb1e 	bl	8000628 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <BME280_Kalman_Press+0x12c>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f95f 	bl	80002bc <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe fc39 	bl	800087c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4930      	ldr	r1, [pc, #192]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fb02 	bl	8000628 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202c:	f7fe f944 	bl	80002b8 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <BME280_Kalman_Press+0x130>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe faf3 	bl	8000628 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe f934 	bl	80002bc <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800205a:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fadd 	bl	8000628 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	4918      	ldr	r1, [pc, #96]	; (80020d8 <BME280_Kalman_Press+0x138>)
 8002078:	f7fe f91e 	bl	80002b8 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe facd 	bl	8000628 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <BME280_Kalman_Press+0x13c>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe f90e 	bl	80002bc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <BME280_Kalman_Press+0x124>)
 80020a6:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <BME280_Kalman_Press+0x134>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80020b4:	eeb0 0a47 	vmov.f32	s0, s14
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002c0 	.word	0x200002c0
 80020c8:	0800a5a0 	.word	0x0800a5a0
 80020cc:	0800a5a8 	.word	0x0800a5a8
 80020d0:	200002c8 	.word	0x200002c8
 80020d4:	20000010 	.word	0x20000010
 80020d8:	3ff00000 	.word	0x3ff00000
 80020dc:	20000018 	.word	0x20000018

080020e0 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0b00 	vstr	d0, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 80020ea:	f7ff fdcb 	bl	8001c84 <BME280_Humidity>
 80020ee:	ed87 0b00 	vstr	d0, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 80020f2:	4b44      	ldr	r3, [pc, #272]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	461d      	mov	r5, r3
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <BME280_Kalman_Hum+0x128>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <BME280_Kalman_Hum+0x124>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa87 	bl	8000628 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa7e 	bl	8000628 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <BME280_Kalman_Hum+0x12c>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f8bf 	bl	80002bc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe fb99 	bl	800087c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <BME280_Kalman_Hum+0x130>)
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa62 	bl	8000628 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216c:	f7fe f8a4 	bl	80002b8 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <BME280_Kalman_Hum+0x130>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa53 	bl	8000628 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f894 	bl	80002bc <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	491e      	ldr	r1, [pc, #120]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BME280_Kalman_Hum+0x130>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa3d 	bl	8000628 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <BME280_Kalman_Hum+0x138>)
 80021b8:	f7fe f87e 	bl	80002b8 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe fa2d 	bl	8000628 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <BME280_Kalman_Hum+0x13c>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f86e 	bl	80002bc <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <BME280_Kalman_Hum+0x134>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021f4:	eeb0 0a47 	vmov.f32	s0, s14
 80021f8:	eef0 0a67 	vmov.f32	s1, s15
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	200002d0 	.word	0x200002d0
 8002208:	0800a5b0 	.word	0x0800a5b0
 800220c:	0800a5b8 	.word	0x0800a5b8
 8002210:	200002d8 	.word	0x200002d8
 8002214:	20000020 	.word	0x20000020
 8002218:	3ff00000 	.word	0x3ff00000
 800221c:	20000028 	.word	0x20000028

08002220 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	ed87 0b00 	vstr	d0, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 800222a:	f7ff fd6d 	bl	8001d08 <BME280_Temperature>
 800222e:	ed87 0b00 	vstr	d0, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	461d      	mov	r5, r3
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f9e7 	bl	8000628 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f9de 	bl	8000628 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <BME280_Kalman_Temp+0x12c>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f81f 	bl	80002bc <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe faf9 	bl	800087c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <BME280_Kalman_Temp+0x130>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ac:	f7fe f804 	bl	80002b8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f9b3 	bl	8000628 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fd fff4 	bl	80002bc <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	491e      	ldr	r1, [pc, #120]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022da:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <BME280_Kalman_Temp+0x128>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f99d 	bl	8000628 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <BME280_Kalman_Temp+0x138>)
 80022f8:	f7fd ffde 	bl	80002b8 <__aeabi_dsub>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <BME280_Kalman_Temp+0x13c>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ffce 	bl	80002bc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	ec43 2b17 	vmov	d7, r2, r3
}
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	eef0 0a67 	vmov.f32	s1, s15
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	200002e0 	.word	0x200002e0
 8002348:	0800a5c0 	.word	0x0800a5c0
 800234c:	0800a5c8 	.word	0x0800a5c8
 8002350:	200002e8 	.word	0x200002e8
 8002354:	20000030 	.word	0x20000030
 8002358:	3ff00000 	.word	0x3ff00000
 800235c:	20000038 	.word	0x20000038

08002360 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3371      	adds	r3, #113	; 0x71
 8002378:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800237a:	e002      	b.n	8002382 <prv_parse_number+0x22>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <prv_parse_number+0x30>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b20      	cmp	r3, #32
 800238e:	d0f5      	beq.n	800237c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b2d      	cmp	r3, #45	; 0x2d
 8002396:	d104      	bne.n	80023a2 <prv_parse_number+0x42>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <prv_parse_number+0x44>
 80023a2:	2300      	movs	r3, #0
 80023a4:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80023a6:	e00d      	b.n	80023c4 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	461a      	mov	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3b30      	subs	r3, #48	; 0x30
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <prv_parse_number+0x7a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b2f      	cmp	r3, #47	; 0x2f
 80023d0:	d903      	bls.n	80023da <prv_parse_number+0x7a>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b39      	cmp	r3, #57	; 0x39
 80023d8:	d9e6      	bls.n	80023a8 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <prv_parse_number+0x86>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	425b      	negs	r3, r3
 80023e4:	e000      	b.n	80023e8 <prv_parse_number+0x88>
 80023e6:	68fb      	ldr	r3, [r7, #12]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3371      	adds	r3, #113	; 0x71
 8002408:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800240a:	e002      	b.n	8002412 <prv_parse_float_number+0x1e>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <prv_parse_float_number+0x2c>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b20      	cmp	r3, #32
 800241e:	d0f5      	beq.n	800240c <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002420:	2100      	movs	r1, #0
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f005 f934 	bl	8007690 <strtod>
 8002428:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 800242c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002430:	ec43 2b17 	vmov	d7, r2, r3
}
 8002434:	eeb0 0a47 	vmov.f32	s0, s14
 8002438:	eef0 0a67 	vmov.f32	s1, s15
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 800244c:	2100      	movs	r1, #0
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffd0 	bl	80023f4 <prv_parse_float_number>
 8002454:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800245c:	f7fe fb94 	bl	8000b88 <__aeabi_d2iz>
 8002460:	4603      	mov	r3, r0
 8002462:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <prv_parse_lat_long+0x94>)
 8002464:	fb82 1203 	smull	r1, r2, r2, r3
 8002468:	1152      	asrs	r2, r2, #5
 800246a:	17db      	asrs	r3, r3, #31
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f870 	bl	8000554 <__aeabi_i2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <prv_parse_lat_long+0x98>)
 8002482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002486:	f7fe f8cf 	bl	8000628 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002492:	f7fd ff11 	bl	80002b8 <__aeabi_dsub>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <prv_parse_lat_long+0x9c>)
 80024a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024a8:	f7fe f9e8 	bl	800087c <__aeabi_ddiv>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b4:	f7fd ff02 	bl	80002bc <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80024c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80024c8:	eeb0 0a47 	vmov.f32	s0, s14
 80024cc:	eef0 0a67 	vmov.f32	s1, s15
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	51eb851f 	.word	0x51eb851f
 80024dc:	40590000 	.word	0x40590000
 80024e0:	404e0000 	.word	0x404e0000

080024e4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80024e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d169      	bne.n	80025cc <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3371      	adds	r3, #113	; 0x71
 80024fc:	2206      	movs	r2, #6
 80024fe:	49ba      	ldr	r1, [pc, #744]	; (80027e8 <prv_parse_term+0x304>)
 8002500:	4618      	mov	r0, r3
 8002502:	f005 f9de 	bl	80078c2 <strncmp>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <prv_parse_term+0x3c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3371      	adds	r3, #113	; 0x71
 8002510:	2206      	movs	r2, #6
 8002512:	49b6      	ldr	r1, [pc, #728]	; (80027ec <prv_parse_term+0x308>)
 8002514:	4618      	mov	r0, r3
 8002516:	f005 f9d4 	bl	80078c2 <strncmp>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d104      	bne.n	800252a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002528:	e04e      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3371      	adds	r3, #113	; 0x71
 800252e:	2206      	movs	r2, #6
 8002530:	49af      	ldr	r1, [pc, #700]	; (80027f0 <prv_parse_term+0x30c>)
 8002532:	4618      	mov	r0, r3
 8002534:	f005 f9c5 	bl	80078c2 <strncmp>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <prv_parse_term+0x6e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3371      	adds	r3, #113	; 0x71
 8002542:	2206      	movs	r2, #6
 8002544:	49ab      	ldr	r1, [pc, #684]	; (80027f4 <prv_parse_term+0x310>)
 8002546:	4618      	mov	r0, r3
 8002548:	f005 f9bb 	bl	80078c2 <strncmp>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800255a:	e035      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3371      	adds	r3, #113	; 0x71
 8002560:	2206      	movs	r2, #6
 8002562:	49a5      	ldr	r1, [pc, #660]	; (80027f8 <prv_parse_term+0x314>)
 8002564:	4618      	mov	r0, r3
 8002566:	f005 f9ac 	bl	80078c2 <strncmp>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <prv_parse_term+0xa0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3371      	adds	r3, #113	; 0x71
 8002574:	2206      	movs	r2, #6
 8002576:	49a1      	ldr	r1, [pc, #644]	; (80027fc <prv_parse_term+0x318>)
 8002578:	4618      	mov	r0, r3
 800257a:	f005 f9a2 	bl	80078c2 <strncmp>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800258c:	e01c      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3371      	adds	r3, #113	; 0x71
 8002592:	2206      	movs	r2, #6
 8002594:	499a      	ldr	r1, [pc, #616]	; (8002800 <prv_parse_term+0x31c>)
 8002596:	4618      	mov	r0, r3
 8002598:	f005 f993 	bl	80078c2 <strncmp>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <prv_parse_term+0xd2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3371      	adds	r3, #113	; 0x71
 80025a6:	2206      	movs	r2, #6
 80025a8:	4996      	ldr	r1, [pc, #600]	; (8002804 <prv_parse_term+0x320>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f005 f989 	bl	80078c2 <strncmp>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2204      	movs	r2, #4
 80025ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025be:	e003      	b.n	80025c8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e231      	b.n	8002a30 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80025d2:	2900      	cmp	r1, #0
 80025d4:	f000 822b 	beq.w	8002a2e <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80025de:	2901      	cmp	r1, #1
 80025e0:	f040 80c9 	bne.w	8002776 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80025ea:	3b01      	subs	r3, #1
 80025ec:	2b0a      	cmp	r3, #10
 80025ee:	f200 8213 	bhi.w	8002a18 <prv_parse_term+0x534>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <prv_parse_term+0x114>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002625 	.word	0x08002625
 80025fc:	0800269f 	.word	0x0800269f
 8002600:	080026b5 	.word	0x080026b5
 8002604:	080026df 	.word	0x080026df
 8002608:	080026f5 	.word	0x080026f5
 800260c:	0800271f 	.word	0x0800271f
 8002610:	08002733 	.word	0x08002733
 8002614:	08002a19 	.word	0x08002a19
 8002618:	08002747 	.word	0x08002747
 800261c:	08002a19 	.word	0x08002a19
 8002620:	0800275f 	.word	0x0800275f
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800262a:	3b30      	subs	r3, #48	; 0x30
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800263e:	4413      	add	r3, r2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3b30      	subs	r3, #48	; 0x30
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002652:	3b30      	subs	r3, #48	; 0x30
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002666:	4413      	add	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3b30      	subs	r3, #48	; 0x30
 800266c:	b2da      	uxtb	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800267a:	3b30      	subs	r3, #48	; 0x30
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4413      	add	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800268e:	4413      	add	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	3b30      	subs	r3, #48	; 0x30
 8002694:	b2da      	uxtb	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 800269c:	e1c7      	b.n	8002a2e <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fed0 	bl	8002444 <prv_parse_lat_long>
 80026a4:	eeb0 7a40 	vmov.f32	s14, s0
 80026a8:	eef0 7a60 	vmov.f32	s15, s1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80026b2:	e1bc      	b.n	8002a2e <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026ba:	2b53      	cmp	r3, #83	; 0x53
 80026bc:	d005      	beq.n	80026ca <prv_parse_term+0x1e6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026c4:	2b73      	cmp	r3, #115	; 0x73
 80026c6:	f040 81a9 	bne.w	8002a1c <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80026d0:	4690      	mov	r8, r2
 80026d2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80026dc:	e19e      	b.n	8002a1c <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff feb0 	bl	8002444 <prv_parse_lat_long>
 80026e4:	eeb0 7a40 	vmov.f32	s14, s0
 80026e8:	eef0 7a60 	vmov.f32	s15, s1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80026f2:	e19c      	b.n	8002a2e <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026fa:	2b57      	cmp	r3, #87	; 0x57
 80026fc:	d005      	beq.n	800270a <prv_parse_term+0x226>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002704:	2b77      	cmp	r3, #119	; 0x77
 8002706:	f040 818b 	bne.w	8002a20 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002710:	4614      	mov	r4, r2
 8002712:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 800271c:	e180      	b.n	8002a20 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800271e:	2100      	movs	r1, #0
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fe1d 	bl	8002360 <prv_parse_number>
 8002726:	4603      	mov	r3, r0
 8002728:	b2da      	uxtb	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002730:	e17d      	b.n	8002a2e <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002732:	2100      	movs	r1, #0
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fe13 	bl	8002360 <prv_parse_number>
 800273a:	4603      	mov	r3, r0
 800273c:	b2da      	uxtb	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002744:	e173      	b.n	8002a2e <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002746:	2100      	movs	r1, #0
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fe53 	bl	80023f4 <prv_parse_float_number>
 800274e:	eeb0 7a40 	vmov.f32	s14, s0
 8002752:	eef0 7a60 	vmov.f32	s15, s1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800275c:	e167      	b.n	8002a2e <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800275e:	2100      	movs	r1, #0
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fe47 	bl	80023f4 <prv_parse_float_number>
 8002766:	eeb0 7a40 	vmov.f32	s14, s0
 800276a:	eef0 7a60 	vmov.f32	s15, s1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002774:	e15b      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800277c:	2902      	cmp	r1, #2
 800277e:	f040 8083 	bne.w	8002888 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002788:	3b02      	subs	r3, #2
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d860      	bhi.n	8002850 <prv_parse_term+0x36c>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <prv_parse_term+0x2b0>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027d5 	.word	0x080027d5
 8002798:	08002851 	.word	0x08002851
 800279c:	08002851 	.word	0x08002851
 80027a0:	08002851 	.word	0x08002851
 80027a4:	08002851 	.word	0x08002851
 80027a8:	08002851 	.word	0x08002851
 80027ac:	08002851 	.word	0x08002851
 80027b0:	08002851 	.word	0x08002851
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002851 	.word	0x08002851
 80027bc:	08002851 	.word	0x08002851
 80027c0:	08002851 	.word	0x08002851
 80027c4:	08002851 	.word	0x08002851
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002821 	.word	0x08002821
 80027d0:	08002839 	.word	0x08002839
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80027d4:	2100      	movs	r1, #0
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fdc2 	bl	8002360 <prv_parse_number>
 80027dc:	4603      	mov	r3, r0
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80027e6:	e122      	b.n	8002a2e <prv_parse_term+0x54a>
 80027e8:	0800a550 	.word	0x0800a550
 80027ec:	0800a558 	.word	0x0800a558
 80027f0:	0800a560 	.word	0x0800a560
 80027f4:	0800a568 	.word	0x0800a568
 80027f8:	0800a570 	.word	0x0800a570
 80027fc:	0800a578 	.word	0x0800a578
 8002800:	0800a580 	.word	0x0800a580
 8002804:	0800a588 	.word	0x0800a588
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fdf2 	bl	80023f4 <prv_parse_float_number>
 8002810:	eeb0 7a40 	vmov.f32	s14, s0
 8002814:	eef0 7a60 	vmov.f32	s15, s1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800281e:	e106      	b.n	8002a2e <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002820:	2100      	movs	r1, #0
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fde6 	bl	80023f4 <prv_parse_float_number>
 8002828:	eeb0 7a40 	vmov.f32	s14, s0
 800282c:	eef0 7a60 	vmov.f32	s15, s1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002836:	e0fa      	b.n	8002a2e <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002838:	2100      	movs	r1, #0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fdda 	bl	80023f4 <prv_parse_float_number>
 8002840:	eeb0 7a40 	vmov.f32	s14, s0
 8002844:	eef0 7a60 	vmov.f32	s15, s1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800284e:	e0ee      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002856:	2b02      	cmp	r3, #2
 8002858:	f240 80e4 	bls.w	8002a24 <prv_parse_term+0x540>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002862:	2b0e      	cmp	r3, #14
 8002864:	f200 80de 	bhi.w	8002a24 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002868:	2100      	movs	r1, #0
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fd78 	bl	8002360 <prv_parse_number>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002878:	3b03      	subs	r3, #3
 800287a:	b2d1      	uxtb	r1, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	460a      	mov	r2, r1
 8002882:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8002886:	e0cd      	b.n	8002a24 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800288e:	2903      	cmp	r1, #3
 8002890:	d11b      	bne.n	80028ca <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002898:	2b02      	cmp	r3, #2
 800289a:	d002      	beq.n	80028a2 <prv_parse_term+0x3be>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d00a      	beq.n	80028b6 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80028a0:	e0c5      	b.n	8002a2e <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80028a2:	2100      	movs	r1, #0
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fd5b 	bl	8002360 <prv_parse_number>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80028b4:	e0bb      	b.n	8002a2e <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80028b6:	2100      	movs	r1, #0
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fd51 	bl	8002360 <prv_parse_number>
 80028be:	4603      	mov	r3, r0
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80028c8:	e0b1      	b.n	8002a2e <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028d0:	2904      	cmp	r1, #4
 80028d2:	f040 80ac 	bne.w	8002a2e <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80028dc:	3902      	subs	r1, #2
 80028de:	2909      	cmp	r1, #9
 80028e0:	f200 80a2 	bhi.w	8002a28 <prv_parse_term+0x544>
 80028e4:	a001      	add	r0, pc, #4	; (adr r0, 80028ec <prv_parse_term+0x408>)
 80028e6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	08002915 	.word	0x08002915
 80028f0:	08002a29 	.word	0x08002a29
 80028f4:	08002a29 	.word	0x08002a29
 80028f8:	08002a29 	.word	0x08002a29
 80028fc:	08002a29 	.word	0x08002a29
 8002900:	0800292f 	.word	0x0800292f
 8002904:	08002947 	.word	0x08002947
 8002908:	0800295f 	.word	0x0800295f
 800290c:	080029d9 	.word	0x080029d9
 8002910:	080029f1 	.word	0x080029f1
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800291a:	2b41      	cmp	r3, #65	; 0x41
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 800292c:	e07f      	b.n	8002a2e <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800292e:	2100      	movs	r1, #0
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fd5f 	bl	80023f4 <prv_parse_float_number>
 8002936:	eeb0 7a40 	vmov.f32	s14, s0
 800293a:	eef0 7a60 	vmov.f32	s15, s1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002944:	e073      	b.n	8002a2e <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002946:	2100      	movs	r1, #0
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fd53 	bl	80023f4 <prv_parse_float_number>
 800294e:	eeb0 7a40 	vmov.f32	s14, s0
 8002952:	eef0 7a60 	vmov.f32	s15, s1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800295c:	e067      	b.n	8002a2e <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002964:	3b30      	subs	r3, #48	; 0x30
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002978:	4413      	add	r3, r2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3b30      	subs	r3, #48	; 0x30
 800297e:	b2da      	uxtb	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800298c:	3b30      	subs	r3, #48	; 0x30
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4413      	add	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029a0:	4413      	add	r3, r2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3b30      	subs	r3, #48	; 0x30
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80029b4:	3b30      	subs	r3, #48	; 0x30
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	4413      	add	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80029c8:	4413      	add	r3, r2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3b30      	subs	r3, #48	; 0x30
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80029d6:	e02a      	b.n	8002a2e <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80029d8:	2100      	movs	r1, #0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fd0a 	bl	80023f4 <prv_parse_float_number>
 80029e0:	eeb0 7a40 	vmov.f32	s14, s0
 80029e4:	eef0 7a60 	vmov.f32	s15, s1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80029ee:	e01e      	b.n	8002a2e <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80029f6:	2957      	cmp	r1, #87	; 0x57
 80029f8:	d004      	beq.n	8002a04 <prv_parse_term+0x520>
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a00:	2977      	cmp	r1, #119	; 0x77
 8002a02:	d113      	bne.n	8002a2c <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002a16:	e009      	b.n	8002a2c <prv_parse_term+0x548>
                break;
 8002a18:	bf00      	nop
 8002a1a:	e008      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a1c:	bf00      	nop
 8002a1e:	e006      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a20:	bf00      	nop
 8002a22:	e004      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a24:	bf00      	nop
 8002a26:	e002      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                break;
 8002a28:	bf00      	nop
 8002a2a:	e000      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a2c:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a3a:	bf00      	nop

08002a3c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a4a:	2b2f      	cmp	r3, #47	; 0x2f
 8002a4c:	d90d      	bls.n	8002a6a <prv_check_crc+0x2e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a54:	2b39      	cmp	r3, #57	; 0x39
 8002a56:	d808      	bhi.n	8002a6a <prv_check_crc+0x2e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a5e:	3b30      	subs	r3, #48	; 0x30
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	b25a      	sxtb	r2, r3
 8002a68:	e026      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a70:	2b60      	cmp	r3, #96	; 0x60
 8002a72:	d90d      	bls.n	8002a90 <prv_check_crc+0x54>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a7a:	2b7a      	cmp	r3, #122	; 0x7a
 8002a7c:	d808      	bhi.n	8002a90 <prv_check_crc+0x54>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a84:	3b57      	subs	r3, #87	; 0x57
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	e013      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d90d      	bls.n	8002ab6 <prv_check_crc+0x7a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aa0:	2b5a      	cmp	r3, #90	; 0x5a
 8002aa2:	d808      	bhi.n	8002ab6 <prv_check_crc+0x7a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aaa:	3b37      	subs	r3, #55	; 0x37
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	b25a      	sxtb	r2, r3
 8002ab4:	e000      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002abe:	2b2f      	cmp	r3, #47	; 0x2f
 8002ac0:	d90c      	bls.n	8002adc <prv_check_crc+0xa0>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ac8:	2b39      	cmp	r3, #57	; 0x39
 8002aca:	d807      	bhi.n	8002adc <prv_check_crc+0xa0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	e028      	b.n	8002b2e <prv_check_crc+0xf2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ae2:	2b60      	cmp	r3, #96	; 0x60
 8002ae4:	d90e      	bls.n	8002b04 <prv_check_crc+0xc8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002aec:	2b7a      	cmp	r3, #122	; 0x7a
 8002aee:	d809      	bhi.n	8002b04 <prv_check_crc+0xc8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002af6:	3b57      	subs	r3, #87	; 0x57
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	e014      	b.n	8002b2e <prv_check_crc+0xf2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d90e      	bls.n	8002b2c <prv_check_crc+0xf0>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b14:	2b5a      	cmp	r3, #90	; 0x5a
 8002b16:	d809      	bhi.n	8002b2c <prv_check_crc+0xf0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b1e:	3b37      	subs	r3, #55	; 0x37
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	e000      	b.n	8002b2e <prv_check_crc+0xf2>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d136      	bne.n	8002bd2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bd0:	e061      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d121      	bne.n	8002c20 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	33a1      	adds	r3, #161	; 0xa1
 8002c16:	220c      	movs	r2, #12
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f004 fed8 	bl	80079ce <memcpy>
 8002c1e:	e03a      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d106      	bne.n	8002c38 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002c36:	e02e      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d129      	bne.n	8002c96 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002ca8:	22b0      	movs	r2, #176	; 0xb0
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f004 fe00 	bl	80078b2 <memset>
    return 1;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002ccc:	e0ad      	b.n	8002e2a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b24      	cmp	r3, #36	; 0x24
 8002cd4:	d128      	bne.n	8002d28 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3370      	adds	r3, #112	; 0x70
 8002cda:	2240      	movs	r2, #64	; 0x40
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f004 fde7 	bl	80078b2 <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002cea:	2b0b      	cmp	r3, #11
 8002cec:	f200 8097 	bhi.w	8002e1e <lwgps_process+0x162>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d26:	e07a      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b2c      	cmp	r3, #44	; 0x2c
 8002d2e:	d11d      	bne.n	8002d6c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fbd7 	bl	80024e4 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4053      	eors	r3, r2
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d60:	3301      	adds	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002d6a:	e058      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b2a      	cmp	r3, #42	; 0x2a
 8002d72:	d117      	bne.n	8002da4 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fbb5 	bl	80024e4 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002da2:	e03c      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b0d      	cmp	r3, #13
 8002daa:	d109      	bne.n	8002dc0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff fe45 	bl	8002a3c <prv_check_crc>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d032      	beq.n	8002e1e <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff feca 	bl	8002b52 <prv_copy_from_tmp_memory>
 8002dbe:	e02e      	b.n	8002e1e <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4053      	eors	r3, r2
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002de4:	2b0b      	cmp	r3, #11
 8002de6:	d81a      	bhi.n	8002e1e <lwgps_process+0x162>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002dee:	4619      	mov	r1, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3301      	adds	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f af4e 	bne.w	8002cce <lwgps_process+0x12>
        }
    }
    return 1;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_UART_RxCpltCallback>:
 unsigned char array[4];
} float32toInt8;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	if(huart == &huart6) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_UART_RxCpltCallback+0x68>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d127      	bne.n	8002e9c <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b0a      	cmp	r3, #10
 8002e52:	d010      	beq.n	8002e76 <HAL_UART_RxCpltCallback+0x3a>
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	b2d1      	uxtb	r1, r2
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e68:	7011      	strb	r1, [r2, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e6e:	7819      	ldrb	r1, [r3, #0]
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_UART_RxCpltCallback+0x74>)
 8002e72:	5499      	strb	r1, [r3, r2]
 8002e74:	e00d      	b.n	8002e92 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <HAL_UART_RxCpltCallback+0x74>)
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <HAL_UART_RxCpltCallback+0x78>)
 8002e82:	f7ff ff1b 	bl	8002cbc <lwgps_process>
			rx_index = 0;
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002e92:	2201      	movs	r2, #1
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e96:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <HAL_UART_RxCpltCallback+0x68>)
 8002e98:	f002 fe73 	bl	8005b82 <HAL_UART_Receive_IT>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	2000038c 	.word	0x2000038c
 8002ea8:	20000569 	.word	0x20000569
 8002eac:	20000568 	.word	0x20000568
 8002eb0:	200004e8 	.word	0x200004e8
 8002eb4:	20000438 	.word	0x20000438

08002eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ebe:	f000 fc31 	bl	8003724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ec2:	f000 f8d9 	bl	8003078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ec6:	f000 f9c5 	bl	8003254 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002eca:	f000 f941 	bl	8003150 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002ece:	f000 f96d 	bl	80031ac <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002ed2:	f000 f995 	bl	8003200 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  lwgps_init(&gps);
 8002ed6:	4858      	ldr	r0, [pc, #352]	; (8003038 <main+0x180>)
 8002ed8:	f7ff fee2 	bl	8002ca0 <lwgps_init>
    HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002edc:	2201      	movs	r2, #1
 8002ede:	4957      	ldr	r1, [pc, #348]	; (800303c <main+0x184>)
 8002ee0:	4857      	ldr	r0, [pc, #348]	; (8003040 <main+0x188>)
 8002ee2:	f002 fe4e 	bl	8005b82 <HAL_UART_Receive_IT>

      BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	2300      	movs	r3, #0
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2303      	movs	r3, #3
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2105      	movs	r1, #5
 8002ef4:	2002      	movs	r0, #2
 8002ef6:	f7fe f9e9 	bl	80012cc <BME280_Config>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Temperature = BME280_Temperature();
 8002efa:	f7fe ff05 	bl	8001d08 <BME280_Temperature>
 8002efe:	ec53 2b10 	vmov	r2, r3, d0
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f7fd fe87 	bl	8000c18 <__aeabi_d2f>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <main+0x18c>)
 8002f0e:	6013      	str	r3, [r2, #0]
	  	 	  Pressure = BME280_Pressure();
 8002f10:	f7fe fe76 	bl	8001c00 <BME280_Pressure>
 8002f14:	ec53 2b10 	vmov	r2, r3, d0
 8002f18:	4610      	mov	r0, r2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	f7fd fe7c 	bl	8000c18 <__aeabi_d2f>
 8002f20:	4603      	mov	r3, r0
 8002f22:	4a49      	ldr	r2, [pc, #292]	; (8003048 <main+0x190>)
 8002f24:	6013      	str	r3, [r2, #0]
	  	 	  Humidity = BME280_Humidity();
 8002f26:	f7fe fead 	bl	8001c84 <BME280_Humidity>
 8002f2a:	ec53 2b10 	vmov	r2, r3, d0
 8002f2e:	4610      	mov	r0, r2
 8002f30:	4619      	mov	r1, r3
 8002f32:	f7fd fe71 	bl	8000c18 <__aeabi_d2f>
 8002f36:	4603      	mov	r3, r0
 8002f38:	4a44      	ldr	r2, [pc, #272]	; (800304c <main+0x194>)
 8002f3a:	6013      	str	r3, [r2, #0]
	  	 	  T = BME280_Kalman_Temp(Temperature);
 8002f3c:	4b41      	ldr	r3, [pc, #260]	; (8003044 <main+0x18c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fd fb19 	bl	8000578 <__aeabi_f2d>
 8002f46:	4602      	mov	r2, r0
 8002f48:	460b      	mov	r3, r1
 8002f4a:	ec43 2b10 	vmov	d0, r2, r3
 8002f4e:	f7ff f967 	bl	8002220 <BME280_Kalman_Temp>
 8002f52:	ec53 2b10 	vmov	r2, r3, d0
 8002f56:	4610      	mov	r0, r2
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f7fd fe5d 	bl	8000c18 <__aeabi_d2f>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4a3b      	ldr	r2, [pc, #236]	; (8003050 <main+0x198>)
 8002f62:	6013      	str	r3, [r2, #0]
	  	 	  P = BME280_Kalman_Press(Pressure);
 8002f64:	4b38      	ldr	r3, [pc, #224]	; (8003048 <main+0x190>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fb05 	bl	8000578 <__aeabi_f2d>
 8002f6e:	4602      	mov	r2, r0
 8002f70:	460b      	mov	r3, r1
 8002f72:	ec43 2b10 	vmov	d0, r2, r3
 8002f76:	f7ff f813 	bl	8001fa0 <BME280_Kalman_Press>
 8002f7a:	ec53 2b10 	vmov	r2, r3, d0
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fe49 	bl	8000c18 <__aeabi_d2f>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a32      	ldr	r2, [pc, #200]	; (8003054 <main+0x19c>)
 8002f8a:	6013      	str	r3, [r2, #0]
	  	 	  H = BME280_Kalman_Hum(Humidity);
 8002f8c:	4b2f      	ldr	r3, [pc, #188]	; (800304c <main+0x194>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f7fd faf1 	bl	8000578 <__aeabi_f2d>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	ec43 2b10 	vmov	d0, r2, r3
 8002f9e:	f7ff f89f 	bl	80020e0 <BME280_Kalman_Hum>
 8002fa2:	ec53 2b10 	vmov	r2, r3, d0
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	4619      	mov	r1, r3
 8002faa:	f7fd fe35 	bl	8000c18 <__aeabi_d2f>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4a29      	ldr	r2, [pc, #164]	; (8003058 <main+0x1a0>)
 8002fb2:	6013      	str	r3, [r2, #0]
	  	 	  Altitude1 = BME280_Altitude();
 8002fb4:	f7fe feec 	bl	8001d90 <BME280_Altitude>
 8002fb8:	eef0 7a40 	vmov.f32	s15, s0
 8002fbc:	4b27      	ldr	r3, [pc, #156]	; (800305c <main+0x1a4>)
 8002fbe:	edc3 7a00 	vstr	s15, [r3]
	  	 	  Alt = BME280_Kalman_Alt(Altitude1);
 8002fc2:	4b26      	ldr	r3, [pc, #152]	; (800305c <main+0x1a4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fad6 	bl	8000578 <__aeabi_f2d>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	ec43 2b10 	vmov	d0, r2, r3
 8002fd4:	f7fe ff3a 	bl	8001e4c <BME280_Kalman_Alt>
 8002fd8:	eef0 7a40 	vmov.f32	s15, s0
 8002fdc:	4b20      	ldr	r3, [pc, #128]	; (8003060 <main+0x1a8>)
 8002fde:	edc3 7a00 	vstr	s15, [r3]
	  	 	  gpsAlt = gps.altitude;
 8002fe2:	4b15      	ldr	r3, [pc, #84]	; (8003038 <main+0x180>)
 8002fe4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fe14 	bl	8000c18 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4a1c      	ldr	r2, [pc, #112]	; (8003064 <main+0x1ac>)
 8002ff4:	6013      	str	r3, [r2, #0]
	  	 	  gpsLat = gps.latitude;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	; (8003038 <main+0x180>)
 8002ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7fd fe0a 	bl	8000c18 <__aeabi_d2f>
 8003004:	4603      	mov	r3, r0
 8003006:	4a18      	ldr	r2, [pc, #96]	; (8003068 <main+0x1b0>)
 8003008:	6013      	str	r3, [r2, #0]
	  	 	  gpsLong = gps.longitude;
 800300a:	4b0b      	ldr	r3, [pc, #44]	; (8003038 <main+0x180>)
 800300c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	f7fd fe00 	bl	8000c18 <__aeabi_d2f>
 8003018:	4603      	mov	r3, r0
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <main+0x1b4>)
 800301c:	6013      	str	r3, [r2, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	 	 HAL_UART_Transmit(&huart2, buff, 54, 500);
 800301e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003022:	2236      	movs	r2, #54	; 0x36
 8003024:	4912      	ldr	r1, [pc, #72]	; (8003070 <main+0x1b8>)
 8003026:	4813      	ldr	r0, [pc, #76]	; (8003074 <main+0x1bc>)
 8003028:	f002 fd20 	bl	8005a6c <HAL_UART_Transmit>
	  	 		 	 HAL_Delay(500);
 800302c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003030:	f000 fbea 	bl	8003808 <HAL_Delay>
	  Temperature = BME280_Temperature();
 8003034:	e761      	b.n	8002efa <main+0x42>
 8003036:	bf00      	nop
 8003038:	20000438 	.word	0x20000438
 800303c:	20000569 	.word	0x20000569
 8003040:	2000038c 	.word	0x2000038c
 8003044:	200003d8 	.word	0x200003d8
 8003048:	200003dc 	.word	0x200003dc
 800304c:	200003e0 	.word	0x200003e0
 8003050:	200003e8 	.word	0x200003e8
 8003054:	200003ec 	.word	0x200003ec
 8003058:	200003f0 	.word	0x200003f0
 800305c:	200003d4 	.word	0x200003d4
 8003060:	200003e4 	.word	0x200003e4
 8003064:	200003f4 	.word	0x200003f4
 8003068:	200003f8 	.word	0x200003f8
 800306c:	200003fc 	.word	0x200003fc
 8003070:	20000400 	.word	0x20000400
 8003074:	20000344 	.word	0x20000344

08003078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b094      	sub	sp, #80	; 0x50
 800307c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800307e:	f107 031c 	add.w	r3, r7, #28
 8003082:	2234      	movs	r2, #52	; 0x34
 8003084:	2100      	movs	r1, #0
 8003086:	4618      	mov	r0, r3
 8003088:	f004 fc13 	bl	80078b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800308c:	f107 0308 	add.w	r3, r7, #8
 8003090:	2200      	movs	r2, #0
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	605a      	str	r2, [r3, #4]
 8003096:	609a      	str	r2, [r3, #8]
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	4b29      	ldr	r3, [pc, #164]	; (8003148 <SystemClock_Config+0xd0>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	4a28      	ldr	r2, [pc, #160]	; (8003148 <SystemClock_Config+0xd0>)
 80030a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030aa:	6413      	str	r3, [r2, #64]	; 0x40
 80030ac:	4b26      	ldr	r3, [pc, #152]	; (8003148 <SystemClock_Config+0xd0>)
 80030ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80030b8:	2300      	movs	r3, #0
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	4b23      	ldr	r3, [pc, #140]	; (800314c <SystemClock_Config+0xd4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80030c4:	4a21      	ldr	r2, [pc, #132]	; (800314c <SystemClock_Config+0xd4>)
 80030c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ca:	6013      	str	r3, [r2, #0]
 80030cc:	4b1f      	ldr	r3, [pc, #124]	; (800314c <SystemClock_Config+0xd4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030d4:	603b      	str	r3, [r7, #0]
 80030d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030d8:	2302      	movs	r3, #2
 80030da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030dc:	2301      	movs	r3, #1
 80030de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030e0:	2310      	movs	r3, #16
 80030e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030e4:	2302      	movs	r3, #2
 80030e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030e8:	2300      	movs	r3, #0
 80030ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030ec:	2308      	movs	r3, #8
 80030ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 80030f0:	2340      	movs	r3, #64	; 0x40
 80030f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030f4:	2302      	movs	r3, #2
 80030f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80030f8:	2302      	movs	r3, #2
 80030fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80030fc:	2302      	movs	r3, #2
 80030fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003100:	f107 031c 	add.w	r3, r7, #28
 8003104:	4618      	mov	r0, r3
 8003106:	f002 f9c3 	bl	8005490 <HAL_RCC_OscConfig>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003110:	f000 f8d6 	bl	80032c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003114:	230f      	movs	r3, #15
 8003116:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003118:	2302      	movs	r3, #2
 800311a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800311c:	2390      	movs	r3, #144	; 0x90
 800311e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003124:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800312a:	f107 0308 	add.w	r3, r7, #8
 800312e:	2100      	movs	r1, #0
 8003130:	4618      	mov	r0, r3
 8003132:	f001 fee9 	bl	8004f08 <HAL_RCC_ClockConfig>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800313c:	f000 f8c0 	bl	80032c0 <Error_Handler>
  }
}
 8003140:	bf00      	nop
 8003142:	3750      	adds	r7, #80	; 0x50
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000

08003150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <MX_I2C1_Init+0x50>)
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <MX_I2C1_Init+0x54>)
 8003158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800315a:	4b11      	ldr	r3, [pc, #68]	; (80031a0 <MX_I2C1_Init+0x50>)
 800315c:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <MX_I2C1_Init+0x58>)
 800315e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003160:	4b0f      	ldr	r3, [pc, #60]	; (80031a0 <MX_I2C1_Init+0x50>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003166:	4b0e      	ldr	r3, [pc, #56]	; (80031a0 <MX_I2C1_Init+0x50>)
 8003168:	2200      	movs	r2, #0
 800316a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <MX_I2C1_Init+0x50>)
 800316e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003172:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003174:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <MX_I2C1_Init+0x50>)
 8003176:	2200      	movs	r2, #0
 8003178:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <MX_I2C1_Init+0x50>)
 800317c:	2200      	movs	r2, #0
 800317e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003180:	4b07      	ldr	r3, [pc, #28]	; (80031a0 <MX_I2C1_Init+0x50>)
 8003182:	2200      	movs	r2, #0
 8003184:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003186:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <MX_I2C1_Init+0x50>)
 8003188:	2200      	movs	r2, #0
 800318a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800318c:	4804      	ldr	r0, [pc, #16]	; (80031a0 <MX_I2C1_Init+0x50>)
 800318e:	f000 fe97 	bl	8003ec0 <HAL_I2C_Init>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003198:	f000 f892 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800319c:	bf00      	nop
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200002f0 	.word	0x200002f0
 80031a4:	40005400 	.word	0x40005400
 80031a8:	000186a0 	.word	0x000186a0

080031ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <MX_USART2_UART_Init+0x50>)
 80031b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80031bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031c4:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031d0:	4b09      	ldr	r3, [pc, #36]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031d2:	220c      	movs	r2, #12
 80031d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031d6:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031dc:	4b06      	ldr	r3, [pc, #24]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031e2:	4805      	ldr	r0, [pc, #20]	; (80031f8 <MX_USART2_UART_Init+0x4c>)
 80031e4:	f002 fbf2 	bl	80059cc <HAL_UART_Init>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80031ee:	f000 f867 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80031f2:	bf00      	nop
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000344 	.word	0x20000344
 80031fc:	40004400 	.word	0x40004400

08003200 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_USART6_UART_Init+0x4c>)
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <MX_USART6_UART_Init+0x50>)
 8003208:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800320a:	4b10      	ldr	r3, [pc, #64]	; (800324c <MX_USART6_UART_Init+0x4c>)
 800320c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003210:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <MX_USART6_UART_Init+0x4c>)
 8003214:	2200      	movs	r2, #0
 8003216:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <MX_USART6_UART_Init+0x4c>)
 800321a:	2200      	movs	r2, #0
 800321c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <MX_USART6_UART_Init+0x4c>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <MX_USART6_UART_Init+0x4c>)
 8003226:	220c      	movs	r2, #12
 8003228:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800322a:	4b08      	ldr	r3, [pc, #32]	; (800324c <MX_USART6_UART_Init+0x4c>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <MX_USART6_UART_Init+0x4c>)
 8003232:	2200      	movs	r2, #0
 8003234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003236:	4805      	ldr	r0, [pc, #20]	; (800324c <MX_USART6_UART_Init+0x4c>)
 8003238:	f002 fbc8 	bl	80059cc <HAL_UART_Init>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003242:	f000 f83d 	bl	80032c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000038c 	.word	0x2000038c
 8003250:	40011400 	.word	0x40011400

08003254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <MX_GPIO_Init+0x68>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	4a16      	ldr	r2, [pc, #88]	; (80032bc <MX_GPIO_Init+0x68>)
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	6313      	str	r3, [r2, #48]	; 0x30
 800326a:	4b14      	ldr	r3, [pc, #80]	; (80032bc <MX_GPIO_Init+0x68>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60bb      	str	r3, [r7, #8]
 800327a:	4b10      	ldr	r3, [pc, #64]	; (80032bc <MX_GPIO_Init+0x68>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a0f      	ldr	r2, [pc, #60]	; (80032bc <MX_GPIO_Init+0x68>)
 8003280:	f043 0304 	orr.w	r3, r3, #4
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b0d      	ldr	r3, [pc, #52]	; (80032bc <MX_GPIO_Init+0x68>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0304 	and.w	r3, r3, #4
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <MX_GPIO_Init+0x68>)
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	4a08      	ldr	r2, [pc, #32]	; (80032bc <MX_GPIO_Init+0x68>)
 800329c:	f043 0302 	orr.w	r3, r3, #2
 80032a0:	6313      	str	r3, [r2, #48]	; 0x30
 80032a2:	4b06      	ldr	r3, [pc, #24]	; (80032bc <MX_GPIO_Init+0x68>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f003 0302 	and.w	r3, r3, #2
 80032aa:	607b      	str	r3, [r7, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80032c4:	b672      	cpsid	i
}
 80032c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <Error_Handler+0x8>
	...

080032cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	607b      	str	r3, [r7, #4]
 80032d6:	4b10      	ldr	r3, [pc, #64]	; (8003318 <HAL_MspInit+0x4c>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032da:	4a0f      	ldr	r2, [pc, #60]	; (8003318 <HAL_MspInit+0x4c>)
 80032dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032e0:	6453      	str	r3, [r2, #68]	; 0x44
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <HAL_MspInit+0x4c>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ea:	607b      	str	r3, [r7, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	603b      	str	r3, [r7, #0]
 80032f2:	4b09      	ldr	r3, [pc, #36]	; (8003318 <HAL_MspInit+0x4c>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a08      	ldr	r2, [pc, #32]	; (8003318 <HAL_MspInit+0x4c>)
 80032f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b06      	ldr	r3, [pc, #24]	; (8003318 <HAL_MspInit+0x4c>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003306:	603b      	str	r3, [r7, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800

0800331c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003324:	f107 0314 	add.w	r3, r7, #20
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	605a      	str	r2, [r3, #4]
 800332e:	609a      	str	r2, [r3, #8]
 8003330:	60da      	str	r2, [r3, #12]
 8003332:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a19      	ldr	r2, [pc, #100]	; (80033a0 <HAL_I2C_MspInit+0x84>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d12b      	bne.n	8003396 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	4b18      	ldr	r3, [pc, #96]	; (80033a4 <HAL_I2C_MspInit+0x88>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a17      	ldr	r2, [pc, #92]	; (80033a4 <HAL_I2C_MspInit+0x88>)
 8003348:	f043 0302 	orr.w	r3, r3, #2
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <HAL_I2C_MspInit+0x88>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0302 	and.w	r3, r3, #2
 8003356:	613b      	str	r3, [r7, #16]
 8003358:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800335a:	23c0      	movs	r3, #192	; 0xc0
 800335c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800335e:	2312      	movs	r3, #18
 8003360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003366:	2302      	movs	r3, #2
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800336a:	2304      	movs	r3, #4
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800336e:	f107 0314 	add.w	r3, r7, #20
 8003372:	4619      	mov	r1, r3
 8003374:	480c      	ldr	r0, [pc, #48]	; (80033a8 <HAL_I2C_MspInit+0x8c>)
 8003376:	f000 fc0f 	bl	8003b98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b09      	ldr	r3, [pc, #36]	; (80033a4 <HAL_I2C_MspInit+0x88>)
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a08      	ldr	r2, [pc, #32]	; (80033a4 <HAL_I2C_MspInit+0x88>)
 8003384:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003388:	6413      	str	r3, [r2, #64]	; 0x40
 800338a:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_I2C_MspInit+0x88>)
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003396:	bf00      	nop
 8003398:	3728      	adds	r7, #40	; 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40005400 	.word	0x40005400
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40020400 	.word	0x40020400

080033ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08c      	sub	sp, #48	; 0x30
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 031c 	add.w	r3, r7, #28
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a36      	ldr	r2, [pc, #216]	; (80034a4 <HAL_UART_MspInit+0xf8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d12c      	bne.n	8003428 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	61bb      	str	r3, [r7, #24]
 80033d2:	4b35      	ldr	r3, [pc, #212]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	4a34      	ldr	r2, [pc, #208]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	6413      	str	r3, [r2, #64]	; 0x40
 80033de:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	61bb      	str	r3, [r7, #24]
 80033e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	4b2e      	ldr	r3, [pc, #184]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a2d      	ldr	r2, [pc, #180]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003406:	230c      	movs	r3, #12
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003416:	2307      	movs	r3, #7
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 031c 	add.w	r3, r7, #28
 800341e:	4619      	mov	r1, r3
 8003420:	4822      	ldr	r0, [pc, #136]	; (80034ac <HAL_UART_MspInit+0x100>)
 8003422:	f000 fbb9 	bl	8003b98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003426:	e038      	b.n	800349a <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a20      	ldr	r2, [pc, #128]	; (80034b0 <HAL_UART_MspInit+0x104>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d133      	bne.n	800349a <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	4b1c      	ldr	r3, [pc, #112]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800343a:	4a1b      	ldr	r2, [pc, #108]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 800343c:	f043 0320 	orr.w	r3, r3, #32
 8003440:	6453      	str	r3, [r2, #68]	; 0x44
 8003442:	4b19      	ldr	r3, [pc, #100]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 8003444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	613b      	str	r3, [r7, #16]
 800344c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	4a14      	ldr	r2, [pc, #80]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 8003458:	f043 0304 	orr.w	r3, r3, #4
 800345c:	6313      	str	r3, [r2, #48]	; 0x30
 800345e:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <HAL_UART_MspInit+0xfc>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800346a:	23c0      	movs	r3, #192	; 0xc0
 800346c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346e:	2302      	movs	r3, #2
 8003470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003476:	2303      	movs	r3, #3
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800347a:	2308      	movs	r3, #8
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	4619      	mov	r1, r3
 8003484:	480b      	ldr	r0, [pc, #44]	; (80034b4 <HAL_UART_MspInit+0x108>)
 8003486:	f000 fb87 	bl	8003b98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800348a:	2200      	movs	r2, #0
 800348c:	2100      	movs	r1, #0
 800348e:	2047      	movs	r0, #71	; 0x47
 8003490:	f000 fab9 	bl	8003a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003494:	2047      	movs	r0, #71	; 0x47
 8003496:	f000 fad2 	bl	8003a3e <HAL_NVIC_EnableIRQ>
}
 800349a:	bf00      	nop
 800349c:	3730      	adds	r7, #48	; 0x30
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40004400 	.word	0x40004400
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40011400 	.word	0x40011400
 80034b4:	40020800 	.word	0x40020800

080034b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034bc:	e7fe      	b.n	80034bc <NMI_Handler+0x4>

080034be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034be:	b480      	push	{r7}
 80034c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034c2:	e7fe      	b.n	80034c2 <HardFault_Handler+0x4>

080034c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c8:	e7fe      	b.n	80034c8 <MemManage_Handler+0x4>

080034ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034ca:	b480      	push	{r7}
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ce:	e7fe      	b.n	80034ce <BusFault_Handler+0x4>

080034d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <UsageFault_Handler+0x4>

080034d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034da:	bf00      	nop
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e8:	bf00      	nop
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr

080034f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034f2:	b480      	push	{r7}
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f6:	bf00      	nop
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003504:	f000 f960 	bl	80037c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003508:	bf00      	nop
 800350a:	bd80      	pop	{r7, pc}

0800350c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <USART6_IRQHandler+0x10>)
 8003512:	f002 fb5b 	bl	8005bcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	2000038c 	.word	0x2000038c

08003520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  return 1;
 8003524:	2301      	movs	r3, #1
}
 8003526:	4618      	mov	r0, r3
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <_kill>:

int _kill(int pid, int sig)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800353a:	f004 fa1b 	bl	8007974 <__errno>
 800353e:	4603      	mov	r3, r0
 8003540:	2216      	movs	r2, #22
 8003542:	601a      	str	r2, [r3, #0]
  return -1;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <_exit>:

void _exit (int status)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003558:	f04f 31ff 	mov.w	r1, #4294967295
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ffe7 	bl	8003530 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003562:	e7fe      	b.n	8003562 <_exit+0x12>

08003564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b086      	sub	sp, #24
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e00a      	b.n	800358c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003576:	f3af 8000 	nop.w
 800357a:	4601      	mov	r1, r0
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	1c5a      	adds	r2, r3, #1
 8003580:	60ba      	str	r2, [r7, #8]
 8003582:	b2ca      	uxtb	r2, r1
 8003584:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	3301      	adds	r3, #1
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697a      	ldr	r2, [r7, #20]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	dbf0      	blt.n	8003576 <_read+0x12>
  }

  return len;
 8003594:	687b      	ldr	r3, [r7, #4]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b086      	sub	sp, #24
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	e009      	b.n	80035c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	1c5a      	adds	r2, r3, #1
 80035b4:	60ba      	str	r2, [r7, #8]
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	dbf1      	blt.n	80035b0 <_write+0x12>
  }
  return len;
 80035cc:	687b      	ldr	r3, [r7, #4]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_close>:

int _close(int file)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <_isatty>:

int _isatty(int file)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003616:	2301      	movs	r3, #1
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003648:	4a14      	ldr	r2, [pc, #80]	; (800369c <_sbrk+0x5c>)
 800364a:	4b15      	ldr	r3, [pc, #84]	; (80036a0 <_sbrk+0x60>)
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003654:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <_sbrk+0x64>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800365c:	4b11      	ldr	r3, [pc, #68]	; (80036a4 <_sbrk+0x64>)
 800365e:	4a12      	ldr	r2, [pc, #72]	; (80036a8 <_sbrk+0x68>)
 8003660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <_sbrk+0x64>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d207      	bcs.n	8003680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003670:	f004 f980 	bl	8007974 <__errno>
 8003674:	4603      	mov	r3, r0
 8003676:	220c      	movs	r2, #12
 8003678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367a:	f04f 33ff 	mov.w	r3, #4294967295
 800367e:	e009      	b.n	8003694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <_sbrk+0x64>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003686:	4b07      	ldr	r3, [pc, #28]	; (80036a4 <_sbrk+0x64>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4413      	add	r3, r2
 800368e:	4a05      	ldr	r2, [pc, #20]	; (80036a4 <_sbrk+0x64>)
 8003690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20020000 	.word	0x20020000
 80036a0:	00000400 	.word	0x00000400
 80036a4:	2000056c 	.word	0x2000056c
 80036a8:	200006c0 	.word	0x200006c0

080036ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <SystemInit+0x20>)
 80036b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b6:	4a05      	ldr	r2, [pc, #20]	; (80036cc <SystemInit+0x20>)
 80036b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80036bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003708 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80036d4:	f7ff ffea 	bl	80036ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036d8:	480c      	ldr	r0, [pc, #48]	; (800370c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036da:	490d      	ldr	r1, [pc, #52]	; (8003710 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036dc:	4a0d      	ldr	r2, [pc, #52]	; (8003714 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036e0:	e002      	b.n	80036e8 <LoopCopyDataInit>

080036e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036e6:	3304      	adds	r3, #4

080036e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036ec:	d3f9      	bcc.n	80036e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ee:	4a0a      	ldr	r2, [pc, #40]	; (8003718 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036f0:	4c0a      	ldr	r4, [pc, #40]	; (800371c <LoopFillZerobss+0x22>)
  movs r3, #0
 80036f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036f4:	e001      	b.n	80036fa <LoopFillZerobss>

080036f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036f8:	3204      	adds	r2, #4

080036fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036fc:	d3fb      	bcc.n	80036f6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80036fe:	f004 f93f 	bl	8007980 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003702:	f7ff fbd9 	bl	8002eb8 <main>
  bx  lr    
 8003706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003708:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800370c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003710:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003714:	0800a9e8 	.word	0x0800a9e8
  ldr r2, =_sbss
 8003718:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800371c:	200006c0 	.word	0x200006c0

08003720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003720:	e7fe      	b.n	8003720 <ADC_IRQHandler>
	...

08003724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_Init+0x40>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0d      	ldr	r2, [pc, #52]	; (8003764 <HAL_Init+0x40>)
 800372e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_Init+0x40>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <HAL_Init+0x40>)
 800373a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800373e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003740:	4b08      	ldr	r3, [pc, #32]	; (8003764 <HAL_Init+0x40>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a07      	ldr	r2, [pc, #28]	; (8003764 <HAL_Init+0x40>)
 8003746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800374c:	2003      	movs	r0, #3
 800374e:	f000 f94f 	bl	80039f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003752:	200f      	movs	r0, #15
 8003754:	f000 f808 	bl	8003768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003758:	f7ff fdb8 	bl	80032cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023c00 	.word	0x40023c00

08003768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003770:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_InitTick+0x54>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <HAL_InitTick+0x58>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4619      	mov	r1, r3
 800377a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800377e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003782:	fbb2 f3f3 	udiv	r3, r2, r3
 8003786:	4618      	mov	r0, r3
 8003788:	f000 f967 	bl	8003a5a <HAL_SYSTICK_Config>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e00e      	b.n	80037b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b0f      	cmp	r3, #15
 800379a:	d80a      	bhi.n	80037b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800379c:	2200      	movs	r2, #0
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	f04f 30ff 	mov.w	r0, #4294967295
 80037a4:	f000 f92f 	bl	8003a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037a8:	4a06      	ldr	r2, [pc, #24]	; (80037c4 <HAL_InitTick+0x5c>)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
 80037b0:	e000      	b.n	80037b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	20000040 	.word	0x20000040
 80037c0:	20000048 	.word	0x20000048
 80037c4:	20000044 	.word	0x20000044

080037c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037cc:	4b06      	ldr	r3, [pc, #24]	; (80037e8 <HAL_IncTick+0x20>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_IncTick+0x24>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4413      	add	r3, r2
 80037d8:	4a04      	ldr	r2, [pc, #16]	; (80037ec <HAL_IncTick+0x24>)
 80037da:	6013      	str	r3, [r2, #0]
}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	20000048 	.word	0x20000048
 80037ec:	20000570 	.word	0x20000570

080037f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
  return uwTick;
 80037f4:	4b03      	ldr	r3, [pc, #12]	; (8003804 <HAL_GetTick+0x14>)
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000570 	.word	0x20000570

08003808 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003810:	f7ff ffee 	bl	80037f0 <HAL_GetTick>
 8003814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003820:	d005      	beq.n	800382e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <HAL_Delay+0x44>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800382e:	bf00      	nop
 8003830:	f7ff ffde 	bl	80037f0 <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	429a      	cmp	r2, r3
 800383e:	d8f7      	bhi.n	8003830 <HAL_Delay+0x28>
  {
  }
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	20000048 	.word	0x20000048

08003850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003866:	68ba      	ldr	r2, [r7, #8]
 8003868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800386c:	4013      	ands	r3, r2
 800386e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800387c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003882:	4a04      	ldr	r2, [pc, #16]	; (8003894 <__NVIC_SetPriorityGrouping+0x44>)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	60d3      	str	r3, [r2, #12]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	e000ed00 	.word	0xe000ed00

08003898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <__NVIC_GetPriorityGrouping+0x18>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	0a1b      	lsrs	r3, r3, #8
 80038a2:	f003 0307 	and.w	r3, r3, #7
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ae:	4770      	bx	lr
 80038b0:	e000ed00 	.word	0xe000ed00

080038b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	db0b      	blt.n	80038de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	f003 021f 	and.w	r2, r3, #31
 80038cc:	4907      	ldr	r1, [pc, #28]	; (80038ec <__NVIC_EnableIRQ+0x38>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	095b      	lsrs	r3, r3, #5
 80038d4:	2001      	movs	r0, #1
 80038d6:	fa00 f202 	lsl.w	r2, r0, r2
 80038da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	e000e100 	.word	0xe000e100

080038f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	6039      	str	r1, [r7, #0]
 80038fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003900:	2b00      	cmp	r3, #0
 8003902:	db0a      	blt.n	800391a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	b2da      	uxtb	r2, r3
 8003908:	490c      	ldr	r1, [pc, #48]	; (800393c <__NVIC_SetPriority+0x4c>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	0112      	lsls	r2, r2, #4
 8003910:	b2d2      	uxtb	r2, r2
 8003912:	440b      	add	r3, r1
 8003914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003918:	e00a      	b.n	8003930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	4908      	ldr	r1, [pc, #32]	; (8003940 <__NVIC_SetPriority+0x50>)
 8003920:	79fb      	ldrb	r3, [r7, #7]
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	3b04      	subs	r3, #4
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	440b      	add	r3, r1
 800392e:	761a      	strb	r2, [r3, #24]
}
 8003930:	bf00      	nop
 8003932:	370c      	adds	r7, #12
 8003934:	46bd      	mov	sp, r7
 8003936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393a:	4770      	bx	lr
 800393c:	e000e100 	.word	0xe000e100
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003944:	b480      	push	{r7}
 8003946:	b089      	sub	sp, #36	; 0x24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f1c3 0307 	rsb	r3, r3, #7
 800395e:	2b04      	cmp	r3, #4
 8003960:	bf28      	it	cs
 8003962:	2304      	movcs	r3, #4
 8003964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	3304      	adds	r3, #4
 800396a:	2b06      	cmp	r3, #6
 800396c:	d902      	bls.n	8003974 <NVIC_EncodePriority+0x30>
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	3b03      	subs	r3, #3
 8003972:	e000      	b.n	8003976 <NVIC_EncodePriority+0x32>
 8003974:	2300      	movs	r3, #0
 8003976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003978:	f04f 32ff 	mov.w	r2, #4294967295
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	fa02 f303 	lsl.w	r3, r2, r3
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	401a      	ands	r2, r3
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800398c:	f04f 31ff 	mov.w	r1, #4294967295
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	fa01 f303 	lsl.w	r3, r1, r3
 8003996:	43d9      	mvns	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800399c:	4313      	orrs	r3, r2
         );
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3724      	adds	r7, #36	; 0x24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
	...

080039ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039bc:	d301      	bcc.n	80039c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039be:	2301      	movs	r3, #1
 80039c0:	e00f      	b.n	80039e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039c2:	4a0a      	ldr	r2, [pc, #40]	; (80039ec <SysTick_Config+0x40>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039ca:	210f      	movs	r1, #15
 80039cc:	f04f 30ff 	mov.w	r0, #4294967295
 80039d0:	f7ff ff8e 	bl	80038f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d4:	4b05      	ldr	r3, [pc, #20]	; (80039ec <SysTick_Config+0x40>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039da:	4b04      	ldr	r3, [pc, #16]	; (80039ec <SysTick_Config+0x40>)
 80039dc:	2207      	movs	r2, #7
 80039de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	e000e010 	.word	0xe000e010

080039f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7ff ff29 	bl	8003850 <__NVIC_SetPriorityGrouping>
}
 80039fe:	bf00      	nop
 8003a00:	3708      	adds	r7, #8
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b086      	sub	sp, #24
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
 8003a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a18:	f7ff ff3e 	bl	8003898 <__NVIC_GetPriorityGrouping>
 8003a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7ff ff8e 	bl	8003944 <NVIC_EncodePriority>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2e:	4611      	mov	r1, r2
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7ff ff5d 	bl	80038f0 <__NVIC_SetPriority>
}
 8003a36:	bf00      	nop
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b082      	sub	sp, #8
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	4603      	mov	r3, r0
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff ff31 	bl	80038b4 <__NVIC_EnableIRQ>
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7ff ffa2 	bl	80039ac <SysTick_Config>
 8003a68:	4603      	mov	r3, r0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b084      	sub	sp, #16
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a80:	f7ff feb6 	bl	80037f0 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d008      	beq.n	8003aa4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e052      	b.n	8003b4a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0216 	bic.w	r2, r2, #22
 8003ab2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ac2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <HAL_DMA_Abort+0x62>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0208 	bic.w	r2, r2, #8
 8003ae2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003af4:	e013      	b.n	8003b1e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003af6:	f7ff fe7b 	bl	80037f0 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d90c      	bls.n	8003b1e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e015      	b.n	8003b4a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e4      	bne.n	8003af6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	223f      	movs	r2, #63	; 0x3f
 8003b32:	409a      	lsls	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b52:	b480      	push	{r7}
 8003b54:	b083      	sub	sp, #12
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d004      	beq.n	8003b70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2280      	movs	r2, #128	; 0x80
 8003b6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e00c      	b.n	8003b8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2205      	movs	r2, #5
 8003b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 0201 	bic.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b089      	sub	sp, #36	; 0x24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	e165      	b.n	8003e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	f040 8154 	bne.w	8003e7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d005      	beq.n	8003bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d130      	bne.n	8003c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bf0:	69fb      	ldr	r3, [r7, #28]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	43db      	mvns	r3, r3
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	4013      	ands	r3, r2
 8003c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	69ba      	ldr	r2, [r7, #24]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c20:	2201      	movs	r2, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	091b      	lsrs	r3, r3, #4
 8003c36:	f003 0201 	and.w	r2, r3, #1
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69ba      	ldr	r2, [r7, #24]
 8003c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	2b03      	cmp	r3, #3
 8003c56:	d017      	beq.n	8003c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d123      	bne.n	8003cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	08da      	lsrs	r2, r3, #3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3208      	adds	r2, #8
 8003c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	220f      	movs	r2, #15
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	691a      	ldr	r2, [r3, #16]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	08da      	lsrs	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	3208      	adds	r2, #8
 8003cd6:	69b9      	ldr	r1, [r7, #24]
 8003cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0203 	and.w	r2, r3, #3
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80ae 	beq.w	8003e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	60fb      	str	r3, [r7, #12]
 8003d22:	4b5d      	ldr	r3, [pc, #372]	; (8003e98 <HAL_GPIO_Init+0x300>)
 8003d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d26:	4a5c      	ldr	r2, [pc, #368]	; (8003e98 <HAL_GPIO_Init+0x300>)
 8003d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d2e:	4b5a      	ldr	r3, [pc, #360]	; (8003e98 <HAL_GPIO_Init+0x300>)
 8003d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d3a:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	089b      	lsrs	r3, r3, #2
 8003d40:	3302      	adds	r3, #2
 8003d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	220f      	movs	r2, #15
 8003d52:	fa02 f303 	lsl.w	r3, r2, r3
 8003d56:	43db      	mvns	r3, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a4f      	ldr	r2, [pc, #316]	; (8003ea0 <HAL_GPIO_Init+0x308>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d025      	beq.n	8003db2 <HAL_GPIO_Init+0x21a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4e      	ldr	r2, [pc, #312]	; (8003ea4 <HAL_GPIO_Init+0x30c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d01f      	beq.n	8003dae <HAL_GPIO_Init+0x216>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a4d      	ldr	r2, [pc, #308]	; (8003ea8 <HAL_GPIO_Init+0x310>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d019      	beq.n	8003daa <HAL_GPIO_Init+0x212>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a4c      	ldr	r2, [pc, #304]	; (8003eac <HAL_GPIO_Init+0x314>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d013      	beq.n	8003da6 <HAL_GPIO_Init+0x20e>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a4b      	ldr	r2, [pc, #300]	; (8003eb0 <HAL_GPIO_Init+0x318>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00d      	beq.n	8003da2 <HAL_GPIO_Init+0x20a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a4a      	ldr	r2, [pc, #296]	; (8003eb4 <HAL_GPIO_Init+0x31c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <HAL_GPIO_Init+0x206>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a49      	ldr	r2, [pc, #292]	; (8003eb8 <HAL_GPIO_Init+0x320>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d101      	bne.n	8003d9a <HAL_GPIO_Init+0x202>
 8003d96:	2306      	movs	r3, #6
 8003d98:	e00c      	b.n	8003db4 <HAL_GPIO_Init+0x21c>
 8003d9a:	2307      	movs	r3, #7
 8003d9c:	e00a      	b.n	8003db4 <HAL_GPIO_Init+0x21c>
 8003d9e:	2305      	movs	r3, #5
 8003da0:	e008      	b.n	8003db4 <HAL_GPIO_Init+0x21c>
 8003da2:	2304      	movs	r3, #4
 8003da4:	e006      	b.n	8003db4 <HAL_GPIO_Init+0x21c>
 8003da6:	2303      	movs	r3, #3
 8003da8:	e004      	b.n	8003db4 <HAL_GPIO_Init+0x21c>
 8003daa:	2302      	movs	r3, #2
 8003dac:	e002      	b.n	8003db4 <HAL_GPIO_Init+0x21c>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_GPIO_Init+0x21c>
 8003db2:	2300      	movs	r3, #0
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	f002 0203 	and.w	r2, r2, #3
 8003dba:	0092      	lsls	r2, r2, #2
 8003dbc:	4093      	lsls	r3, r2
 8003dbe:	69ba      	ldr	r2, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dc4:	4935      	ldr	r1, [pc, #212]	; (8003e9c <HAL_GPIO_Init+0x304>)
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	089b      	lsrs	r3, r3, #2
 8003dca:	3302      	adds	r3, #2
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dd2:	4b3a      	ldr	r3, [pc, #232]	; (8003ebc <HAL_GPIO_Init+0x324>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	43db      	mvns	r3, r3
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4013      	ands	r3, r2
 8003de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003df6:	4a31      	ldr	r2, [pc, #196]	; (8003ebc <HAL_GPIO_Init+0x324>)
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dfc:	4b2f      	ldr	r3, [pc, #188]	; (8003ebc <HAL_GPIO_Init+0x324>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e20:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <HAL_GPIO_Init+0x324>)
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e26:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <HAL_GPIO_Init+0x324>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e4a:	4a1c      	ldr	r2, [pc, #112]	; (8003ebc <HAL_GPIO_Init+0x324>)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e50:	4b1a      	ldr	r3, [pc, #104]	; (8003ebc <HAL_GPIO_Init+0x324>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e74:	4a11      	ldr	r2, [pc, #68]	; (8003ebc <HAL_GPIO_Init+0x324>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	61fb      	str	r3, [r7, #28]
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b0f      	cmp	r3, #15
 8003e84:	f67f ae96 	bls.w	8003bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e88:	bf00      	nop
 8003e8a:	bf00      	nop
 8003e8c:	3724      	adds	r7, #36	; 0x24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	40023800 	.word	0x40023800
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	40020000 	.word	0x40020000
 8003ea4:	40020400 	.word	0x40020400
 8003ea8:	40020800 	.word	0x40020800
 8003eac:	40020c00 	.word	0x40020c00
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40021400 	.word	0x40021400
 8003eb8:	40021800 	.word	0x40021800
 8003ebc:	40013c00 	.word	0x40013c00

08003ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e12b      	b.n	800412a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d106      	bne.n	8003eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fa18 	bl	800331c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2224      	movs	r2, #36	; 0x24
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0201 	bic.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f24:	f001 f8e2 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 8003f28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	4a81      	ldr	r2, [pc, #516]	; (8004134 <HAL_I2C_Init+0x274>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d807      	bhi.n	8003f44 <HAL_I2C_Init+0x84>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a80      	ldr	r2, [pc, #512]	; (8004138 <HAL_I2C_Init+0x278>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bf94      	ite	ls
 8003f3c:	2301      	movls	r3, #1
 8003f3e:	2300      	movhi	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e006      	b.n	8003f52 <HAL_I2C_Init+0x92>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a7d      	ldr	r2, [pc, #500]	; (800413c <HAL_I2C_Init+0x27c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	bf94      	ite	ls
 8003f4c:	2301      	movls	r3, #1
 8003f4e:	2300      	movhi	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0e7      	b.n	800412a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4a78      	ldr	r2, [pc, #480]	; (8004140 <HAL_I2C_Init+0x280>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0c9b      	lsrs	r3, r3, #18
 8003f64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a6a      	ldr	r2, [pc, #424]	; (8004134 <HAL_I2C_Init+0x274>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d802      	bhi.n	8003f94 <HAL_I2C_Init+0xd4>
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	3301      	adds	r3, #1
 8003f92:	e009      	b.n	8003fa8 <HAL_I2C_Init+0xe8>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f9a:	fb02 f303 	mul.w	r3, r2, r3
 8003f9e:	4a69      	ldr	r2, [pc, #420]	; (8004144 <HAL_I2C_Init+0x284>)
 8003fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa4:	099b      	lsrs	r3, r3, #6
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	495c      	ldr	r1, [pc, #368]	; (8004134 <HAL_I2C_Init+0x274>)
 8003fc4:	428b      	cmp	r3, r1
 8003fc6:	d819      	bhi.n	8003ffc <HAL_I2C_Init+0x13c>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	1e59      	subs	r1, r3, #1
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fd6:	1c59      	adds	r1, r3, #1
 8003fd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fdc:	400b      	ands	r3, r1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_I2C_Init+0x138>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1e59      	subs	r1, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff6:	e051      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	e04f      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d111      	bne.n	8004028 <HAL_I2C_Init+0x168>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	1e58      	subs	r0, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6859      	ldr	r1, [r3, #4]
 800400c:	460b      	mov	r3, r1
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	2b00      	cmp	r3, #0
 800401e:	bf0c      	ite	eq
 8004020:	2301      	moveq	r3, #1
 8004022:	2300      	movne	r3, #0
 8004024:	b2db      	uxtb	r3, r3
 8004026:	e012      	b.n	800404e <HAL_I2C_Init+0x18e>
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	1e58      	subs	r0, r3, #1
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6859      	ldr	r1, [r3, #4]
 8004030:	460b      	mov	r3, r1
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	0099      	lsls	r1, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	fbb0 f3f3 	udiv	r3, r0, r3
 800403e:	3301      	adds	r3, #1
 8004040:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf0c      	ite	eq
 8004048:	2301      	moveq	r3, #1
 800404a:	2300      	movne	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_I2C_Init+0x196>
 8004052:	2301      	movs	r3, #1
 8004054:	e022      	b.n	800409c <HAL_I2C_Init+0x1dc>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10e      	bne.n	800407c <HAL_I2C_Init+0x1bc>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1e58      	subs	r0, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6859      	ldr	r1, [r3, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	440b      	add	r3, r1
 800406c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004070:	3301      	adds	r3, #1
 8004072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004076:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800407a:	e00f      	b.n	800409c <HAL_I2C_Init+0x1dc>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1e58      	subs	r0, r3, #1
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	0099      	lsls	r1, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004092:	3301      	adds	r3, #1
 8004094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	6809      	ldr	r1, [r1, #0]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	69da      	ldr	r2, [r3, #28]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6911      	ldr	r1, [r2, #16]
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	430b      	orrs	r3, r1
 80040de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695a      	ldr	r2, [r3, #20]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	431a      	orrs	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2220      	movs	r2, #32
 8004116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	000186a0 	.word	0x000186a0
 8004138:	001e847f 	.word	0x001e847f
 800413c:	003d08ff 	.word	0x003d08ff
 8004140:	431bde83 	.word	0x431bde83
 8004144:	10624dd3 	.word	0x10624dd3

08004148 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4603      	mov	r3, r0
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	460b      	mov	r3, r1
 800415c:	813b      	strh	r3, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004162:	f7ff fb45 	bl	80037f0 <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b20      	cmp	r3, #32
 8004172:	f040 80d9 	bne.w	8004328 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2319      	movs	r3, #25
 800417c:	2201      	movs	r2, #1
 800417e:	496d      	ldr	r1, [pc, #436]	; (8004334 <HAL_I2C_Mem_Write+0x1ec>)
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 fc8b 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
 800418e:	e0cc      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_I2C_Mem_Write+0x56>
 800419a:	2302      	movs	r3, #2
 800419c:	e0c5      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d007      	beq.n	80041c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2221      	movs	r2, #33	; 0x21
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2240      	movs	r2, #64	; 0x40
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a4d      	ldr	r2, [pc, #308]	; (8004338 <HAL_I2C_Mem_Write+0x1f0>)
 8004204:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004206:	88f8      	ldrh	r0, [r7, #6]
 8004208:	893a      	ldrh	r2, [r7, #8]
 800420a:	8979      	ldrh	r1, [r7, #10]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4603      	mov	r3, r0
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fac2 	bl	80047a0 <I2C_RequestMemoryWrite>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d052      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e081      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fd50 	bl	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b04      	cmp	r3, #4
 800423c:	d107      	bne.n	800424e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e06b      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_I2C_Mem_Write+0x180>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	d017      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1aa      	bne.n	8004226 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 fd43 	bl	8004d60 <I2C_WaitOnBTFFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d107      	bne.n	80042f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e016      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	00100002 	.word	0x00100002
 8004338:	ffff0000 	.word	0xffff0000

0800433c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08c      	sub	sp, #48	; 0x30
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	461a      	mov	r2, r3
 800434a:	4603      	mov	r3, r0
 800434c:	817b      	strh	r3, [r7, #10]
 800434e:	460b      	mov	r3, r1
 8004350:	813b      	strh	r3, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004356:	f7ff fa4b 	bl	80037f0 <HAL_GetTick>
 800435a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b20      	cmp	r3, #32
 8004366:	f040 8214 	bne.w	8004792 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	2319      	movs	r3, #25
 8004370:	2201      	movs	r2, #1
 8004372:	497b      	ldr	r1, [pc, #492]	; (8004560 <HAL_I2C_Mem_Read+0x224>)
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f000 fb91 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004380:	2302      	movs	r3, #2
 8004382:	e207      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800438a:	2b01      	cmp	r3, #1
 800438c:	d101      	bne.n	8004392 <HAL_I2C_Mem_Read+0x56>
 800438e:	2302      	movs	r3, #2
 8004390:	e200      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d007      	beq.n	80043b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0201 	orr.w	r2, r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2222      	movs	r2, #34	; 0x22
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2240      	movs	r2, #64	; 0x40
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80043e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a5b      	ldr	r2, [pc, #364]	; (8004564 <HAL_I2C_Mem_Read+0x228>)
 80043f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043fa:	88f8      	ldrh	r0, [r7, #6]
 80043fc:	893a      	ldrh	r2, [r7, #8]
 80043fe:	8979      	ldrh	r1, [r7, #10]
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	9301      	str	r3, [sp, #4]
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	4603      	mov	r3, r0
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 fa5e 	bl	80048cc <I2C_RequestMemoryRead>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e1bc      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	2b00      	cmp	r3, #0
 8004420:	d113      	bne.n	800444a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004422:	2300      	movs	r3, #0
 8004424:	623b      	str	r3, [r7, #32]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	623b      	str	r3, [r7, #32]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e190      	b.n	800476c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444e:	2b01      	cmp	r3, #1
 8004450:	d11b      	bne.n	800448a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004460:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695b      	ldr	r3, [r3, #20]
 800446c:	61fb      	str	r3, [r7, #28]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	61fb      	str	r3, [r7, #28]
 8004476:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	e170      	b.n	800476c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448e:	2b02      	cmp	r3, #2
 8004490:	d11b      	bne.n	80044ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b2:	2300      	movs	r3, #0
 80044b4:	61bb      	str	r3, [r7, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	61bb      	str	r3, [r7, #24]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	e150      	b.n	800476c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044ca:	2300      	movs	r3, #0
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	617b      	str	r3, [r7, #20]
 80044de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044e0:	e144      	b.n	800476c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	f200 80f1 	bhi.w	80046ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d123      	bne.n	800453c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fc79 	bl	8004df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e145      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691a      	ldr	r2, [r3, #16]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004524:	3b01      	subs	r3, #1
 8004526:	b29a      	uxth	r2, r3
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004530:	b29b      	uxth	r3, r3
 8004532:	3b01      	subs	r3, #1
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	855a      	strh	r2, [r3, #42]	; 0x2a
 800453a:	e117      	b.n	800476c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004540:	2b02      	cmp	r3, #2
 8004542:	d14e      	bne.n	80045e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	9300      	str	r3, [sp, #0]
 8004548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800454a:	2200      	movs	r2, #0
 800454c:	4906      	ldr	r1, [pc, #24]	; (8004568 <HAL_I2C_Mem_Read+0x22c>)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 faa4 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d008      	beq.n	800456c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e11a      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
 800455e:	bf00      	nop
 8004560:	00100002 	.word	0x00100002
 8004564:	ffff0000 	.word	0xffff0000
 8004568:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a4:	b29b      	uxth	r3, r3
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691a      	ldr	r2, [r3, #16]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e0:	e0c4      	b.n	800476c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	2200      	movs	r2, #0
 80045ea:	496c      	ldr	r1, [pc, #432]	; (800479c <HAL_I2C_Mem_Read+0x460>)
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fa55 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d001      	beq.n	80045fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0cb      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691a      	ldr	r2, [r3, #16]
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	1c5a      	adds	r2, r3, #1
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	3b01      	subs	r3, #1
 800462a:	b29a      	uxth	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29a      	uxth	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	9300      	str	r3, [sp, #0]
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2200      	movs	r2, #0
 8004646:	4955      	ldr	r1, [pc, #340]	; (800479c <HAL_I2C_Mem_Read+0x460>)
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 fa27 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 800464e:	4603      	mov	r3, r0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d001      	beq.n	8004658 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e09d      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	1c5a      	adds	r2, r3, #1
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046cc:	e04e      	b.n	800476c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 fb8c 	bl	8004df0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e058      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	b2d2      	uxtb	r2, r2
 80046ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470a:	b29b      	uxth	r3, r3
 800470c:	3b01      	subs	r3, #1
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695b      	ldr	r3, [r3, #20]
 800471a:	f003 0304 	and.w	r3, r3, #4
 800471e:	2b04      	cmp	r3, #4
 8004720:	d124      	bne.n	800476c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	2b03      	cmp	r3, #3
 8004728:	d107      	bne.n	800473a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004738:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	691a      	ldr	r2, [r3, #16]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	b2d2      	uxtb	r2, r2
 8004746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	1c5a      	adds	r2, r3, #1
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	3b01      	subs	r3, #1
 8004758:	b29a      	uxth	r2, r3
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004770:	2b00      	cmp	r3, #0
 8004772:	f47f aeb6 	bne.w	80044e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2220      	movs	r2, #32
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3728      	adds	r7, #40	; 0x28
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	00010004 	.word	0x00010004

080047a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	4608      	mov	r0, r1
 80047aa:	4611      	mov	r1, r2
 80047ac:	461a      	mov	r2, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	817b      	strh	r3, [r7, #10]
 80047b2:	460b      	mov	r3, r1
 80047b4:	813b      	strh	r3, [r7, #8]
 80047b6:	4613      	mov	r3, r2
 80047b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	6a3b      	ldr	r3, [r7, #32]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 f960 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00d      	beq.n	80047fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f0:	d103      	bne.n	80047fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e05f      	b.n	80048be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047fe:	897b      	ldrh	r3, [r7, #10]
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800480c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004810:	6a3a      	ldr	r2, [r7, #32]
 8004812:	492d      	ldr	r1, [pc, #180]	; (80048c8 <I2C_RequestMemoryWrite+0x128>)
 8004814:	68f8      	ldr	r0, [r7, #12]
 8004816:	f000 f9bb 	bl	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800481a:	4603      	mov	r3, r0
 800481c:	2b00      	cmp	r3, #0
 800481e:	d001      	beq.n	8004824 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e04c      	b.n	80048be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	617b      	str	r3, [r7, #20]
 8004838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800483a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483c:	6a39      	ldr	r1, [r7, #32]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fa46 	bl	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	2b04      	cmp	r3, #4
 8004850:	d107      	bne.n	8004862 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e02b      	b.n	80048be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800486c:	893b      	ldrh	r3, [r7, #8]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	611a      	str	r2, [r3, #16]
 8004876:	e021      	b.n	80048bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004878:	893b      	ldrh	r3, [r7, #8]
 800487a:	0a1b      	lsrs	r3, r3, #8
 800487c:	b29b      	uxth	r3, r3
 800487e:	b2da      	uxtb	r2, r3
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004888:	6a39      	ldr	r1, [r7, #32]
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fa20 	bl	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00d      	beq.n	80048b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	2b04      	cmp	r3, #4
 800489c:	d107      	bne.n	80048ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e005      	b.n	80048be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048b2:	893b      	ldrh	r3, [r7, #8]
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	00010002 	.word	0x00010002

080048cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	4608      	mov	r0, r1
 80048d6:	4611      	mov	r1, r2
 80048d8:	461a      	mov	r2, r3
 80048da:	4603      	mov	r3, r0
 80048dc:	817b      	strh	r3, [r7, #10]
 80048de:	460b      	mov	r3, r1
 80048e0:	813b      	strh	r3, [r7, #8]
 80048e2:	4613      	mov	r3, r2
 80048e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004904:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	2200      	movs	r2, #0
 800490e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 f8c2 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004928:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492c:	d103      	bne.n	8004936 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0aa      	b.n	8004a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004948:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800494a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800494c:	6a3a      	ldr	r2, [r7, #32]
 800494e:	4952      	ldr	r1, [pc, #328]	; (8004a98 <I2C_RequestMemoryRead+0x1cc>)
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f000 f91d 	bl	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	d001      	beq.n	8004960 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e097      	b.n	8004a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	617b      	str	r3, [r7, #20]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004978:	6a39      	ldr	r1, [r7, #32]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f9a8 	bl	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00d      	beq.n	80049a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	2b04      	cmp	r3, #4
 800498c:	d107      	bne.n	800499e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e076      	b.n	8004a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d105      	bne.n	80049b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049a8:	893b      	ldrh	r3, [r7, #8]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	611a      	str	r2, [r3, #16]
 80049b2:	e021      	b.n	80049f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80049b4:	893b      	ldrh	r3, [r7, #8]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	b2da      	uxtb	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c4:	6a39      	ldr	r1, [r7, #32]
 80049c6:	68f8      	ldr	r0, [r7, #12]
 80049c8:	f000 f982 	bl	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00d      	beq.n	80049ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	2b04      	cmp	r3, #4
 80049d8:	d107      	bne.n	80049ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e050      	b.n	8004a90 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049ee:	893b      	ldrh	r3, [r7, #8]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fa:	6a39      	ldr	r1, [r7, #32]
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f000 f967 	bl	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00d      	beq.n	8004a24 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d107      	bne.n	8004a20 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e035      	b.n	8004a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a32:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f82b 	bl	8004a9c <I2C_WaitOnFlagUntilTimeout>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d00d      	beq.n	8004a68 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5a:	d103      	bne.n	8004a64 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e013      	b.n	8004a90 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a68:	897b      	ldrh	r3, [r7, #10]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f043 0301 	orr.w	r3, r3, #1
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	6a3a      	ldr	r2, [r7, #32]
 8004a7c:	4906      	ldr	r1, [pc, #24]	; (8004a98 <I2C_RequestMemoryRead+0x1cc>)
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f886 	bl	8004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3718      	adds	r7, #24
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	00010002 	.word	0x00010002

08004a9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b084      	sub	sp, #16
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aac:	e048      	b.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab4:	d044      	beq.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab6:	f7fe fe9b 	bl	80037f0 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d302      	bcc.n	8004acc <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d139      	bne.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d10d      	bne.n	8004af2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	43da      	mvns	r2, r3
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	e00c      	b.n	8004b0c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	43da      	mvns	r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	4013      	ands	r3, r2
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	bf0c      	ite	eq
 8004b04:	2301      	moveq	r3, #1
 8004b06:	2300      	movne	r3, #0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	79fb      	ldrb	r3, [r7, #7]
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d116      	bne.n	8004b40 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f043 0220 	orr.w	r2, r3, #32
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e023      	b.n	8004b88 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	0c1b      	lsrs	r3, r3, #16
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d10d      	bne.n	8004b66 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695b      	ldr	r3, [r3, #20]
 8004b50:	43da      	mvns	r2, r3
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	4013      	ands	r3, r2
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bf0c      	ite	eq
 8004b5c:	2301      	moveq	r3, #1
 8004b5e:	2300      	movne	r3, #0
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	461a      	mov	r2, r3
 8004b64:	e00c      	b.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	43da      	mvns	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf0c      	ite	eq
 8004b78:	2301      	moveq	r3, #1
 8004b7a:	2300      	movne	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	461a      	mov	r2, r3
 8004b80:	79fb      	ldrb	r3, [r7, #7]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d093      	beq.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3710      	adds	r7, #16
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b9e:	e071      	b.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004baa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bae:	d123      	bne.n	8004bf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bbe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2220      	movs	r2, #32
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e067      	b.n	8004cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bfe:	d041      	beq.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c00:	f7fe fdf6 	bl	80037f0 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d302      	bcc.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d136      	bne.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	0c1b      	lsrs	r3, r3, #16
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10c      	bne.n	8004c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	43da      	mvns	r2, r3
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bf14      	ite	ne
 8004c32:	2301      	movne	r3, #1
 8004c34:	2300      	moveq	r3, #0
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	e00b      	b.n	8004c52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf14      	ite	ne
 8004c4c:	2301      	movne	r3, #1
 8004c4e:	2300      	moveq	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d016      	beq.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	2200      	movs	r2, #0
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	f043 0220 	orr.w	r2, r3, #32
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e021      	b.n	8004cc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	0c1b      	lsrs	r3, r3, #16
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d10c      	bne.n	8004ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	43da      	mvns	r2, r3
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e00b      	b.n	8004cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	43da      	mvns	r2, r3
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	bf14      	ite	ne
 8004cba:	2301      	movne	r3, #1
 8004cbc:	2300      	moveq	r3, #0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f47f af6d 	bne.w	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b084      	sub	sp, #16
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cdc:	e034      	b.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f000 f8e3 	bl	8004eaa <I2C_IsAcknowledgeFailed>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e034      	b.n	8004d58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf4:	d028      	beq.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7fe fd7b 	bl	80037f0 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11d      	bne.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b80      	cmp	r3, #128	; 0x80
 8004d18:	d016      	beq.n	8004d48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2220      	movs	r2, #32
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e007      	b.n	8004d58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d52:	2b80      	cmp	r3, #128	; 0x80
 8004d54:	d1c3      	bne.n	8004cde <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d6c:	e034      	b.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f89b 	bl	8004eaa <I2C_IsAcknowledgeFailed>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e034      	b.n	8004de8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d028      	beq.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fe fd33 	bl	80037f0 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d11d      	bne.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	695b      	ldr	r3, [r3, #20]
 8004da2:	f003 0304 	and.w	r3, r3, #4
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d016      	beq.n	8004dd8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	f043 0220 	orr.w	r2, r3, #32
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e007      	b.n	8004de8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0304 	and.w	r3, r3, #4
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d1c3      	bne.n	8004d6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dfc:	e049      	b.n	8004e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	2b10      	cmp	r3, #16
 8004e0a:	d119      	bne.n	8004e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0210 	mvn.w	r2, #16
 8004e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e030      	b.n	8004ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e40:	f7fe fcd6 	bl	80037f0 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d302      	bcc.n	8004e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d11d      	bne.n	8004e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d016      	beq.n	8004e92 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2220      	movs	r2, #32
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e007      	b.n	8004ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d1ae      	bne.n	8004dfe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}

08004eaa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004eaa:	b480      	push	{r7}
 8004eac:	b083      	sub	sp, #12
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ebc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec0:	d11b      	bne.n	8004efa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004eca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f043 0204 	orr.w	r2, r3, #4
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0cc      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f1c:	4b68      	ldr	r3, [pc, #416]	; (80050c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 030f 	and.w	r3, r3, #15
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d90c      	bls.n	8004f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	4b65      	ldr	r3, [pc, #404]	; (80050c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	4b63      	ldr	r3, [pc, #396]	; (80050c0 <HAL_RCC_ClockConfig+0x1b8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 030f 	and.w	r3, r3, #15
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e0b8      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0302 	and.w	r3, r3, #2
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d020      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d005      	beq.n	8004f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f5c:	4b59      	ldr	r3, [pc, #356]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	4a58      	ldr	r2, [pc, #352]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f74:	4b53      	ldr	r3, [pc, #332]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a52      	ldr	r2, [pc, #328]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f80:	4b50      	ldr	r3, [pc, #320]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	494d      	ldr	r1, [pc, #308]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d044      	beq.n	8005028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d107      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa6:	4b47      	ldr	r3, [pc, #284]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d119      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07f      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b02      	cmp	r3, #2
 8004fbc:	d003      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc6:	4b3f      	ldr	r3, [pc, #252]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d109      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e06f      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd6:	4b3b      	ldr	r3, [pc, #236]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e067      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fe6:	4b37      	ldr	r3, [pc, #220]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f023 0203 	bic.w	r2, r3, #3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	4934      	ldr	r1, [pc, #208]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff8:	f7fe fbfa 	bl	80037f0 <HAL_GetTick>
 8004ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffe:	e00a      	b.n	8005016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005000:	f7fe fbf6 	bl	80037f0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	f241 3288 	movw	r2, #5000	; 0x1388
 800500e:	4293      	cmp	r3, r2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e04f      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005016:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 020c 	and.w	r2, r3, #12
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	429a      	cmp	r2, r3
 8005026:	d1eb      	bne.n	8005000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005028:	4b25      	ldr	r3, [pc, #148]	; (80050c0 <HAL_RCC_ClockConfig+0x1b8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d20c      	bcs.n	8005050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b22      	ldr	r3, [pc, #136]	; (80050c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b20      	ldr	r3, [pc, #128]	; (80050c0 <HAL_RCC_ClockConfig+0x1b8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e032      	b.n	80050b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b00      	cmp	r3, #0
 800505a:	d008      	beq.n	800506e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800505c:	4b19      	ldr	r3, [pc, #100]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4916      	ldr	r1, [pc, #88]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	4313      	orrs	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d009      	beq.n	800508e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800507a:	4b12      	ldr	r3, [pc, #72]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	490e      	ldr	r1, [pc, #56]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 800508a:	4313      	orrs	r3, r2
 800508c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800508e:	f000 f855 	bl	800513c <HAL_RCC_GetSysClockFreq>
 8005092:	4602      	mov	r2, r0
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	091b      	lsrs	r3, r3, #4
 800509a:	f003 030f 	and.w	r3, r3, #15
 800509e:	490a      	ldr	r1, [pc, #40]	; (80050c8 <HAL_RCC_ClockConfig+0x1c0>)
 80050a0:	5ccb      	ldrb	r3, [r1, r3]
 80050a2:	fa22 f303 	lsr.w	r3, r2, r3
 80050a6:	4a09      	ldr	r2, [pc, #36]	; (80050cc <HAL_RCC_ClockConfig+0x1c4>)
 80050a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050aa:	4b09      	ldr	r3, [pc, #36]	; (80050d0 <HAL_RCC_ClockConfig+0x1c8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fe fb5a 	bl	8003768 <HAL_InitTick>

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
 80050be:	bf00      	nop
 80050c0:	40023c00 	.word	0x40023c00
 80050c4:	40023800 	.word	0x40023800
 80050c8:	0800a5d0 	.word	0x0800a5d0
 80050cc:	20000040 	.word	0x20000040
 80050d0:	20000044 	.word	0x20000044

080050d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050d8:	4b03      	ldr	r3, [pc, #12]	; (80050e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050da:	681b      	ldr	r3, [r3, #0]
}
 80050dc:	4618      	mov	r0, r3
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	20000040 	.word	0x20000040

080050ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050f0:	f7ff fff0 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetPCLK1Freq+0x20>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0a9b      	lsrs	r3, r3, #10
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4903      	ldr	r1, [pc, #12]	; (8005110 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	0800a5e0 	.word	0x0800a5e0

08005114 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005118:	f7ff ffdc 	bl	80050d4 <HAL_RCC_GetHCLKFreq>
 800511c:	4602      	mov	r2, r0
 800511e:	4b05      	ldr	r3, [pc, #20]	; (8005134 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	0b5b      	lsrs	r3, r3, #13
 8005124:	f003 0307 	and.w	r3, r3, #7
 8005128:	4903      	ldr	r1, [pc, #12]	; (8005138 <HAL_RCC_GetPCLK2Freq+0x24>)
 800512a:	5ccb      	ldrb	r3, [r1, r3]
 800512c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005130:	4618      	mov	r0, r3
 8005132:	bd80      	pop	{r7, pc}
 8005134:	40023800 	.word	0x40023800
 8005138:	0800a5e0 	.word	0x0800a5e0

0800513c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800513c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005140:	b0a6      	sub	sp, #152	; 0x98
 8005142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005150:	2300      	movs	r3, #0
 8005152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 800515c:	2300      	movs	r3, #0
 800515e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005162:	4bc8      	ldr	r3, [pc, #800]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 030c 	and.w	r3, r3, #12
 800516a:	2b0c      	cmp	r3, #12
 800516c:	f200 817e 	bhi.w	800546c <HAL_RCC_GetSysClockFreq+0x330>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	080051ad 	.word	0x080051ad
 800517c:	0800546d 	.word	0x0800546d
 8005180:	0800546d 	.word	0x0800546d
 8005184:	0800546d 	.word	0x0800546d
 8005188:	080051b5 	.word	0x080051b5
 800518c:	0800546d 	.word	0x0800546d
 8005190:	0800546d 	.word	0x0800546d
 8005194:	0800546d 	.word	0x0800546d
 8005198:	080051bd 	.word	0x080051bd
 800519c:	0800546d 	.word	0x0800546d
 80051a0:	0800546d 	.word	0x0800546d
 80051a4:	0800546d 	.word	0x0800546d
 80051a8:	08005327 	.word	0x08005327
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051ac:	4bb6      	ldr	r3, [pc, #728]	; (8005488 <HAL_RCC_GetSysClockFreq+0x34c>)
 80051ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 80051b2:	e15f      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051b4:	4bb5      	ldr	r3, [pc, #724]	; (800548c <HAL_RCC_GetSysClockFreq+0x350>)
 80051b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80051ba:	e15b      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051bc:	4bb1      	ldr	r3, [pc, #708]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051c8:	4bae      	ldr	r3, [pc, #696]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d031      	beq.n	8005238 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d4:	4bab      	ldr	r3, [pc, #684]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	099b      	lsrs	r3, r3, #6
 80051da:	2200      	movs	r2, #0
 80051dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80051de:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e6:	663b      	str	r3, [r7, #96]	; 0x60
 80051e8:	2300      	movs	r3, #0
 80051ea:	667b      	str	r3, [r7, #100]	; 0x64
 80051ec:	4ba7      	ldr	r3, [pc, #668]	; (800548c <HAL_RCC_GetSysClockFreq+0x350>)
 80051ee:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80051f2:	462a      	mov	r2, r5
 80051f4:	fb03 f202 	mul.w	r2, r3, r2
 80051f8:	2300      	movs	r3, #0
 80051fa:	4621      	mov	r1, r4
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	4413      	add	r3, r2
 8005202:	4aa2      	ldr	r2, [pc, #648]	; (800548c <HAL_RCC_GetSysClockFreq+0x350>)
 8005204:	4621      	mov	r1, r4
 8005206:	fba1 1202 	umull	r1, r2, r1, r2
 800520a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800520c:	460a      	mov	r2, r1
 800520e:	67ba      	str	r2, [r7, #120]	; 0x78
 8005210:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005212:	4413      	add	r3, r2
 8005214:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005216:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800521a:	2200      	movs	r2, #0
 800521c:	65bb      	str	r3, [r7, #88]	; 0x58
 800521e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005220:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005224:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005228:	f7fb fd96 	bl	8000d58 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4613      	mov	r3, r2
 8005232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005236:	e064      	b.n	8005302 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005238:	4b92      	ldr	r3, [pc, #584]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	099b      	lsrs	r3, r3, #6
 800523e:	2200      	movs	r2, #0
 8005240:	653b      	str	r3, [r7, #80]	; 0x50
 8005242:	657a      	str	r2, [r7, #84]	; 0x54
 8005244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800524a:	64bb      	str	r3, [r7, #72]	; 0x48
 800524c:	2300      	movs	r3, #0
 800524e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005250:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005254:	4622      	mov	r2, r4
 8005256:	462b      	mov	r3, r5
 8005258:	f04f 0000 	mov.w	r0, #0
 800525c:	f04f 0100 	mov.w	r1, #0
 8005260:	0159      	lsls	r1, r3, #5
 8005262:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005266:	0150      	lsls	r0, r2, #5
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4621      	mov	r1, r4
 800526e:	1a51      	subs	r1, r2, r1
 8005270:	6139      	str	r1, [r7, #16]
 8005272:	4629      	mov	r1, r5
 8005274:	eb63 0301 	sbc.w	r3, r3, r1
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005286:	4659      	mov	r1, fp
 8005288:	018b      	lsls	r3, r1, #6
 800528a:	4651      	mov	r1, sl
 800528c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005290:	4651      	mov	r1, sl
 8005292:	018a      	lsls	r2, r1, #6
 8005294:	4651      	mov	r1, sl
 8005296:	ebb2 0801 	subs.w	r8, r2, r1
 800529a:	4659      	mov	r1, fp
 800529c:	eb63 0901 	sbc.w	r9, r3, r1
 80052a0:	f04f 0200 	mov.w	r2, #0
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052b4:	4690      	mov	r8, r2
 80052b6:	4699      	mov	r9, r3
 80052b8:	4623      	mov	r3, r4
 80052ba:	eb18 0303 	adds.w	r3, r8, r3
 80052be:	60bb      	str	r3, [r7, #8]
 80052c0:	462b      	mov	r3, r5
 80052c2:	eb49 0303 	adc.w	r3, r9, r3
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052d4:	4629      	mov	r1, r5
 80052d6:	028b      	lsls	r3, r1, #10
 80052d8:	4621      	mov	r1, r4
 80052da:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052de:	4621      	mov	r1, r4
 80052e0:	028a      	lsls	r2, r1, #10
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80052ea:	2200      	movs	r2, #0
 80052ec:	643b      	str	r3, [r7, #64]	; 0x40
 80052ee:	647a      	str	r2, [r7, #68]	; 0x44
 80052f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052f4:	f7fb fd30 	bl	8000d58 <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005302:	4b60      	ldr	r3, [pc, #384]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	0c1b      	lsrs	r3, r3, #16
 8005308:	f003 0303 	and.w	r3, r3, #3
 800530c:	3301      	adds	r3, #1
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005314:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800531c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005320:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005324:	e0a6      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005326:	4b57      	ldr	r3, [pc, #348]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800532e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005332:	4b54      	ldr	r3, [pc, #336]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d02a      	beq.n	8005394 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800533e:	4b51      	ldr	r3, [pc, #324]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	099b      	lsrs	r3, r3, #6
 8005344:	2200      	movs	r2, #0
 8005346:	63bb      	str	r3, [r7, #56]	; 0x38
 8005348:	63fa      	str	r2, [r7, #60]	; 0x3c
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005350:	2100      	movs	r1, #0
 8005352:	4b4e      	ldr	r3, [pc, #312]	; (800548c <HAL_RCC_GetSysClockFreq+0x350>)
 8005354:	fb03 f201 	mul.w	r2, r3, r1
 8005358:	2300      	movs	r3, #0
 800535a:	fb00 f303 	mul.w	r3, r0, r3
 800535e:	4413      	add	r3, r2
 8005360:	4a4a      	ldr	r2, [pc, #296]	; (800548c <HAL_RCC_GetSysClockFreq+0x350>)
 8005362:	fba0 1202 	umull	r1, r2, r0, r2
 8005366:	677a      	str	r2, [r7, #116]	; 0x74
 8005368:	460a      	mov	r2, r1
 800536a:	673a      	str	r2, [r7, #112]	; 0x70
 800536c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800536e:	4413      	add	r3, r2
 8005370:	677b      	str	r3, [r7, #116]	; 0x74
 8005372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005376:	2200      	movs	r2, #0
 8005378:	633b      	str	r3, [r7, #48]	; 0x30
 800537a:	637a      	str	r2, [r7, #52]	; 0x34
 800537c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005380:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005384:	f7fb fce8 	bl	8000d58 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005392:	e05b      	b.n	800544c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005394:	4b3b      	ldr	r3, [pc, #236]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	099b      	lsrs	r3, r3, #6
 800539a:	2200      	movs	r2, #0
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
 800539e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	2300      	movs	r3, #0
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c2:	0150      	lsls	r0, r2, #5
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4641      	mov	r1, r8
 80053ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053e8:	ebb2 040a 	subs.w	r4, r2, sl
 80053ec:	eb63 050b 	sbc.w	r5, r3, fp
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	00eb      	lsls	r3, r5, #3
 80053fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fe:	00e2      	lsls	r2, r4, #3
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	4643      	mov	r3, r8
 8005406:	18e3      	adds	r3, r4, r3
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	464b      	mov	r3, r9
 800540c:	eb45 0303 	adc.w	r3, r5, r3
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541e:	4629      	mov	r1, r5
 8005420:	028b      	lsls	r3, r1, #10
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005428:	4621      	mov	r1, r4
 800542a:	028a      	lsls	r2, r1, #10
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005434:	2200      	movs	r2, #0
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	61fa      	str	r2, [r7, #28]
 800543a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800543e:	f7fb fc8b 	bl	8000d58 <__aeabi_uldivmod>
 8005442:	4602      	mov	r2, r0
 8005444:	460b      	mov	r3, r1
 8005446:	4613      	mov	r3, r2
 8005448:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800544c:	4b0d      	ldr	r3, [pc, #52]	; (8005484 <HAL_RCC_GetSysClockFreq+0x348>)
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	0f1b      	lsrs	r3, r3, #28
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 800545a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800545e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005462:	fbb2 f3f3 	udiv	r3, r2, r3
 8005466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800546a:	e003      	b.n	8005474 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800546c:	4b06      	ldr	r3, [pc, #24]	; (8005488 <HAL_RCC_GetSysClockFreq+0x34c>)
 800546e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005472:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005474:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8005478:	4618      	mov	r0, r3
 800547a:	3798      	adds	r7, #152	; 0x98
 800547c:	46bd      	mov	sp, r7
 800547e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005482:	bf00      	nop
 8005484:	40023800 	.word	0x40023800
 8005488:	00f42400 	.word	0x00f42400
 800548c:	017d7840 	.word	0x017d7840

08005490 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e28d      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	f000 8083 	beq.w	80055b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054b0:	4b94      	ldr	r3, [pc, #592]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 030c 	and.w	r3, r3, #12
 80054b8:	2b04      	cmp	r3, #4
 80054ba:	d019      	beq.n	80054f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054bc:	4b91      	ldr	r3, [pc, #580]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d106      	bne.n	80054d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054c8:	4b8e      	ldr	r3, [pc, #568]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d4:	d00c      	beq.n	80054f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054d6:	4b8b      	ldr	r3, [pc, #556]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80054de:	2b0c      	cmp	r3, #12
 80054e0:	d112      	bne.n	8005508 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e2:	4b88      	ldr	r3, [pc, #544]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ee:	d10b      	bne.n	8005508 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f0:	4b84      	ldr	r3, [pc, #528]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d05b      	beq.n	80055b4 <HAL_RCC_OscConfig+0x124>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d157      	bne.n	80055b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e25a      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005510:	d106      	bne.n	8005520 <HAL_RCC_OscConfig+0x90>
 8005512:	4b7c      	ldr	r3, [pc, #496]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7b      	ldr	r2, [pc, #492]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e01d      	b.n	800555c <HAL_RCC_OscConfig+0xcc>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0xb4>
 800552a:	4b76      	ldr	r3, [pc, #472]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a75      	ldr	r2, [pc, #468]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b73      	ldr	r3, [pc, #460]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a72      	ldr	r2, [pc, #456]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0xcc>
 8005544:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a6e      	ldr	r2, [pc, #440]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b6c      	ldr	r3, [pc, #432]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a6b      	ldr	r2, [pc, #428]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005564:	f7fe f944 	bl	80037f0 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800556c:	f7fe f940 	bl	80037f0 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	; 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e21f      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557e:	4b61      	ldr	r3, [pc, #388]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0xdc>
 800558a:	e014      	b.n	80055b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800558c:	f7fe f930 	bl	80037f0 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005594:	f7fe f92c 	bl	80037f0 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	; 0x64
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e20b      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055a6:	4b57      	ldr	r3, [pc, #348]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0x104>
 80055b2:	e000      	b.n	80055b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d06f      	beq.n	80056a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055c2:	4b50      	ldr	r3, [pc, #320]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d017      	beq.n	80055fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055ce:	4b4d      	ldr	r3, [pc, #308]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d105      	bne.n	80055e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055da:	4b4a      	ldr	r3, [pc, #296]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055e6:	4b47      	ldr	r3, [pc, #284]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80055ee:	2b0c      	cmp	r3, #12
 80055f0:	d11c      	bne.n	800562c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055f2:	4b44      	ldr	r3, [pc, #272]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d116      	bne.n	800562c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055fe:	4b41      	ldr	r3, [pc, #260]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0302 	and.w	r3, r3, #2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_RCC_OscConfig+0x186>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	2b01      	cmp	r3, #1
 8005610:	d001      	beq.n	8005616 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e1d3      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005616:	4b3b      	ldr	r3, [pc, #236]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4937      	ldr	r1, [pc, #220]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005626:	4313      	orrs	r3, r2
 8005628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800562a:	e03a      	b.n	80056a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d020      	beq.n	8005676 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005634:	4b34      	ldr	r3, [pc, #208]	; (8005708 <HAL_RCC_OscConfig+0x278>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800563a:	f7fe f8d9 	bl	80037f0 <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005642:	f7fe f8d5 	bl	80037f0 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e1b4      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005654:	4b2b      	ldr	r3, [pc, #172]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0302 	and.w	r3, r3, #2
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005660:	4b28      	ldr	r3, [pc, #160]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	00db      	lsls	r3, r3, #3
 800566e:	4925      	ldr	r1, [pc, #148]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005670:	4313      	orrs	r3, r2
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	e015      	b.n	80056a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005676:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_RCC_OscConfig+0x278>)
 8005678:	2200      	movs	r2, #0
 800567a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567c:	f7fe f8b8 	bl	80037f0 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005682:	e008      	b.n	8005696 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005684:	f7fe f8b4 	bl	80037f0 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	2b02      	cmp	r3, #2
 8005690:	d901      	bls.n	8005696 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005692:	2303      	movs	r3, #3
 8005694:	e193      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005696:	4b1b      	ldr	r3, [pc, #108]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f0      	bne.n	8005684 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d036      	beq.n	800571c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d016      	beq.n	80056e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056b6:	4b15      	ldr	r3, [pc, #84]	; (800570c <HAL_RCC_OscConfig+0x27c>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056bc:	f7fe f898 	bl	80037f0 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056c4:	f7fe f894 	bl	80037f0 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e173      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056d6:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <HAL_RCC_OscConfig+0x274>)
 80056d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d0f0      	beq.n	80056c4 <HAL_RCC_OscConfig+0x234>
 80056e2:	e01b      	b.n	800571c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056e4:	4b09      	ldr	r3, [pc, #36]	; (800570c <HAL_RCC_OscConfig+0x27c>)
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ea:	f7fe f881 	bl	80037f0 <HAL_GetTick>
 80056ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f0:	e00e      	b.n	8005710 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056f2:	f7fe f87d 	bl	80037f0 <HAL_GetTick>
 80056f6:	4602      	mov	r2, r0
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	2b02      	cmp	r3, #2
 80056fe:	d907      	bls.n	8005710 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e15c      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
 8005704:	40023800 	.word	0x40023800
 8005708:	42470000 	.word	0x42470000
 800570c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005710:	4b8a      	ldr	r3, [pc, #552]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ea      	bne.n	80056f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8097 	beq.w	8005858 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572a:	2300      	movs	r3, #0
 800572c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572e:	4b83      	ldr	r3, [pc, #524]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10f      	bne.n	800575a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	4b7f      	ldr	r3, [pc, #508]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005742:	4a7e      	ldr	r2, [pc, #504]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005748:	6413      	str	r3, [r2, #64]	; 0x40
 800574a:	4b7c      	ldr	r3, [pc, #496]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800575a:	4b79      	ldr	r3, [pc, #484]	; (8005940 <HAL_RCC_OscConfig+0x4b0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005762:	2b00      	cmp	r3, #0
 8005764:	d118      	bne.n	8005798 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005766:	4b76      	ldr	r3, [pc, #472]	; (8005940 <HAL_RCC_OscConfig+0x4b0>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a75      	ldr	r2, [pc, #468]	; (8005940 <HAL_RCC_OscConfig+0x4b0>)
 800576c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005772:	f7fe f83d 	bl	80037f0 <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577a:	f7fe f839 	bl	80037f0 <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e118      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800578c:	4b6c      	ldr	r3, [pc, #432]	; (8005940 <HAL_RCC_OscConfig+0x4b0>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d0f0      	beq.n	800577a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d106      	bne.n	80057ae <HAL_RCC_OscConfig+0x31e>
 80057a0:	4b66      	ldr	r3, [pc, #408]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a4:	4a65      	ldr	r2, [pc, #404]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057a6:	f043 0301 	orr.w	r3, r3, #1
 80057aa:	6713      	str	r3, [r2, #112]	; 0x70
 80057ac:	e01c      	b.n	80057e8 <HAL_RCC_OscConfig+0x358>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	2b05      	cmp	r3, #5
 80057b4:	d10c      	bne.n	80057d0 <HAL_RCC_OscConfig+0x340>
 80057b6:	4b61      	ldr	r3, [pc, #388]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ba:	4a60      	ldr	r2, [pc, #384]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057bc:	f043 0304 	orr.w	r3, r3, #4
 80057c0:	6713      	str	r3, [r2, #112]	; 0x70
 80057c2:	4b5e      	ldr	r3, [pc, #376]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c6:	4a5d      	ldr	r2, [pc, #372]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	6713      	str	r3, [r2, #112]	; 0x70
 80057ce:	e00b      	b.n	80057e8 <HAL_RCC_OscConfig+0x358>
 80057d0:	4b5a      	ldr	r3, [pc, #360]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d4:	4a59      	ldr	r2, [pc, #356]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	6713      	str	r3, [r2, #112]	; 0x70
 80057dc:	4b57      	ldr	r3, [pc, #348]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057e0:	4a56      	ldr	r2, [pc, #344]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80057e2:	f023 0304 	bic.w	r3, r3, #4
 80057e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d015      	beq.n	800581c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f0:	f7fd fffe 	bl	80037f0 <HAL_GetTick>
 80057f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f6:	e00a      	b.n	800580e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057f8:	f7fd fffa 	bl	80037f0 <HAL_GetTick>
 80057fc:	4602      	mov	r2, r0
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	1ad3      	subs	r3, r2, r3
 8005802:	f241 3288 	movw	r2, #5000	; 0x1388
 8005806:	4293      	cmp	r3, r2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e0d7      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800580e:	4b4b      	ldr	r3, [pc, #300]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0ee      	beq.n	80057f8 <HAL_RCC_OscConfig+0x368>
 800581a:	e014      	b.n	8005846 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800581c:	f7fd ffe8 	bl	80037f0 <HAL_GetTick>
 8005820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005822:	e00a      	b.n	800583a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005824:	f7fd ffe4 	bl	80037f0 <HAL_GetTick>
 8005828:	4602      	mov	r2, r0
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	1ad3      	subs	r3, r2, r3
 800582e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e0c1      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800583a:	4b40      	ldr	r3, [pc, #256]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 800583c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583e:	f003 0302 	and.w	r3, r3, #2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1ee      	bne.n	8005824 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005846:	7dfb      	ldrb	r3, [r7, #23]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d105      	bne.n	8005858 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800584c:	4b3b      	ldr	r3, [pc, #236]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	4a3a      	ldr	r2, [pc, #232]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005856:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80ad 	beq.w	80059bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005862:	4b36      	ldr	r3, [pc, #216]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f003 030c 	and.w	r3, r3, #12
 800586a:	2b08      	cmp	r3, #8
 800586c:	d060      	beq.n	8005930 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d145      	bne.n	8005902 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005876:	4b33      	ldr	r3, [pc, #204]	; (8005944 <HAL_RCC_OscConfig+0x4b4>)
 8005878:	2200      	movs	r2, #0
 800587a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800587c:	f7fd ffb8 	bl	80037f0 <HAL_GetTick>
 8005880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005882:	e008      	b.n	8005896 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005884:	f7fd ffb4 	bl	80037f0 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d901      	bls.n	8005896 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	e093      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005896:	4b29      	ldr	r3, [pc, #164]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1f0      	bne.n	8005884 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	69da      	ldr	r2, [r3, #28]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	019b      	lsls	r3, r3, #6
 80058b2:	431a      	orrs	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b8:	085b      	lsrs	r3, r3, #1
 80058ba:	3b01      	subs	r3, #1
 80058bc:	041b      	lsls	r3, r3, #16
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c4:	061b      	lsls	r3, r3, #24
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	071b      	lsls	r3, r3, #28
 80058ce:	491b      	ldr	r1, [pc, #108]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058d4:	4b1b      	ldr	r3, [pc, #108]	; (8005944 <HAL_RCC_OscConfig+0x4b4>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058da:	f7fd ff89 	bl	80037f0 <HAL_GetTick>
 80058de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058e0:	e008      	b.n	80058f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058e2:	f7fd ff85 	bl	80037f0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d901      	bls.n	80058f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e064      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058f4:	4b11      	ldr	r3, [pc, #68]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0f0      	beq.n	80058e2 <HAL_RCC_OscConfig+0x452>
 8005900:	e05c      	b.n	80059bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005902:	4b10      	ldr	r3, [pc, #64]	; (8005944 <HAL_RCC_OscConfig+0x4b4>)
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005908:	f7fd ff72 	bl	80037f0 <HAL_GetTick>
 800590c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005910:	f7fd ff6e 	bl	80037f0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e04d      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005922:	4b06      	ldr	r3, [pc, #24]	; (800593c <HAL_RCC_OscConfig+0x4ac>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1f0      	bne.n	8005910 <HAL_RCC_OscConfig+0x480>
 800592e:	e045      	b.n	80059bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d107      	bne.n	8005948 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e040      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
 800593c:	40023800 	.word	0x40023800
 8005940:	40007000 	.word	0x40007000
 8005944:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005948:	4b1f      	ldr	r3, [pc, #124]	; (80059c8 <HAL_RCC_OscConfig+0x538>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d030      	beq.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005960:	429a      	cmp	r2, r3
 8005962:	d129      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d122      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005978:	4013      	ands	r3, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800597e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005980:	4293      	cmp	r3, r2
 8005982:	d119      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800598e:	085b      	lsrs	r3, r3, #1
 8005990:	3b01      	subs	r3, #1
 8005992:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005994:	429a      	cmp	r2, r3
 8005996:	d10f      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d107      	bne.n	80059b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d001      	beq.n	80059bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e000      	b.n	80059be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023800 	.word	0x40023800

080059cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e042      	b.n	8005a64 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d106      	bne.n	80059f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fd fcda 	bl	80033ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2224      	movs	r2, #36	; 0x24
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fdbd 	bl	8006590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	691a      	ldr	r2, [r3, #16]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b08a      	sub	sp, #40	; 0x28
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b20      	cmp	r3, #32
 8005a8a:	d175      	bne.n	8005b78 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_UART_Transmit+0x2c>
 8005a92:	88fb      	ldrh	r3, [r7, #6]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e06e      	b.n	8005b7a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2221      	movs	r2, #33	; 0x21
 8005aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aaa:	f7fd fea1 	bl	80037f0 <HAL_GetTick>
 8005aae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	88fa      	ldrh	r2, [r7, #6]
 8005ab4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	88fa      	ldrh	r2, [r7, #6]
 8005aba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ac4:	d108      	bne.n	8005ad8 <HAL_UART_Transmit+0x6c>
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d104      	bne.n	8005ad8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	61bb      	str	r3, [r7, #24]
 8005ad6:	e003      	b.n	8005ae0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ae0:	e02e      	b.n	8005b40 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 fb1f 	bl	8006130 <UART_WaitOnFlagUntilTimeout>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005b00:	2303      	movs	r3, #3
 8005b02:	e03a      	b.n	8005b7a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b04:	69fb      	ldr	r3, [r7, #28]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10b      	bne.n	8005b22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b18:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	3302      	adds	r3, #2
 8005b1e:	61bb      	str	r3, [r7, #24]
 8005b20:	e007      	b.n	8005b32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	781a      	ldrb	r2, [r3, #0]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d1cb      	bne.n	8005ae2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	9300      	str	r3, [sp, #0]
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2200      	movs	r2, #0
 8005b52:	2140      	movs	r1, #64	; 0x40
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 faeb 	bl	8006130 <UART_WaitOnFlagUntilTimeout>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2220      	movs	r2, #32
 8005b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e006      	b.n	8005b7a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	e000      	b.n	8005b7a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b78:	2302      	movs	r3, #2
  }
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3720      	adds	r7, #32
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	60f8      	str	r0, [r7, #12]
 8005b8a:	60b9      	str	r1, [r7, #8]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d112      	bne.n	8005bc2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d002      	beq.n	8005ba8 <HAL_UART_Receive_IT+0x26>
 8005ba2:	88fb      	ldrh	r3, [r7, #6]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e00b      	b.n	8005bc4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005bb2:	88fb      	ldrh	r3, [r7, #6]
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	68b9      	ldr	r1, [r7, #8]
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fb12 	bl	80061e2 <UART_Start_Receive_IT>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	e000      	b.n	8005bc4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005bc2:	2302      	movs	r3, #2
  }
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b0ba      	sub	sp, #232	; 0xe8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	695b      	ldr	r3, [r3, #20]
 8005bee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c02:	f003 030f 	and.w	r3, r3, #15
 8005c06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005c0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d10f      	bne.n	8005c32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c16:	f003 0320 	and.w	r3, r3, #32
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <HAL_UART_IRQHandler+0x66>
 8005c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d003      	beq.n	8005c32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 fbf2 	bl	8006414 <UART_Receive_IT>
      return;
 8005c30:	e25b      	b.n	80060ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 80de 	beq.w	8005df8 <HAL_UART_IRQHandler+0x22c>
 8005c3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c40:	f003 0301 	and.w	r3, r3, #1
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80d1 	beq.w	8005df8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <HAL_UART_IRQHandler+0xae>
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d005      	beq.n	8005c7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c72:	f043 0201 	orr.w	r2, r3, #1
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c7e:	f003 0304 	and.w	r3, r3, #4
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00b      	beq.n	8005c9e <HAL_UART_IRQHandler+0xd2>
 8005c86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d005      	beq.n	8005c9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	f043 0202 	orr.w	r2, r3, #2
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_UART_IRQHandler+0xf6>
 8005caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d005      	beq.n	8005cc2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cba:	f043 0204 	orr.w	r2, r3, #4
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc6:	f003 0308 	and.w	r3, r3, #8
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d011      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x126>
 8005cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cea:	f043 0208 	orr.w	r2, r3, #8
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 81f2 	beq.w	80060e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d00:	f003 0320 	and.w	r3, r3, #32
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_UART_IRQHandler+0x14e>
 8005d08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d0c:	f003 0320 	and.w	r3, r3, #32
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d002      	beq.n	8005d1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fb7d 	bl	8006414 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	bf0c      	ite	eq
 8005d28:	2301      	moveq	r3, #1
 8005d2a:	2300      	movne	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d36:	f003 0308 	and.w	r3, r3, #8
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <HAL_UART_IRQHandler+0x17a>
 8005d3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d04f      	beq.n	8005de6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa85 	bl	8006256 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d56:	2b40      	cmp	r3, #64	; 0x40
 8005d58:	d141      	bne.n	8005dde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3314      	adds	r3, #20
 8005d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3314      	adds	r3, #20
 8005d82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d96:	e841 2300 	strex	r3, r2, [r1]
 8005d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1d9      	bne.n	8005d5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d013      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	4a7e      	ldr	r2, [pc, #504]	; (8005fac <HAL_UART_IRQHandler+0x3e0>)
 8005db4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fd fec9 	bl	8003b52 <HAL_DMA_Abort_IT>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d016      	beq.n	8005df4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005dd0:	4610      	mov	r0, r2
 8005dd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	e00e      	b.n	8005df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f994 	bl	8006104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ddc:	e00a      	b.n	8005df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 f990 	bl	8006104 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	e006      	b.n	8005df4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f98c 	bl	8006104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005df2:	e175      	b.n	80060e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005df4:	bf00      	nop
    return;
 8005df6:	e173      	b.n	80060e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	f040 814f 	bne.w	80060a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e06:	f003 0310 	and.w	r3, r3, #16
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8148 	beq.w	80060a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e14:	f003 0310 	and.w	r3, r3, #16
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8141 	beq.w	80060a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	60bb      	str	r3, [r7, #8]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	f040 80b6 	bne.w	8005fb0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e50:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8145 	beq.w	80060e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e62:	429a      	cmp	r2, r3
 8005e64:	f080 813e 	bcs.w	80060e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e6e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e7a:	f000 8088 	beq.w	8005f8e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	330c      	adds	r3, #12
 8005e84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e8c:	e853 3f00 	ldrex	r3, [r3]
 8005e90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005eaa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005eae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eb2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005eb6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eba:	e841 2300 	strex	r3, r2, [r1]
 8005ebe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ec2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d1d9      	bne.n	8005e7e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	3314      	adds	r3, #20
 8005ed0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005edc:	f023 0301 	bic.w	r3, r3, #1
 8005ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	3314      	adds	r3, #20
 8005eea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ef2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ef6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e1      	bne.n	8005eca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3314      	adds	r3, #20
 8005f0c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f10:	e853 3f00 	ldrex	r3, [r3]
 8005f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3314      	adds	r3, #20
 8005f26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f2a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f2c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f30:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e3      	bne.n	8005f06 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	330c      	adds	r3, #12
 8005f52:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f5e:	f023 0310 	bic.w	r3, r3, #16
 8005f62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f70:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f72:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f78:	e841 2300 	strex	r3, r2, [r1]
 8005f7c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e3      	bne.n	8005f4c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7fd fd72 	bl	8003a72 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2202      	movs	r2, #2
 8005f92:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f8b7 	bl	8006118 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005faa:	e09b      	b.n	80060e4 <HAL_UART_IRQHandler+0x518>
 8005fac:	0800631d 	.word	0x0800631d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 808e 	beq.w	80060e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005fcc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	f000 8089 	beq.w	80060e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ffa:	647a      	str	r2, [r7, #68]	; 0x44
 8005ffc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e3      	bne.n	8005fd6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3314      	adds	r3, #20
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	623b      	str	r3, [r7, #32]
   return(result);
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3314      	adds	r3, #20
 800602e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006032:	633a      	str	r2, [r7, #48]	; 0x30
 8006034:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006038:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e3      	bne.n	800600e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2220      	movs	r2, #32
 800604a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	330c      	adds	r3, #12
 800605a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	e853 3f00 	ldrex	r3, [r3]
 8006062:	60fb      	str	r3, [r7, #12]
   return(result);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f023 0310 	bic.w	r3, r3, #16
 800606a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006078:	61fa      	str	r2, [r7, #28]
 800607a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	69fa      	ldr	r2, [r7, #28]
 8006080:	e841 2300 	strex	r3, r2, [r1]
 8006084:	617b      	str	r3, [r7, #20]
   return(result);
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d1e3      	bne.n	8006054 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2202      	movs	r2, #2
 8006090:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006092:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f83d 	bl	8006118 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800609e:	e023      	b.n	80060e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d009      	beq.n	80060c0 <HAL_UART_IRQHandler+0x4f4>
 80060ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d003      	beq.n	80060c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f943 	bl	8006344 <UART_Transmit_IT>
    return;
 80060be:	e014      	b.n	80060ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00e      	beq.n	80060ea <HAL_UART_IRQHandler+0x51e>
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d008      	beq.n	80060ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f983 	bl	80063e4 <UART_EndTransmit_IT>
    return;
 80060de:	e004      	b.n	80060ea <HAL_UART_IRQHandler+0x51e>
    return;
 80060e0:	bf00      	nop
 80060e2:	e002      	b.n	80060ea <HAL_UART_IRQHandler+0x51e>
      return;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <HAL_UART_IRQHandler+0x51e>
      return;
 80060e8:	bf00      	nop
  }
}
 80060ea:	37e8      	adds	r7, #232	; 0xe8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	4613      	mov	r3, r2
 800613e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006140:	e03b      	b.n	80061ba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006148:	d037      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800614a:	f7fd fb51 	bl	80037f0 <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	6a3a      	ldr	r2, [r7, #32]
 8006156:	429a      	cmp	r2, r3
 8006158:	d302      	bcc.n	8006160 <UART_WaitOnFlagUntilTimeout+0x30>
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e03a      	b.n	80061da <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f003 0304 	and.w	r3, r3, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	d023      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	2b80      	cmp	r3, #128	; 0x80
 8006176:	d020      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b40      	cmp	r3, #64	; 0x40
 800617c:	d01d      	beq.n	80061ba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0308 	and.w	r3, r3, #8
 8006188:	2b08      	cmp	r3, #8
 800618a:	d116      	bne.n	80061ba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800618c:	2300      	movs	r3, #0
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f857 	bl	8006256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2208      	movs	r2, #8
 80061ac:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e00f      	b.n	80061da <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	4013      	ands	r3, r2
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	bf0c      	ite	eq
 80061ca:	2301      	moveq	r3, #1
 80061cc:	2300      	movne	r3, #0
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	461a      	mov	r2, r3
 80061d2:	79fb      	ldrb	r3, [r7, #7]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d0b4      	beq.n	8006142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b085      	sub	sp, #20
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	60b9      	str	r1, [r7, #8]
 80061ec:	4613      	mov	r3, r2
 80061ee:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	88fa      	ldrh	r2, [r7, #6]
 80061fa:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2222      	movs	r2, #34	; 0x22
 800620c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006226:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695a      	ldr	r2, [r3, #20]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68da      	ldr	r2, [r3, #12]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0220 	orr.w	r2, r2, #32
 8006246:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006256:	b480      	push	{r7}
 8006258:	b095      	sub	sp, #84	; 0x54
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800626e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006270:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006274:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800627e:	643a      	str	r2, [r7, #64]	; 0x40
 8006280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006284:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800628c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	3314      	adds	r3, #20
 8006298:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3314      	adds	r3, #20
 80062b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80062b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d119      	bne.n	8006302 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	330c      	adds	r3, #12
 80062d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	f023 0310 	bic.w	r3, r3, #16
 80062e4:	647b      	str	r3, [r7, #68]	; 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	330c      	adds	r3, #12
 80062ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ee:	61ba      	str	r2, [r7, #24]
 80062f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6979      	ldr	r1, [r7, #20]
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	613b      	str	r3, [r7, #16]
   return(result);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e5      	bne.n	80062ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2200      	movs	r2, #0
 800630e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006310:	bf00      	nop
 8006312:	3754      	adds	r7, #84	; 0x54
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff fee4 	bl	8006104 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800633c:	bf00      	nop
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}

08006344 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006352:	b2db      	uxtb	r3, r3
 8006354:	2b21      	cmp	r3, #33	; 0x21
 8006356:	d13e      	bne.n	80063d6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006360:	d114      	bne.n	800638c <UART_Transmit_IT+0x48>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d110      	bne.n	800638c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800637e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	1c9a      	adds	r2, r3, #2
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	621a      	str	r2, [r3, #32]
 800638a:	e008      	b.n	800639e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	1c59      	adds	r1, r3, #1
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6211      	str	r1, [r2, #32]
 8006396:	781a      	ldrb	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	3b01      	subs	r3, #1
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4619      	mov	r1, r3
 80063ac:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10f      	bne.n	80063d2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68da      	ldr	r2, [r3, #12]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063c0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	68da      	ldr	r2, [r3, #12]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	e000      	b.n	80063d8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
  }
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e2:	4770      	bx	lr

080063e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f7ff fe73 	bl	80060f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3708      	adds	r7, #8
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	; 0x30
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b22      	cmp	r3, #34	; 0x22
 8006426:	f040 80ae 	bne.w	8006586 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006432:	d117      	bne.n	8006464 <UART_Receive_IT+0x50>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d113      	bne.n	8006464 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800643c:	2300      	movs	r3, #0
 800643e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006444:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	b29b      	uxth	r3, r3
 800644e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006452:	b29a      	uxth	r2, r3
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645c:	1c9a      	adds	r2, r3, #2
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
 8006462:	e026      	b.n	80064b2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800646a:	2300      	movs	r3, #0
 800646c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006476:	d007      	beq.n	8006488 <UART_Receive_IT+0x74>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d10a      	bne.n	8006496 <UART_Receive_IT+0x82>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d106      	bne.n	8006496 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e008      	b.n	80064a8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	b2db      	uxtb	r3, r3
 800649e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a2:	b2da      	uxtb	r2, r3
 80064a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4619      	mov	r1, r3
 80064c0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d15d      	bne.n	8006582 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68da      	ldr	r2, [r3, #12]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 0220 	bic.w	r2, r2, #32
 80064d4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f022 0201 	bic.w	r2, r2, #1
 80064f4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2220      	movs	r2, #32
 80064fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	2b01      	cmp	r3, #1
 800650a:	d135      	bne.n	8006578 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	330c      	adds	r3, #12
 8006518:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	e853 3f00 	ldrex	r3, [r3]
 8006520:	613b      	str	r3, [r7, #16]
   return(result);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f023 0310 	bic.w	r3, r3, #16
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	330c      	adds	r3, #12
 8006530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006532:	623a      	str	r2, [r7, #32]
 8006534:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006536:	69f9      	ldr	r1, [r7, #28]
 8006538:	6a3a      	ldr	r2, [r7, #32]
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d1e5      	bne.n	8006512 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2b10      	cmp	r3, #16
 8006552:	d10a      	bne.n	800656a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006554:	2300      	movs	r3, #0
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	60fb      	str	r3, [r7, #12]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fdd1 	bl	8006118 <HAL_UARTEx_RxEventCallback>
 8006576:	e002      	b.n	800657e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f7fc fc5f 	bl	8002e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e002      	b.n	8006588 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006582:	2300      	movs	r3, #0
 8006584:	e000      	b.n	8006588 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006586:	2302      	movs	r3, #2
  }
}
 8006588:	4618      	mov	r0, r3
 800658a:	3730      	adds	r7, #48	; 0x30
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006594:	b0c0      	sub	sp, #256	; 0x100
 8006596:	af00      	add	r7, sp, #0
 8006598:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800659c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80065a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ac:	68d9      	ldr	r1, [r3, #12]
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065b2:	681a      	ldr	r2, [r3, #0]
 80065b4:	ea40 0301 	orr.w	r3, r0, r1
 80065b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	431a      	orrs	r2, r3
 80065c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065cc:	695b      	ldr	r3, [r3, #20]
 80065ce:	431a      	orrs	r2, r3
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80065e8:	f021 010c 	bic.w	r1, r1, #12
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80065f6:	430b      	orrs	r3, r1
 80065f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	6999      	ldr	r1, [r3, #24]
 800660c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	ea40 0301 	orr.w	r3, r0, r1
 8006616:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	4b8f      	ldr	r3, [pc, #572]	; (800685c <UART_SetConfig+0x2cc>)
 8006620:	429a      	cmp	r2, r3
 8006622:	d005      	beq.n	8006630 <UART_SetConfig+0xa0>
 8006624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b8d      	ldr	r3, [pc, #564]	; (8006860 <UART_SetConfig+0x2d0>)
 800662c:	429a      	cmp	r2, r3
 800662e:	d104      	bne.n	800663a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006630:	f7fe fd70 	bl	8005114 <HAL_RCC_GetPCLK2Freq>
 8006634:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006638:	e003      	b.n	8006642 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800663a:	f7fe fd57 	bl	80050ec <HAL_RCC_GetPCLK1Freq>
 800663e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664c:	f040 810c 	bne.w	8006868 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006654:	2200      	movs	r2, #0
 8006656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800665a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800665e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006662:	4622      	mov	r2, r4
 8006664:	462b      	mov	r3, r5
 8006666:	1891      	adds	r1, r2, r2
 8006668:	65b9      	str	r1, [r7, #88]	; 0x58
 800666a:	415b      	adcs	r3, r3
 800666c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800666e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006672:	4621      	mov	r1, r4
 8006674:	eb12 0801 	adds.w	r8, r2, r1
 8006678:	4629      	mov	r1, r5
 800667a:	eb43 0901 	adc.w	r9, r3, r1
 800667e:	f04f 0200 	mov.w	r2, #0
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800668a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800668e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006692:	4690      	mov	r8, r2
 8006694:	4699      	mov	r9, r3
 8006696:	4623      	mov	r3, r4
 8006698:	eb18 0303 	adds.w	r3, r8, r3
 800669c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066a0:	462b      	mov	r3, r5
 80066a2:	eb49 0303 	adc.w	r3, r9, r3
 80066a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80066aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80066b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80066ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80066be:	460b      	mov	r3, r1
 80066c0:	18db      	adds	r3, r3, r3
 80066c2:	653b      	str	r3, [r7, #80]	; 0x50
 80066c4:	4613      	mov	r3, r2
 80066c6:	eb42 0303 	adc.w	r3, r2, r3
 80066ca:	657b      	str	r3, [r7, #84]	; 0x54
 80066cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80066d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80066d4:	f7fa fb40 	bl	8000d58 <__aeabi_uldivmod>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4b61      	ldr	r3, [pc, #388]	; (8006864 <UART_SetConfig+0x2d4>)
 80066de:	fba3 2302 	umull	r2, r3, r3, r2
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	011c      	lsls	r4, r3, #4
 80066e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ea:	2200      	movs	r2, #0
 80066ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80066f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80066f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80066f8:	4642      	mov	r2, r8
 80066fa:	464b      	mov	r3, r9
 80066fc:	1891      	adds	r1, r2, r2
 80066fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8006700:	415b      	adcs	r3, r3
 8006702:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006704:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006708:	4641      	mov	r1, r8
 800670a:	eb12 0a01 	adds.w	sl, r2, r1
 800670e:	4649      	mov	r1, r9
 8006710:	eb43 0b01 	adc.w	fp, r3, r1
 8006714:	f04f 0200 	mov.w	r2, #0
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006720:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006724:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006728:	4692      	mov	sl, r2
 800672a:	469b      	mov	fp, r3
 800672c:	4643      	mov	r3, r8
 800672e:	eb1a 0303 	adds.w	r3, sl, r3
 8006732:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006736:	464b      	mov	r3, r9
 8006738:	eb4b 0303 	adc.w	r3, fp, r3
 800673c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800674c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006750:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006754:	460b      	mov	r3, r1
 8006756:	18db      	adds	r3, r3, r3
 8006758:	643b      	str	r3, [r7, #64]	; 0x40
 800675a:	4613      	mov	r3, r2
 800675c:	eb42 0303 	adc.w	r3, r2, r3
 8006760:	647b      	str	r3, [r7, #68]	; 0x44
 8006762:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006766:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800676a:	f7fa faf5 	bl	8000d58 <__aeabi_uldivmod>
 800676e:	4602      	mov	r2, r0
 8006770:	460b      	mov	r3, r1
 8006772:	4611      	mov	r1, r2
 8006774:	4b3b      	ldr	r3, [pc, #236]	; (8006864 <UART_SetConfig+0x2d4>)
 8006776:	fba3 2301 	umull	r2, r3, r3, r1
 800677a:	095b      	lsrs	r3, r3, #5
 800677c:	2264      	movs	r2, #100	; 0x64
 800677e:	fb02 f303 	mul.w	r3, r2, r3
 8006782:	1acb      	subs	r3, r1, r3
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800678a:	4b36      	ldr	r3, [pc, #216]	; (8006864 <UART_SetConfig+0x2d4>)
 800678c:	fba3 2302 	umull	r2, r3, r3, r2
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	005b      	lsls	r3, r3, #1
 8006794:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006798:	441c      	add	r4, r3
 800679a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80067a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80067a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80067ac:	4642      	mov	r2, r8
 80067ae:	464b      	mov	r3, r9
 80067b0:	1891      	adds	r1, r2, r2
 80067b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80067b4:	415b      	adcs	r3, r3
 80067b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067bc:	4641      	mov	r1, r8
 80067be:	1851      	adds	r1, r2, r1
 80067c0:	6339      	str	r1, [r7, #48]	; 0x30
 80067c2:	4649      	mov	r1, r9
 80067c4:	414b      	adcs	r3, r1
 80067c6:	637b      	str	r3, [r7, #52]	; 0x34
 80067c8:	f04f 0200 	mov.w	r2, #0
 80067cc:	f04f 0300 	mov.w	r3, #0
 80067d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80067d4:	4659      	mov	r1, fp
 80067d6:	00cb      	lsls	r3, r1, #3
 80067d8:	4651      	mov	r1, sl
 80067da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067de:	4651      	mov	r1, sl
 80067e0:	00ca      	lsls	r2, r1, #3
 80067e2:	4610      	mov	r0, r2
 80067e4:	4619      	mov	r1, r3
 80067e6:	4603      	mov	r3, r0
 80067e8:	4642      	mov	r2, r8
 80067ea:	189b      	adds	r3, r3, r2
 80067ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067f0:	464b      	mov	r3, r9
 80067f2:	460a      	mov	r2, r1
 80067f4:	eb42 0303 	adc.w	r3, r2, r3
 80067f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006808:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800680c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006810:	460b      	mov	r3, r1
 8006812:	18db      	adds	r3, r3, r3
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
 8006816:	4613      	mov	r3, r2
 8006818:	eb42 0303 	adc.w	r3, r2, r3
 800681c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800681e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006822:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006826:	f7fa fa97 	bl	8000d58 <__aeabi_uldivmod>
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4b0d      	ldr	r3, [pc, #52]	; (8006864 <UART_SetConfig+0x2d4>)
 8006830:	fba3 1302 	umull	r1, r3, r3, r2
 8006834:	095b      	lsrs	r3, r3, #5
 8006836:	2164      	movs	r1, #100	; 0x64
 8006838:	fb01 f303 	mul.w	r3, r1, r3
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	3332      	adds	r3, #50	; 0x32
 8006842:	4a08      	ldr	r2, [pc, #32]	; (8006864 <UART_SetConfig+0x2d4>)
 8006844:	fba2 2303 	umull	r2, r3, r2, r3
 8006848:	095b      	lsrs	r3, r3, #5
 800684a:	f003 0207 	and.w	r2, r3, #7
 800684e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4422      	add	r2, r4
 8006856:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006858:	e106      	b.n	8006a68 <UART_SetConfig+0x4d8>
 800685a:	bf00      	nop
 800685c:	40011000 	.word	0x40011000
 8006860:	40011400 	.word	0x40011400
 8006864:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006868:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800686c:	2200      	movs	r2, #0
 800686e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006872:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006876:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800687a:	4642      	mov	r2, r8
 800687c:	464b      	mov	r3, r9
 800687e:	1891      	adds	r1, r2, r2
 8006880:	6239      	str	r1, [r7, #32]
 8006882:	415b      	adcs	r3, r3
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
 8006886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800688a:	4641      	mov	r1, r8
 800688c:	1854      	adds	r4, r2, r1
 800688e:	4649      	mov	r1, r9
 8006890:	eb43 0501 	adc.w	r5, r3, r1
 8006894:	f04f 0200 	mov.w	r2, #0
 8006898:	f04f 0300 	mov.w	r3, #0
 800689c:	00eb      	lsls	r3, r5, #3
 800689e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068a2:	00e2      	lsls	r2, r4, #3
 80068a4:	4614      	mov	r4, r2
 80068a6:	461d      	mov	r5, r3
 80068a8:	4643      	mov	r3, r8
 80068aa:	18e3      	adds	r3, r4, r3
 80068ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80068b0:	464b      	mov	r3, r9
 80068b2:	eb45 0303 	adc.w	r3, r5, r3
 80068b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80068ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80068c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80068ca:	f04f 0200 	mov.w	r2, #0
 80068ce:	f04f 0300 	mov.w	r3, #0
 80068d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80068d6:	4629      	mov	r1, r5
 80068d8:	008b      	lsls	r3, r1, #2
 80068da:	4621      	mov	r1, r4
 80068dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068e0:	4621      	mov	r1, r4
 80068e2:	008a      	lsls	r2, r1, #2
 80068e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80068e8:	f7fa fa36 	bl	8000d58 <__aeabi_uldivmod>
 80068ec:	4602      	mov	r2, r0
 80068ee:	460b      	mov	r3, r1
 80068f0:	4b60      	ldr	r3, [pc, #384]	; (8006a74 <UART_SetConfig+0x4e4>)
 80068f2:	fba3 2302 	umull	r2, r3, r3, r2
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	011c      	lsls	r4, r3, #4
 80068fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068fe:	2200      	movs	r2, #0
 8006900:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006904:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006908:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800690c:	4642      	mov	r2, r8
 800690e:	464b      	mov	r3, r9
 8006910:	1891      	adds	r1, r2, r2
 8006912:	61b9      	str	r1, [r7, #24]
 8006914:	415b      	adcs	r3, r3
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800691c:	4641      	mov	r1, r8
 800691e:	1851      	adds	r1, r2, r1
 8006920:	6139      	str	r1, [r7, #16]
 8006922:	4649      	mov	r1, r9
 8006924:	414b      	adcs	r3, r1
 8006926:	617b      	str	r3, [r7, #20]
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006934:	4659      	mov	r1, fp
 8006936:	00cb      	lsls	r3, r1, #3
 8006938:	4651      	mov	r1, sl
 800693a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800693e:	4651      	mov	r1, sl
 8006940:	00ca      	lsls	r2, r1, #3
 8006942:	4610      	mov	r0, r2
 8006944:	4619      	mov	r1, r3
 8006946:	4603      	mov	r3, r0
 8006948:	4642      	mov	r2, r8
 800694a:	189b      	adds	r3, r3, r2
 800694c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006950:	464b      	mov	r3, r9
 8006952:	460a      	mov	r2, r1
 8006954:	eb42 0303 	adc.w	r3, r2, r3
 8006958:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800695c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	67bb      	str	r3, [r7, #120]	; 0x78
 8006966:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006974:	4649      	mov	r1, r9
 8006976:	008b      	lsls	r3, r1, #2
 8006978:	4641      	mov	r1, r8
 800697a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800697e:	4641      	mov	r1, r8
 8006980:	008a      	lsls	r2, r1, #2
 8006982:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006986:	f7fa f9e7 	bl	8000d58 <__aeabi_uldivmod>
 800698a:	4602      	mov	r2, r0
 800698c:	460b      	mov	r3, r1
 800698e:	4611      	mov	r1, r2
 8006990:	4b38      	ldr	r3, [pc, #224]	; (8006a74 <UART_SetConfig+0x4e4>)
 8006992:	fba3 2301 	umull	r2, r3, r3, r1
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2264      	movs	r2, #100	; 0x64
 800699a:	fb02 f303 	mul.w	r3, r2, r3
 800699e:	1acb      	subs	r3, r1, r3
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	3332      	adds	r3, #50	; 0x32
 80069a4:	4a33      	ldr	r2, [pc, #204]	; (8006a74 <UART_SetConfig+0x4e4>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069b0:	441c      	add	r4, r3
 80069b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069b6:	2200      	movs	r2, #0
 80069b8:	673b      	str	r3, [r7, #112]	; 0x70
 80069ba:	677a      	str	r2, [r7, #116]	; 0x74
 80069bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80069c0:	4642      	mov	r2, r8
 80069c2:	464b      	mov	r3, r9
 80069c4:	1891      	adds	r1, r2, r2
 80069c6:	60b9      	str	r1, [r7, #8]
 80069c8:	415b      	adcs	r3, r3
 80069ca:	60fb      	str	r3, [r7, #12]
 80069cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069d0:	4641      	mov	r1, r8
 80069d2:	1851      	adds	r1, r2, r1
 80069d4:	6039      	str	r1, [r7, #0]
 80069d6:	4649      	mov	r1, r9
 80069d8:	414b      	adcs	r3, r1
 80069da:	607b      	str	r3, [r7, #4]
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80069e8:	4659      	mov	r1, fp
 80069ea:	00cb      	lsls	r3, r1, #3
 80069ec:	4651      	mov	r1, sl
 80069ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069f2:	4651      	mov	r1, sl
 80069f4:	00ca      	lsls	r2, r1, #3
 80069f6:	4610      	mov	r0, r2
 80069f8:	4619      	mov	r1, r3
 80069fa:	4603      	mov	r3, r0
 80069fc:	4642      	mov	r2, r8
 80069fe:	189b      	adds	r3, r3, r2
 8006a00:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a02:	464b      	mov	r3, r9
 8006a04:	460a      	mov	r2, r1
 8006a06:	eb42 0303 	adc.w	r3, r2, r3
 8006a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	663b      	str	r3, [r7, #96]	; 0x60
 8006a16:	667a      	str	r2, [r7, #100]	; 0x64
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a24:	4649      	mov	r1, r9
 8006a26:	008b      	lsls	r3, r1, #2
 8006a28:	4641      	mov	r1, r8
 8006a2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a2e:	4641      	mov	r1, r8
 8006a30:	008a      	lsls	r2, r1, #2
 8006a32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006a36:	f7fa f98f 	bl	8000d58 <__aeabi_uldivmod>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	4b0d      	ldr	r3, [pc, #52]	; (8006a74 <UART_SetConfig+0x4e4>)
 8006a40:	fba3 1302 	umull	r1, r3, r3, r2
 8006a44:	095b      	lsrs	r3, r3, #5
 8006a46:	2164      	movs	r1, #100	; 0x64
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	3332      	adds	r3, #50	; 0x32
 8006a52:	4a08      	ldr	r2, [pc, #32]	; (8006a74 <UART_SetConfig+0x4e4>)
 8006a54:	fba2 2303 	umull	r2, r3, r2, r3
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f003 020f 	and.w	r2, r3, #15
 8006a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4422      	add	r2, r4
 8006a66:	609a      	str	r2, [r3, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a74:	51eb851f 	.word	0x51eb851f

08006a78 <sulp>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	ec45 4b10 	vmov	d0, r4, r5
 8006a82:	4616      	mov	r6, r2
 8006a84:	f001 ff8a 	bl	800899c <__ulp>
 8006a88:	ec51 0b10 	vmov	r0, r1, d0
 8006a8c:	b17e      	cbz	r6, 8006aae <sulp+0x36>
 8006a8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006a92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	dd09      	ble.n	8006aae <sulp+0x36>
 8006a9a:	051b      	lsls	r3, r3, #20
 8006a9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006aa0:	2400      	movs	r4, #0
 8006aa2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006aa6:	4622      	mov	r2, r4
 8006aa8:	462b      	mov	r3, r5
 8006aaa:	f7f9 fdbd 	bl	8000628 <__aeabi_dmul>
 8006aae:	bd70      	pop	{r4, r5, r6, pc}

08006ab0 <_strtod_l>:
 8006ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab4:	ed2d 8b02 	vpush	{d8}
 8006ab8:	b09b      	sub	sp, #108	; 0x6c
 8006aba:	4604      	mov	r4, r0
 8006abc:	9213      	str	r2, [sp, #76]	; 0x4c
 8006abe:	2200      	movs	r2, #0
 8006ac0:	9216      	str	r2, [sp, #88]	; 0x58
 8006ac2:	460d      	mov	r5, r1
 8006ac4:	f04f 0800 	mov.w	r8, #0
 8006ac8:	f04f 0900 	mov.w	r9, #0
 8006acc:	460a      	mov	r2, r1
 8006ace:	9215      	str	r2, [sp, #84]	; 0x54
 8006ad0:	7811      	ldrb	r1, [r2, #0]
 8006ad2:	292b      	cmp	r1, #43	; 0x2b
 8006ad4:	d04c      	beq.n	8006b70 <_strtod_l+0xc0>
 8006ad6:	d83a      	bhi.n	8006b4e <_strtod_l+0x9e>
 8006ad8:	290d      	cmp	r1, #13
 8006ada:	d834      	bhi.n	8006b46 <_strtod_l+0x96>
 8006adc:	2908      	cmp	r1, #8
 8006ade:	d834      	bhi.n	8006b4a <_strtod_l+0x9a>
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d03d      	beq.n	8006b60 <_strtod_l+0xb0>
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	920a      	str	r2, [sp, #40]	; 0x28
 8006ae8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006aea:	7832      	ldrb	r2, [r6, #0]
 8006aec:	2a30      	cmp	r2, #48	; 0x30
 8006aee:	f040 80b4 	bne.w	8006c5a <_strtod_l+0x1aa>
 8006af2:	7872      	ldrb	r2, [r6, #1]
 8006af4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006af8:	2a58      	cmp	r2, #88	; 0x58
 8006afa:	d170      	bne.n	8006bde <_strtod_l+0x12e>
 8006afc:	9302      	str	r3, [sp, #8]
 8006afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	ab16      	add	r3, sp, #88	; 0x58
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	4a8e      	ldr	r2, [pc, #568]	; (8006d40 <_strtod_l+0x290>)
 8006b08:	ab17      	add	r3, sp, #92	; 0x5c
 8006b0a:	a915      	add	r1, sp, #84	; 0x54
 8006b0c:	4620      	mov	r0, r4
 8006b0e:	f001 f82b 	bl	8007b68 <__gethex>
 8006b12:	f010 070f 	ands.w	r7, r0, #15
 8006b16:	4605      	mov	r5, r0
 8006b18:	d005      	beq.n	8006b26 <_strtod_l+0x76>
 8006b1a:	2f06      	cmp	r7, #6
 8006b1c:	d12a      	bne.n	8006b74 <_strtod_l+0xc4>
 8006b1e:	3601      	adds	r6, #1
 8006b20:	2300      	movs	r3, #0
 8006b22:	9615      	str	r6, [sp, #84]	; 0x54
 8006b24:	930a      	str	r3, [sp, #40]	; 0x28
 8006b26:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f040 857f 	bne.w	800762c <_strtod_l+0xb7c>
 8006b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b30:	b1db      	cbz	r3, 8006b6a <_strtod_l+0xba>
 8006b32:	4642      	mov	r2, r8
 8006b34:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006b38:	ec43 2b10 	vmov	d0, r2, r3
 8006b3c:	b01b      	add	sp, #108	; 0x6c
 8006b3e:	ecbd 8b02 	vpop	{d8}
 8006b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b46:	2920      	cmp	r1, #32
 8006b48:	d1cc      	bne.n	8006ae4 <_strtod_l+0x34>
 8006b4a:	3201      	adds	r2, #1
 8006b4c:	e7bf      	b.n	8006ace <_strtod_l+0x1e>
 8006b4e:	292d      	cmp	r1, #45	; 0x2d
 8006b50:	d1c8      	bne.n	8006ae4 <_strtod_l+0x34>
 8006b52:	2101      	movs	r1, #1
 8006b54:	910a      	str	r1, [sp, #40]	; 0x28
 8006b56:	1c51      	adds	r1, r2, #1
 8006b58:	9115      	str	r1, [sp, #84]	; 0x54
 8006b5a:	7852      	ldrb	r2, [r2, #1]
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	d1c3      	bne.n	8006ae8 <_strtod_l+0x38>
 8006b60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b62:	9515      	str	r5, [sp, #84]	; 0x54
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f040 855f 	bne.w	8007628 <_strtod_l+0xb78>
 8006b6a:	4642      	mov	r2, r8
 8006b6c:	464b      	mov	r3, r9
 8006b6e:	e7e3      	b.n	8006b38 <_strtod_l+0x88>
 8006b70:	2100      	movs	r1, #0
 8006b72:	e7ef      	b.n	8006b54 <_strtod_l+0xa4>
 8006b74:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006b76:	b13a      	cbz	r2, 8006b88 <_strtod_l+0xd8>
 8006b78:	2135      	movs	r1, #53	; 0x35
 8006b7a:	a818      	add	r0, sp, #96	; 0x60
 8006b7c:	f002 f80b 	bl	8008b96 <__copybits>
 8006b80:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006b82:	4620      	mov	r0, r4
 8006b84:	f001 fbde 	bl	8008344 <_Bfree>
 8006b88:	3f01      	subs	r7, #1
 8006b8a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006b8c:	2f04      	cmp	r7, #4
 8006b8e:	d806      	bhi.n	8006b9e <_strtod_l+0xee>
 8006b90:	e8df f007 	tbb	[pc, r7]
 8006b94:	201d0314 	.word	0x201d0314
 8006b98:	14          	.byte	0x14
 8006b99:	00          	.byte	0x00
 8006b9a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8006b9e:	05e9      	lsls	r1, r5, #23
 8006ba0:	bf48      	it	mi
 8006ba2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006ba6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006baa:	0d1b      	lsrs	r3, r3, #20
 8006bac:	051b      	lsls	r3, r3, #20
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1b9      	bne.n	8006b26 <_strtod_l+0x76>
 8006bb2:	f000 fedf 	bl	8007974 <__errno>
 8006bb6:	2322      	movs	r3, #34	; 0x22
 8006bb8:	6003      	str	r3, [r0, #0]
 8006bba:	e7b4      	b.n	8006b26 <_strtod_l+0x76>
 8006bbc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8006bc0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006bc4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006bc8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006bcc:	e7e7      	b.n	8006b9e <_strtod_l+0xee>
 8006bce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006d48 <_strtod_l+0x298>
 8006bd2:	e7e4      	b.n	8006b9e <_strtod_l+0xee>
 8006bd4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006bd8:	f04f 38ff 	mov.w	r8, #4294967295
 8006bdc:	e7df      	b.n	8006b9e <_strtod_l+0xee>
 8006bde:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	9215      	str	r2, [sp, #84]	; 0x54
 8006be4:	785b      	ldrb	r3, [r3, #1]
 8006be6:	2b30      	cmp	r3, #48	; 0x30
 8006be8:	d0f9      	beq.n	8006bde <_strtod_l+0x12e>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d09b      	beq.n	8006b26 <_strtod_l+0x76>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	f04f 0a00 	mov.w	sl, #0
 8006bf4:	9304      	str	r3, [sp, #16]
 8006bf6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bfa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006bfe:	46d3      	mov	fp, sl
 8006c00:	220a      	movs	r2, #10
 8006c02:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006c04:	7806      	ldrb	r6, [r0, #0]
 8006c06:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006c0a:	b2d9      	uxtb	r1, r3
 8006c0c:	2909      	cmp	r1, #9
 8006c0e:	d926      	bls.n	8006c5e <_strtod_l+0x1ae>
 8006c10:	494c      	ldr	r1, [pc, #304]	; (8006d44 <_strtod_l+0x294>)
 8006c12:	2201      	movs	r2, #1
 8006c14:	f000 fe55 	bl	80078c2 <strncmp>
 8006c18:	2800      	cmp	r0, #0
 8006c1a:	d030      	beq.n	8006c7e <_strtod_l+0x1ce>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	4632      	mov	r2, r6
 8006c20:	9005      	str	r0, [sp, #20]
 8006c22:	465e      	mov	r6, fp
 8006c24:	4603      	mov	r3, r0
 8006c26:	2a65      	cmp	r2, #101	; 0x65
 8006c28:	d001      	beq.n	8006c2e <_strtod_l+0x17e>
 8006c2a:	2a45      	cmp	r2, #69	; 0x45
 8006c2c:	d113      	bne.n	8006c56 <_strtod_l+0x1a6>
 8006c2e:	b91e      	cbnz	r6, 8006c38 <_strtod_l+0x188>
 8006c30:	9a04      	ldr	r2, [sp, #16]
 8006c32:	4302      	orrs	r2, r0
 8006c34:	d094      	beq.n	8006b60 <_strtod_l+0xb0>
 8006c36:	2600      	movs	r6, #0
 8006c38:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006c3a:	1c6a      	adds	r2, r5, #1
 8006c3c:	9215      	str	r2, [sp, #84]	; 0x54
 8006c3e:	786a      	ldrb	r2, [r5, #1]
 8006c40:	2a2b      	cmp	r2, #43	; 0x2b
 8006c42:	d074      	beq.n	8006d2e <_strtod_l+0x27e>
 8006c44:	2a2d      	cmp	r2, #45	; 0x2d
 8006c46:	d078      	beq.n	8006d3a <_strtod_l+0x28a>
 8006c48:	f04f 0c00 	mov.w	ip, #0
 8006c4c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c50:	2909      	cmp	r1, #9
 8006c52:	d97f      	bls.n	8006d54 <_strtod_l+0x2a4>
 8006c54:	9515      	str	r5, [sp, #84]	; 0x54
 8006c56:	2700      	movs	r7, #0
 8006c58:	e09e      	b.n	8006d98 <_strtod_l+0x2e8>
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	e7c8      	b.n	8006bf0 <_strtod_l+0x140>
 8006c5e:	f1bb 0f08 	cmp.w	fp, #8
 8006c62:	bfd8      	it	le
 8006c64:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006c66:	f100 0001 	add.w	r0, r0, #1
 8006c6a:	bfda      	itte	le
 8006c6c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006c70:	9309      	strle	r3, [sp, #36]	; 0x24
 8006c72:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006c76:	f10b 0b01 	add.w	fp, fp, #1
 8006c7a:	9015      	str	r0, [sp, #84]	; 0x54
 8006c7c:	e7c1      	b.n	8006c02 <_strtod_l+0x152>
 8006c7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c80:	1c5a      	adds	r2, r3, #1
 8006c82:	9215      	str	r2, [sp, #84]	; 0x54
 8006c84:	785a      	ldrb	r2, [r3, #1]
 8006c86:	f1bb 0f00 	cmp.w	fp, #0
 8006c8a:	d037      	beq.n	8006cfc <_strtod_l+0x24c>
 8006c8c:	9005      	str	r0, [sp, #20]
 8006c8e:	465e      	mov	r6, fp
 8006c90:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c94:	2b09      	cmp	r3, #9
 8006c96:	d912      	bls.n	8006cbe <_strtod_l+0x20e>
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e7c4      	b.n	8006c26 <_strtod_l+0x176>
 8006c9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c9e:	1c5a      	adds	r2, r3, #1
 8006ca0:	9215      	str	r2, [sp, #84]	; 0x54
 8006ca2:	785a      	ldrb	r2, [r3, #1]
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	2a30      	cmp	r2, #48	; 0x30
 8006ca8:	d0f8      	beq.n	8006c9c <_strtod_l+0x1ec>
 8006caa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006cae:	2b08      	cmp	r3, #8
 8006cb0:	f200 84c1 	bhi.w	8007636 <_strtod_l+0xb86>
 8006cb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cb6:	9005      	str	r0, [sp, #20]
 8006cb8:	2000      	movs	r0, #0
 8006cba:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cbc:	4606      	mov	r6, r0
 8006cbe:	3a30      	subs	r2, #48	; 0x30
 8006cc0:	f100 0301 	add.w	r3, r0, #1
 8006cc4:	d014      	beq.n	8006cf0 <_strtod_l+0x240>
 8006cc6:	9905      	ldr	r1, [sp, #20]
 8006cc8:	4419      	add	r1, r3
 8006cca:	9105      	str	r1, [sp, #20]
 8006ccc:	4633      	mov	r3, r6
 8006cce:	eb00 0c06 	add.w	ip, r0, r6
 8006cd2:	210a      	movs	r1, #10
 8006cd4:	4563      	cmp	r3, ip
 8006cd6:	d113      	bne.n	8006d00 <_strtod_l+0x250>
 8006cd8:	1833      	adds	r3, r6, r0
 8006cda:	2b08      	cmp	r3, #8
 8006cdc:	f106 0601 	add.w	r6, r6, #1
 8006ce0:	4406      	add	r6, r0
 8006ce2:	dc1a      	bgt.n	8006d1a <_strtod_l+0x26a>
 8006ce4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce6:	230a      	movs	r3, #10
 8006ce8:	fb03 2301 	mla	r3, r3, r1, r2
 8006cec:	9309      	str	r3, [sp, #36]	; 0x24
 8006cee:	2300      	movs	r3, #0
 8006cf0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006cf2:	1c51      	adds	r1, r2, #1
 8006cf4:	9115      	str	r1, [sp, #84]	; 0x54
 8006cf6:	7852      	ldrb	r2, [r2, #1]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	e7c9      	b.n	8006c90 <_strtod_l+0x1e0>
 8006cfc:	4658      	mov	r0, fp
 8006cfe:	e7d2      	b.n	8006ca6 <_strtod_l+0x1f6>
 8006d00:	2b08      	cmp	r3, #8
 8006d02:	f103 0301 	add.w	r3, r3, #1
 8006d06:	dc03      	bgt.n	8006d10 <_strtod_l+0x260>
 8006d08:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006d0a:	434f      	muls	r7, r1
 8006d0c:	9709      	str	r7, [sp, #36]	; 0x24
 8006d0e:	e7e1      	b.n	8006cd4 <_strtod_l+0x224>
 8006d10:	2b10      	cmp	r3, #16
 8006d12:	bfd8      	it	le
 8006d14:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006d18:	e7dc      	b.n	8006cd4 <_strtod_l+0x224>
 8006d1a:	2e10      	cmp	r6, #16
 8006d1c:	bfdc      	itt	le
 8006d1e:	230a      	movle	r3, #10
 8006d20:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006d24:	e7e3      	b.n	8006cee <_strtod_l+0x23e>
 8006d26:	2300      	movs	r3, #0
 8006d28:	9305      	str	r3, [sp, #20]
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e780      	b.n	8006c30 <_strtod_l+0x180>
 8006d2e:	f04f 0c00 	mov.w	ip, #0
 8006d32:	1caa      	adds	r2, r5, #2
 8006d34:	9215      	str	r2, [sp, #84]	; 0x54
 8006d36:	78aa      	ldrb	r2, [r5, #2]
 8006d38:	e788      	b.n	8006c4c <_strtod_l+0x19c>
 8006d3a:	f04f 0c01 	mov.w	ip, #1
 8006d3e:	e7f8      	b.n	8006d32 <_strtod_l+0x282>
 8006d40:	0800a5f8 	.word	0x0800a5f8
 8006d44:	0800a5e8 	.word	0x0800a5e8
 8006d48:	7ff00000 	.word	0x7ff00000
 8006d4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d4e:	1c51      	adds	r1, r2, #1
 8006d50:	9115      	str	r1, [sp, #84]	; 0x54
 8006d52:	7852      	ldrb	r2, [r2, #1]
 8006d54:	2a30      	cmp	r2, #48	; 0x30
 8006d56:	d0f9      	beq.n	8006d4c <_strtod_l+0x29c>
 8006d58:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006d5c:	2908      	cmp	r1, #8
 8006d5e:	f63f af7a 	bhi.w	8006c56 <_strtod_l+0x1a6>
 8006d62:	3a30      	subs	r2, #48	; 0x30
 8006d64:	9208      	str	r2, [sp, #32]
 8006d66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d68:	920c      	str	r2, [sp, #48]	; 0x30
 8006d6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006d6c:	1c57      	adds	r7, r2, #1
 8006d6e:	9715      	str	r7, [sp, #84]	; 0x54
 8006d70:	7852      	ldrb	r2, [r2, #1]
 8006d72:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006d76:	f1be 0f09 	cmp.w	lr, #9
 8006d7a:	d938      	bls.n	8006dee <_strtod_l+0x33e>
 8006d7c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d7e:	1a7f      	subs	r7, r7, r1
 8006d80:	2f08      	cmp	r7, #8
 8006d82:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006d86:	dc03      	bgt.n	8006d90 <_strtod_l+0x2e0>
 8006d88:	9908      	ldr	r1, [sp, #32]
 8006d8a:	428f      	cmp	r7, r1
 8006d8c:	bfa8      	it	ge
 8006d8e:	460f      	movge	r7, r1
 8006d90:	f1bc 0f00 	cmp.w	ip, #0
 8006d94:	d000      	beq.n	8006d98 <_strtod_l+0x2e8>
 8006d96:	427f      	negs	r7, r7
 8006d98:	2e00      	cmp	r6, #0
 8006d9a:	d14f      	bne.n	8006e3c <_strtod_l+0x38c>
 8006d9c:	9904      	ldr	r1, [sp, #16]
 8006d9e:	4301      	orrs	r1, r0
 8006da0:	f47f aec1 	bne.w	8006b26 <_strtod_l+0x76>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	f47f aedb 	bne.w	8006b60 <_strtod_l+0xb0>
 8006daa:	2a69      	cmp	r2, #105	; 0x69
 8006dac:	d029      	beq.n	8006e02 <_strtod_l+0x352>
 8006dae:	dc26      	bgt.n	8006dfe <_strtod_l+0x34e>
 8006db0:	2a49      	cmp	r2, #73	; 0x49
 8006db2:	d026      	beq.n	8006e02 <_strtod_l+0x352>
 8006db4:	2a4e      	cmp	r2, #78	; 0x4e
 8006db6:	f47f aed3 	bne.w	8006b60 <_strtod_l+0xb0>
 8006dba:	499b      	ldr	r1, [pc, #620]	; (8007028 <_strtod_l+0x578>)
 8006dbc:	a815      	add	r0, sp, #84	; 0x54
 8006dbe:	f001 f913 	bl	8007fe8 <__match>
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	f43f aecc 	beq.w	8006b60 <_strtod_l+0xb0>
 8006dc8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b28      	cmp	r3, #40	; 0x28
 8006dce:	d12f      	bne.n	8006e30 <_strtod_l+0x380>
 8006dd0:	4996      	ldr	r1, [pc, #600]	; (800702c <_strtod_l+0x57c>)
 8006dd2:	aa18      	add	r2, sp, #96	; 0x60
 8006dd4:	a815      	add	r0, sp, #84	; 0x54
 8006dd6:	f001 f91b 	bl	8008010 <__hexnan>
 8006dda:	2805      	cmp	r0, #5
 8006ddc:	d128      	bne.n	8006e30 <_strtod_l+0x380>
 8006dde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006de0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006de4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006de8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006dec:	e69b      	b.n	8006b26 <_strtod_l+0x76>
 8006dee:	9f08      	ldr	r7, [sp, #32]
 8006df0:	210a      	movs	r1, #10
 8006df2:	fb01 2107 	mla	r1, r1, r7, r2
 8006df6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006dfa:	9208      	str	r2, [sp, #32]
 8006dfc:	e7b5      	b.n	8006d6a <_strtod_l+0x2ba>
 8006dfe:	2a6e      	cmp	r2, #110	; 0x6e
 8006e00:	e7d9      	b.n	8006db6 <_strtod_l+0x306>
 8006e02:	498b      	ldr	r1, [pc, #556]	; (8007030 <_strtod_l+0x580>)
 8006e04:	a815      	add	r0, sp, #84	; 0x54
 8006e06:	f001 f8ef 	bl	8007fe8 <__match>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f43f aea8 	beq.w	8006b60 <_strtod_l+0xb0>
 8006e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e12:	4988      	ldr	r1, [pc, #544]	; (8007034 <_strtod_l+0x584>)
 8006e14:	3b01      	subs	r3, #1
 8006e16:	a815      	add	r0, sp, #84	; 0x54
 8006e18:	9315      	str	r3, [sp, #84]	; 0x54
 8006e1a:	f001 f8e5 	bl	8007fe8 <__match>
 8006e1e:	b910      	cbnz	r0, 8006e26 <_strtod_l+0x376>
 8006e20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006e22:	3301      	adds	r3, #1
 8006e24:	9315      	str	r3, [sp, #84]	; 0x54
 8006e26:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007044 <_strtod_l+0x594>
 8006e2a:	f04f 0800 	mov.w	r8, #0
 8006e2e:	e67a      	b.n	8006b26 <_strtod_l+0x76>
 8006e30:	4881      	ldr	r0, [pc, #516]	; (8007038 <_strtod_l+0x588>)
 8006e32:	f000 fddd 	bl	80079f0 <nan>
 8006e36:	ec59 8b10 	vmov	r8, r9, d0
 8006e3a:	e674      	b.n	8006b26 <_strtod_l+0x76>
 8006e3c:	9b05      	ldr	r3, [sp, #20]
 8006e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e40:	1afb      	subs	r3, r7, r3
 8006e42:	f1bb 0f00 	cmp.w	fp, #0
 8006e46:	bf08      	it	eq
 8006e48:	46b3      	moveq	fp, r6
 8006e4a:	2e10      	cmp	r6, #16
 8006e4c:	9308      	str	r3, [sp, #32]
 8006e4e:	4635      	mov	r5, r6
 8006e50:	bfa8      	it	ge
 8006e52:	2510      	movge	r5, #16
 8006e54:	f7f9 fb6e 	bl	8000534 <__aeabi_ui2d>
 8006e58:	2e09      	cmp	r6, #9
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	4689      	mov	r9, r1
 8006e5e:	dd13      	ble.n	8006e88 <_strtod_l+0x3d8>
 8006e60:	4b76      	ldr	r3, [pc, #472]	; (800703c <_strtod_l+0x58c>)
 8006e62:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006e66:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006e6a:	f7f9 fbdd 	bl	8000628 <__aeabi_dmul>
 8006e6e:	4680      	mov	r8, r0
 8006e70:	4650      	mov	r0, sl
 8006e72:	4689      	mov	r9, r1
 8006e74:	f7f9 fb5e 	bl	8000534 <__aeabi_ui2d>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4640      	mov	r0, r8
 8006e7e:	4649      	mov	r1, r9
 8006e80:	f7f9 fa1c 	bl	80002bc <__adddf3>
 8006e84:	4680      	mov	r8, r0
 8006e86:	4689      	mov	r9, r1
 8006e88:	2e0f      	cmp	r6, #15
 8006e8a:	dc38      	bgt.n	8006efe <_strtod_l+0x44e>
 8006e8c:	9b08      	ldr	r3, [sp, #32]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f43f ae49 	beq.w	8006b26 <_strtod_l+0x76>
 8006e94:	dd24      	ble.n	8006ee0 <_strtod_l+0x430>
 8006e96:	2b16      	cmp	r3, #22
 8006e98:	dc0b      	bgt.n	8006eb2 <_strtod_l+0x402>
 8006e9a:	4968      	ldr	r1, [pc, #416]	; (800703c <_strtod_l+0x58c>)
 8006e9c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	f7f9 fbbe 	bl	8000628 <__aeabi_dmul>
 8006eac:	4680      	mov	r8, r0
 8006eae:	4689      	mov	r9, r1
 8006eb0:	e639      	b.n	8006b26 <_strtod_l+0x76>
 8006eb2:	9a08      	ldr	r2, [sp, #32]
 8006eb4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	db20      	blt.n	8006efe <_strtod_l+0x44e>
 8006ebc:	4c5f      	ldr	r4, [pc, #380]	; (800703c <_strtod_l+0x58c>)
 8006ebe:	f1c6 060f 	rsb	r6, r6, #15
 8006ec2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	464b      	mov	r3, r9
 8006eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ece:	f7f9 fbab 	bl	8000628 <__aeabi_dmul>
 8006ed2:	9b08      	ldr	r3, [sp, #32]
 8006ed4:	1b9e      	subs	r6, r3, r6
 8006ed6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006eda:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006ede:	e7e3      	b.n	8006ea8 <_strtod_l+0x3f8>
 8006ee0:	9b08      	ldr	r3, [sp, #32]
 8006ee2:	3316      	adds	r3, #22
 8006ee4:	db0b      	blt.n	8006efe <_strtod_l+0x44e>
 8006ee6:	9b05      	ldr	r3, [sp, #20]
 8006ee8:	1bdf      	subs	r7, r3, r7
 8006eea:	4b54      	ldr	r3, [pc, #336]	; (800703c <_strtod_l+0x58c>)
 8006eec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006ef0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ef4:	4640      	mov	r0, r8
 8006ef6:	4649      	mov	r1, r9
 8006ef8:	f7f9 fcc0 	bl	800087c <__aeabi_ddiv>
 8006efc:	e7d6      	b.n	8006eac <_strtod_l+0x3fc>
 8006efe:	9b08      	ldr	r3, [sp, #32]
 8006f00:	1b75      	subs	r5, r6, r5
 8006f02:	441d      	add	r5, r3
 8006f04:	2d00      	cmp	r5, #0
 8006f06:	dd70      	ble.n	8006fea <_strtod_l+0x53a>
 8006f08:	f015 030f 	ands.w	r3, r5, #15
 8006f0c:	d00a      	beq.n	8006f24 <_strtod_l+0x474>
 8006f0e:	494b      	ldr	r1, [pc, #300]	; (800703c <_strtod_l+0x58c>)
 8006f10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f14:	4642      	mov	r2, r8
 8006f16:	464b      	mov	r3, r9
 8006f18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f1c:	f7f9 fb84 	bl	8000628 <__aeabi_dmul>
 8006f20:	4680      	mov	r8, r0
 8006f22:	4689      	mov	r9, r1
 8006f24:	f035 050f 	bics.w	r5, r5, #15
 8006f28:	d04d      	beq.n	8006fc6 <_strtod_l+0x516>
 8006f2a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006f2e:	dd22      	ble.n	8006f76 <_strtod_l+0x4c6>
 8006f30:	2500      	movs	r5, #0
 8006f32:	46ab      	mov	fp, r5
 8006f34:	9509      	str	r5, [sp, #36]	; 0x24
 8006f36:	9505      	str	r5, [sp, #20]
 8006f38:	2322      	movs	r3, #34	; 0x22
 8006f3a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007044 <_strtod_l+0x594>
 8006f3e:	6023      	str	r3, [r4, #0]
 8006f40:	f04f 0800 	mov.w	r8, #0
 8006f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f43f aded 	beq.w	8006b26 <_strtod_l+0x76>
 8006f4c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f001 f9f8 	bl	8008344 <_Bfree>
 8006f54:	9905      	ldr	r1, [sp, #20]
 8006f56:	4620      	mov	r0, r4
 8006f58:	f001 f9f4 	bl	8008344 <_Bfree>
 8006f5c:	4659      	mov	r1, fp
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f001 f9f0 	bl	8008344 <_Bfree>
 8006f64:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f66:	4620      	mov	r0, r4
 8006f68:	f001 f9ec 	bl	8008344 <_Bfree>
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f001 f9e8 	bl	8008344 <_Bfree>
 8006f74:	e5d7      	b.n	8006b26 <_strtod_l+0x76>
 8006f76:	4b32      	ldr	r3, [pc, #200]	; (8007040 <_strtod_l+0x590>)
 8006f78:	9304      	str	r3, [sp, #16]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	112d      	asrs	r5, r5, #4
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4649      	mov	r1, r9
 8006f82:	469a      	mov	sl, r3
 8006f84:	2d01      	cmp	r5, #1
 8006f86:	dc21      	bgt.n	8006fcc <_strtod_l+0x51c>
 8006f88:	b10b      	cbz	r3, 8006f8e <_strtod_l+0x4de>
 8006f8a:	4680      	mov	r8, r0
 8006f8c:	4689      	mov	r9, r1
 8006f8e:	492c      	ldr	r1, [pc, #176]	; (8007040 <_strtod_l+0x590>)
 8006f90:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006f94:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006f98:	4642      	mov	r2, r8
 8006f9a:	464b      	mov	r3, r9
 8006f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fa0:	f7f9 fb42 	bl	8000628 <__aeabi_dmul>
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <_strtod_l+0x594>)
 8006fa6:	460a      	mov	r2, r1
 8006fa8:	400b      	ands	r3, r1
 8006faa:	4927      	ldr	r1, [pc, #156]	; (8007048 <_strtod_l+0x598>)
 8006fac:	428b      	cmp	r3, r1
 8006fae:	4680      	mov	r8, r0
 8006fb0:	d8be      	bhi.n	8006f30 <_strtod_l+0x480>
 8006fb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006fb6:	428b      	cmp	r3, r1
 8006fb8:	bf86      	itte	hi
 8006fba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800704c <_strtod_l+0x59c>
 8006fbe:	f04f 38ff 	movhi.w	r8, #4294967295
 8006fc2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	e07b      	b.n	80070c4 <_strtod_l+0x614>
 8006fcc:	07ea      	lsls	r2, r5, #31
 8006fce:	d505      	bpl.n	8006fdc <_strtod_l+0x52c>
 8006fd0:	9b04      	ldr	r3, [sp, #16]
 8006fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd6:	f7f9 fb27 	bl	8000628 <__aeabi_dmul>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	9a04      	ldr	r2, [sp, #16]
 8006fde:	3208      	adds	r2, #8
 8006fe0:	f10a 0a01 	add.w	sl, sl, #1
 8006fe4:	106d      	asrs	r5, r5, #1
 8006fe6:	9204      	str	r2, [sp, #16]
 8006fe8:	e7cc      	b.n	8006f84 <_strtod_l+0x4d4>
 8006fea:	d0ec      	beq.n	8006fc6 <_strtod_l+0x516>
 8006fec:	426d      	negs	r5, r5
 8006fee:	f015 020f 	ands.w	r2, r5, #15
 8006ff2:	d00a      	beq.n	800700a <_strtod_l+0x55a>
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <_strtod_l+0x58c>)
 8006ff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ffa:	4640      	mov	r0, r8
 8006ffc:	4649      	mov	r1, r9
 8006ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007002:	f7f9 fc3b 	bl	800087c <__aeabi_ddiv>
 8007006:	4680      	mov	r8, r0
 8007008:	4689      	mov	r9, r1
 800700a:	112d      	asrs	r5, r5, #4
 800700c:	d0db      	beq.n	8006fc6 <_strtod_l+0x516>
 800700e:	2d1f      	cmp	r5, #31
 8007010:	dd1e      	ble.n	8007050 <_strtod_l+0x5a0>
 8007012:	2500      	movs	r5, #0
 8007014:	46ab      	mov	fp, r5
 8007016:	9509      	str	r5, [sp, #36]	; 0x24
 8007018:	9505      	str	r5, [sp, #20]
 800701a:	2322      	movs	r3, #34	; 0x22
 800701c:	f04f 0800 	mov.w	r8, #0
 8007020:	f04f 0900 	mov.w	r9, #0
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	e78d      	b.n	8006f44 <_strtod_l+0x494>
 8007028:	0800a5f3 	.word	0x0800a5f3
 800702c:	0800a60c 	.word	0x0800a60c
 8007030:	0800a5ea 	.word	0x0800a5ea
 8007034:	0800a5ed 	.word	0x0800a5ed
 8007038:	0800a970 	.word	0x0800a970
 800703c:	0800a760 	.word	0x0800a760
 8007040:	0800a738 	.word	0x0800a738
 8007044:	7ff00000 	.word	0x7ff00000
 8007048:	7ca00000 	.word	0x7ca00000
 800704c:	7fefffff 	.word	0x7fefffff
 8007050:	f015 0310 	ands.w	r3, r5, #16
 8007054:	bf18      	it	ne
 8007056:	236a      	movne	r3, #106	; 0x6a
 8007058:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80073fc <_strtod_l+0x94c>
 800705c:	9304      	str	r3, [sp, #16]
 800705e:	4640      	mov	r0, r8
 8007060:	4649      	mov	r1, r9
 8007062:	2300      	movs	r3, #0
 8007064:	07ea      	lsls	r2, r5, #31
 8007066:	d504      	bpl.n	8007072 <_strtod_l+0x5c2>
 8007068:	e9da 2300 	ldrd	r2, r3, [sl]
 800706c:	f7f9 fadc 	bl	8000628 <__aeabi_dmul>
 8007070:	2301      	movs	r3, #1
 8007072:	106d      	asrs	r5, r5, #1
 8007074:	f10a 0a08 	add.w	sl, sl, #8
 8007078:	d1f4      	bne.n	8007064 <_strtod_l+0x5b4>
 800707a:	b10b      	cbz	r3, 8007080 <_strtod_l+0x5d0>
 800707c:	4680      	mov	r8, r0
 800707e:	4689      	mov	r9, r1
 8007080:	9b04      	ldr	r3, [sp, #16]
 8007082:	b1bb      	cbz	r3, 80070b4 <_strtod_l+0x604>
 8007084:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007088:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800708c:	2b00      	cmp	r3, #0
 800708e:	4649      	mov	r1, r9
 8007090:	dd10      	ble.n	80070b4 <_strtod_l+0x604>
 8007092:	2b1f      	cmp	r3, #31
 8007094:	f340 811e 	ble.w	80072d4 <_strtod_l+0x824>
 8007098:	2b34      	cmp	r3, #52	; 0x34
 800709a:	bfde      	ittt	le
 800709c:	f04f 33ff 	movle.w	r3, #4294967295
 80070a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80070a4:	4093      	lslle	r3, r2
 80070a6:	f04f 0800 	mov.w	r8, #0
 80070aa:	bfcc      	ite	gt
 80070ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80070b0:	ea03 0901 	andle.w	r9, r3, r1
 80070b4:	2200      	movs	r2, #0
 80070b6:	2300      	movs	r3, #0
 80070b8:	4640      	mov	r0, r8
 80070ba:	4649      	mov	r1, r9
 80070bc:	f7f9 fd1c 	bl	8000af8 <__aeabi_dcmpeq>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d1a6      	bne.n	8007012 <_strtod_l+0x562>
 80070c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070ca:	4633      	mov	r3, r6
 80070cc:	465a      	mov	r2, fp
 80070ce:	4620      	mov	r0, r4
 80070d0:	f001 f9a0 	bl	8008414 <__s2b>
 80070d4:	9009      	str	r0, [sp, #36]	; 0x24
 80070d6:	2800      	cmp	r0, #0
 80070d8:	f43f af2a 	beq.w	8006f30 <_strtod_l+0x480>
 80070dc:	9a08      	ldr	r2, [sp, #32]
 80070de:	9b05      	ldr	r3, [sp, #20]
 80070e0:	2a00      	cmp	r2, #0
 80070e2:	eba3 0307 	sub.w	r3, r3, r7
 80070e6:	bfa8      	it	ge
 80070e8:	2300      	movge	r3, #0
 80070ea:	930c      	str	r3, [sp, #48]	; 0x30
 80070ec:	2500      	movs	r5, #0
 80070ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80070f2:	9312      	str	r3, [sp, #72]	; 0x48
 80070f4:	46ab      	mov	fp, r5
 80070f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070f8:	4620      	mov	r0, r4
 80070fa:	6859      	ldr	r1, [r3, #4]
 80070fc:	f001 f8e2 	bl	80082c4 <_Balloc>
 8007100:	9005      	str	r0, [sp, #20]
 8007102:	2800      	cmp	r0, #0
 8007104:	f43f af18 	beq.w	8006f38 <_strtod_l+0x488>
 8007108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	3202      	adds	r2, #2
 800710e:	f103 010c 	add.w	r1, r3, #12
 8007112:	0092      	lsls	r2, r2, #2
 8007114:	300c      	adds	r0, #12
 8007116:	f000 fc5a 	bl	80079ce <memcpy>
 800711a:	ec49 8b10 	vmov	d0, r8, r9
 800711e:	aa18      	add	r2, sp, #96	; 0x60
 8007120:	a917      	add	r1, sp, #92	; 0x5c
 8007122:	4620      	mov	r0, r4
 8007124:	f001 fcaa 	bl	8008a7c <__d2b>
 8007128:	ec49 8b18 	vmov	d8, r8, r9
 800712c:	9016      	str	r0, [sp, #88]	; 0x58
 800712e:	2800      	cmp	r0, #0
 8007130:	f43f af02 	beq.w	8006f38 <_strtod_l+0x488>
 8007134:	2101      	movs	r1, #1
 8007136:	4620      	mov	r0, r4
 8007138:	f001 fa04 	bl	8008544 <__i2b>
 800713c:	4683      	mov	fp, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	f43f aefa 	beq.w	8006f38 <_strtod_l+0x488>
 8007144:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007146:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007148:	2e00      	cmp	r6, #0
 800714a:	bfab      	itete	ge
 800714c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800714e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007150:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007152:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007156:	bfac      	ite	ge
 8007158:	eb06 0a03 	addge.w	sl, r6, r3
 800715c:	1b9f      	sublt	r7, r3, r6
 800715e:	9b04      	ldr	r3, [sp, #16]
 8007160:	1af6      	subs	r6, r6, r3
 8007162:	4416      	add	r6, r2
 8007164:	4ba0      	ldr	r3, [pc, #640]	; (80073e8 <_strtod_l+0x938>)
 8007166:	3e01      	subs	r6, #1
 8007168:	429e      	cmp	r6, r3
 800716a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800716e:	f280 80c4 	bge.w	80072fa <_strtod_l+0x84a>
 8007172:	1b9b      	subs	r3, r3, r6
 8007174:	2b1f      	cmp	r3, #31
 8007176:	eba2 0203 	sub.w	r2, r2, r3
 800717a:	f04f 0101 	mov.w	r1, #1
 800717e:	f300 80b0 	bgt.w	80072e2 <_strtod_l+0x832>
 8007182:	fa01 f303 	lsl.w	r3, r1, r3
 8007186:	930e      	str	r3, [sp, #56]	; 0x38
 8007188:	2300      	movs	r3, #0
 800718a:	930d      	str	r3, [sp, #52]	; 0x34
 800718c:	eb0a 0602 	add.w	r6, sl, r2
 8007190:	9b04      	ldr	r3, [sp, #16]
 8007192:	45b2      	cmp	sl, r6
 8007194:	4417      	add	r7, r2
 8007196:	441f      	add	r7, r3
 8007198:	4653      	mov	r3, sl
 800719a:	bfa8      	it	ge
 800719c:	4633      	movge	r3, r6
 800719e:	42bb      	cmp	r3, r7
 80071a0:	bfa8      	it	ge
 80071a2:	463b      	movge	r3, r7
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	bfc2      	ittt	gt
 80071a8:	1af6      	subgt	r6, r6, r3
 80071aa:	1aff      	subgt	r7, r7, r3
 80071ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 80071b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	dd17      	ble.n	80071e6 <_strtod_l+0x736>
 80071b6:	4659      	mov	r1, fp
 80071b8:	461a      	mov	r2, r3
 80071ba:	4620      	mov	r0, r4
 80071bc:	f001 fa82 	bl	80086c4 <__pow5mult>
 80071c0:	4683      	mov	fp, r0
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f43f aeb8 	beq.w	8006f38 <_strtod_l+0x488>
 80071c8:	4601      	mov	r1, r0
 80071ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80071cc:	4620      	mov	r0, r4
 80071ce:	f001 f9cf 	bl	8008570 <__multiply>
 80071d2:	900b      	str	r0, [sp, #44]	; 0x2c
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f43f aeaf 	beq.w	8006f38 <_strtod_l+0x488>
 80071da:	9916      	ldr	r1, [sp, #88]	; 0x58
 80071dc:	4620      	mov	r0, r4
 80071de:	f001 f8b1 	bl	8008344 <_Bfree>
 80071e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071e4:	9316      	str	r3, [sp, #88]	; 0x58
 80071e6:	2e00      	cmp	r6, #0
 80071e8:	f300 808c 	bgt.w	8007304 <_strtod_l+0x854>
 80071ec:	9b08      	ldr	r3, [sp, #32]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	dd08      	ble.n	8007204 <_strtod_l+0x754>
 80071f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071f4:	9905      	ldr	r1, [sp, #20]
 80071f6:	4620      	mov	r0, r4
 80071f8:	f001 fa64 	bl	80086c4 <__pow5mult>
 80071fc:	9005      	str	r0, [sp, #20]
 80071fe:	2800      	cmp	r0, #0
 8007200:	f43f ae9a 	beq.w	8006f38 <_strtod_l+0x488>
 8007204:	2f00      	cmp	r7, #0
 8007206:	dd08      	ble.n	800721a <_strtod_l+0x76a>
 8007208:	9905      	ldr	r1, [sp, #20]
 800720a:	463a      	mov	r2, r7
 800720c:	4620      	mov	r0, r4
 800720e:	f001 fab3 	bl	8008778 <__lshift>
 8007212:	9005      	str	r0, [sp, #20]
 8007214:	2800      	cmp	r0, #0
 8007216:	f43f ae8f 	beq.w	8006f38 <_strtod_l+0x488>
 800721a:	f1ba 0f00 	cmp.w	sl, #0
 800721e:	dd08      	ble.n	8007232 <_strtod_l+0x782>
 8007220:	4659      	mov	r1, fp
 8007222:	4652      	mov	r2, sl
 8007224:	4620      	mov	r0, r4
 8007226:	f001 faa7 	bl	8008778 <__lshift>
 800722a:	4683      	mov	fp, r0
 800722c:	2800      	cmp	r0, #0
 800722e:	f43f ae83 	beq.w	8006f38 <_strtod_l+0x488>
 8007232:	9a05      	ldr	r2, [sp, #20]
 8007234:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007236:	4620      	mov	r0, r4
 8007238:	f001 fb26 	bl	8008888 <__mdiff>
 800723c:	4605      	mov	r5, r0
 800723e:	2800      	cmp	r0, #0
 8007240:	f43f ae7a 	beq.w	8006f38 <_strtod_l+0x488>
 8007244:	68c3      	ldr	r3, [r0, #12]
 8007246:	930b      	str	r3, [sp, #44]	; 0x2c
 8007248:	2300      	movs	r3, #0
 800724a:	60c3      	str	r3, [r0, #12]
 800724c:	4659      	mov	r1, fp
 800724e:	f001 faff 	bl	8008850 <__mcmp>
 8007252:	2800      	cmp	r0, #0
 8007254:	da60      	bge.n	8007318 <_strtod_l+0x868>
 8007256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007258:	ea53 0308 	orrs.w	r3, r3, r8
 800725c:	f040 8084 	bne.w	8007368 <_strtod_l+0x8b8>
 8007260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007264:	2b00      	cmp	r3, #0
 8007266:	d17f      	bne.n	8007368 <_strtod_l+0x8b8>
 8007268:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800726c:	0d1b      	lsrs	r3, r3, #20
 800726e:	051b      	lsls	r3, r3, #20
 8007270:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007274:	d978      	bls.n	8007368 <_strtod_l+0x8b8>
 8007276:	696b      	ldr	r3, [r5, #20]
 8007278:	b913      	cbnz	r3, 8007280 <_strtod_l+0x7d0>
 800727a:	692b      	ldr	r3, [r5, #16]
 800727c:	2b01      	cmp	r3, #1
 800727e:	dd73      	ble.n	8007368 <_strtod_l+0x8b8>
 8007280:	4629      	mov	r1, r5
 8007282:	2201      	movs	r2, #1
 8007284:	4620      	mov	r0, r4
 8007286:	f001 fa77 	bl	8008778 <__lshift>
 800728a:	4659      	mov	r1, fp
 800728c:	4605      	mov	r5, r0
 800728e:	f001 fadf 	bl	8008850 <__mcmp>
 8007292:	2800      	cmp	r0, #0
 8007294:	dd68      	ble.n	8007368 <_strtod_l+0x8b8>
 8007296:	9904      	ldr	r1, [sp, #16]
 8007298:	4a54      	ldr	r2, [pc, #336]	; (80073ec <_strtod_l+0x93c>)
 800729a:	464b      	mov	r3, r9
 800729c:	2900      	cmp	r1, #0
 800729e:	f000 8084 	beq.w	80073aa <_strtod_l+0x8fa>
 80072a2:	ea02 0109 	and.w	r1, r2, r9
 80072a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80072aa:	dc7e      	bgt.n	80073aa <_strtod_l+0x8fa>
 80072ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80072b0:	f77f aeb3 	ble.w	800701a <_strtod_l+0x56a>
 80072b4:	4b4e      	ldr	r3, [pc, #312]	; (80073f0 <_strtod_l+0x940>)
 80072b6:	4640      	mov	r0, r8
 80072b8:	4649      	mov	r1, r9
 80072ba:	2200      	movs	r2, #0
 80072bc:	f7f9 f9b4 	bl	8000628 <__aeabi_dmul>
 80072c0:	4b4a      	ldr	r3, [pc, #296]	; (80073ec <_strtod_l+0x93c>)
 80072c2:	400b      	ands	r3, r1
 80072c4:	4680      	mov	r8, r0
 80072c6:	4689      	mov	r9, r1
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f ae3f 	bne.w	8006f4c <_strtod_l+0x49c>
 80072ce:	2322      	movs	r3, #34	; 0x22
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	e63b      	b.n	8006f4c <_strtod_l+0x49c>
 80072d4:	f04f 32ff 	mov.w	r2, #4294967295
 80072d8:	fa02 f303 	lsl.w	r3, r2, r3
 80072dc:	ea03 0808 	and.w	r8, r3, r8
 80072e0:	e6e8      	b.n	80070b4 <_strtod_l+0x604>
 80072e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80072e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80072ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80072ee:	36e2      	adds	r6, #226	; 0xe2
 80072f0:	fa01 f306 	lsl.w	r3, r1, r6
 80072f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80072f8:	e748      	b.n	800718c <_strtod_l+0x6dc>
 80072fa:	2100      	movs	r1, #0
 80072fc:	2301      	movs	r3, #1
 80072fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007302:	e743      	b.n	800718c <_strtod_l+0x6dc>
 8007304:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007306:	4632      	mov	r2, r6
 8007308:	4620      	mov	r0, r4
 800730a:	f001 fa35 	bl	8008778 <__lshift>
 800730e:	9016      	str	r0, [sp, #88]	; 0x58
 8007310:	2800      	cmp	r0, #0
 8007312:	f47f af6b 	bne.w	80071ec <_strtod_l+0x73c>
 8007316:	e60f      	b.n	8006f38 <_strtod_l+0x488>
 8007318:	46ca      	mov	sl, r9
 800731a:	d171      	bne.n	8007400 <_strtod_l+0x950>
 800731c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800731e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007322:	b352      	cbz	r2, 800737a <_strtod_l+0x8ca>
 8007324:	4a33      	ldr	r2, [pc, #204]	; (80073f4 <_strtod_l+0x944>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d12a      	bne.n	8007380 <_strtod_l+0x8d0>
 800732a:	9b04      	ldr	r3, [sp, #16]
 800732c:	4641      	mov	r1, r8
 800732e:	b1fb      	cbz	r3, 8007370 <_strtod_l+0x8c0>
 8007330:	4b2e      	ldr	r3, [pc, #184]	; (80073ec <_strtod_l+0x93c>)
 8007332:	ea09 0303 	and.w	r3, r9, r3
 8007336:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800733a:	f04f 32ff 	mov.w	r2, #4294967295
 800733e:	d81a      	bhi.n	8007376 <_strtod_l+0x8c6>
 8007340:	0d1b      	lsrs	r3, r3, #20
 8007342:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007346:	fa02 f303 	lsl.w	r3, r2, r3
 800734a:	4299      	cmp	r1, r3
 800734c:	d118      	bne.n	8007380 <_strtod_l+0x8d0>
 800734e:	4b2a      	ldr	r3, [pc, #168]	; (80073f8 <_strtod_l+0x948>)
 8007350:	459a      	cmp	sl, r3
 8007352:	d102      	bne.n	800735a <_strtod_l+0x8aa>
 8007354:	3101      	adds	r1, #1
 8007356:	f43f adef 	beq.w	8006f38 <_strtod_l+0x488>
 800735a:	4b24      	ldr	r3, [pc, #144]	; (80073ec <_strtod_l+0x93c>)
 800735c:	ea0a 0303 	and.w	r3, sl, r3
 8007360:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007364:	f04f 0800 	mov.w	r8, #0
 8007368:	9b04      	ldr	r3, [sp, #16]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1a2      	bne.n	80072b4 <_strtod_l+0x804>
 800736e:	e5ed      	b.n	8006f4c <_strtod_l+0x49c>
 8007370:	f04f 33ff 	mov.w	r3, #4294967295
 8007374:	e7e9      	b.n	800734a <_strtod_l+0x89a>
 8007376:	4613      	mov	r3, r2
 8007378:	e7e7      	b.n	800734a <_strtod_l+0x89a>
 800737a:	ea53 0308 	orrs.w	r3, r3, r8
 800737e:	d08a      	beq.n	8007296 <_strtod_l+0x7e6>
 8007380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007382:	b1e3      	cbz	r3, 80073be <_strtod_l+0x90e>
 8007384:	ea13 0f0a 	tst.w	r3, sl
 8007388:	d0ee      	beq.n	8007368 <_strtod_l+0x8b8>
 800738a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800738c:	9a04      	ldr	r2, [sp, #16]
 800738e:	4640      	mov	r0, r8
 8007390:	4649      	mov	r1, r9
 8007392:	b1c3      	cbz	r3, 80073c6 <_strtod_l+0x916>
 8007394:	f7ff fb70 	bl	8006a78 <sulp>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	ec51 0b18 	vmov	r0, r1, d8
 80073a0:	f7f8 ff8c 	bl	80002bc <__adddf3>
 80073a4:	4680      	mov	r8, r0
 80073a6:	4689      	mov	r9, r1
 80073a8:	e7de      	b.n	8007368 <_strtod_l+0x8b8>
 80073aa:	4013      	ands	r3, r2
 80073ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80073b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80073b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80073b8:	f04f 38ff 	mov.w	r8, #4294967295
 80073bc:	e7d4      	b.n	8007368 <_strtod_l+0x8b8>
 80073be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073c0:	ea13 0f08 	tst.w	r3, r8
 80073c4:	e7e0      	b.n	8007388 <_strtod_l+0x8d8>
 80073c6:	f7ff fb57 	bl	8006a78 <sulp>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	ec51 0b18 	vmov	r0, r1, d8
 80073d2:	f7f8 ff71 	bl	80002b8 <__aeabi_dsub>
 80073d6:	2200      	movs	r2, #0
 80073d8:	2300      	movs	r3, #0
 80073da:	4680      	mov	r8, r0
 80073dc:	4689      	mov	r9, r1
 80073de:	f7f9 fb8b 	bl	8000af8 <__aeabi_dcmpeq>
 80073e2:	2800      	cmp	r0, #0
 80073e4:	d0c0      	beq.n	8007368 <_strtod_l+0x8b8>
 80073e6:	e618      	b.n	800701a <_strtod_l+0x56a>
 80073e8:	fffffc02 	.word	0xfffffc02
 80073ec:	7ff00000 	.word	0x7ff00000
 80073f0:	39500000 	.word	0x39500000
 80073f4:	000fffff 	.word	0x000fffff
 80073f8:	7fefffff 	.word	0x7fefffff
 80073fc:	0800a620 	.word	0x0800a620
 8007400:	4659      	mov	r1, fp
 8007402:	4628      	mov	r0, r5
 8007404:	f001 fb94 	bl	8008b30 <__ratio>
 8007408:	ec57 6b10 	vmov	r6, r7, d0
 800740c:	ee10 0a10 	vmov	r0, s0
 8007410:	2200      	movs	r2, #0
 8007412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007416:	4639      	mov	r1, r7
 8007418:	f7f9 fb82 	bl	8000b20 <__aeabi_dcmple>
 800741c:	2800      	cmp	r0, #0
 800741e:	d071      	beq.n	8007504 <_strtod_l+0xa54>
 8007420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007422:	2b00      	cmp	r3, #0
 8007424:	d17c      	bne.n	8007520 <_strtod_l+0xa70>
 8007426:	f1b8 0f00 	cmp.w	r8, #0
 800742a:	d15a      	bne.n	80074e2 <_strtod_l+0xa32>
 800742c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007430:	2b00      	cmp	r3, #0
 8007432:	d15d      	bne.n	80074f0 <_strtod_l+0xa40>
 8007434:	4b90      	ldr	r3, [pc, #576]	; (8007678 <_strtod_l+0xbc8>)
 8007436:	2200      	movs	r2, #0
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f9 fb66 	bl	8000b0c <__aeabi_dcmplt>
 8007440:	2800      	cmp	r0, #0
 8007442:	d15c      	bne.n	80074fe <_strtod_l+0xa4e>
 8007444:	4630      	mov	r0, r6
 8007446:	4639      	mov	r1, r7
 8007448:	4b8c      	ldr	r3, [pc, #560]	; (800767c <_strtod_l+0xbcc>)
 800744a:	2200      	movs	r2, #0
 800744c:	f7f9 f8ec 	bl	8000628 <__aeabi_dmul>
 8007450:	4606      	mov	r6, r0
 8007452:	460f      	mov	r7, r1
 8007454:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007458:	9606      	str	r6, [sp, #24]
 800745a:	9307      	str	r3, [sp, #28]
 800745c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007460:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007464:	4b86      	ldr	r3, [pc, #536]	; (8007680 <_strtod_l+0xbd0>)
 8007466:	ea0a 0303 	and.w	r3, sl, r3
 800746a:	930d      	str	r3, [sp, #52]	; 0x34
 800746c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800746e:	4b85      	ldr	r3, [pc, #532]	; (8007684 <_strtod_l+0xbd4>)
 8007470:	429a      	cmp	r2, r3
 8007472:	f040 8090 	bne.w	8007596 <_strtod_l+0xae6>
 8007476:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800747a:	ec49 8b10 	vmov	d0, r8, r9
 800747e:	f001 fa8d 	bl	800899c <__ulp>
 8007482:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007486:	ec51 0b10 	vmov	r0, r1, d0
 800748a:	f7f9 f8cd 	bl	8000628 <__aeabi_dmul>
 800748e:	4642      	mov	r2, r8
 8007490:	464b      	mov	r3, r9
 8007492:	f7f8 ff13 	bl	80002bc <__adddf3>
 8007496:	460b      	mov	r3, r1
 8007498:	4979      	ldr	r1, [pc, #484]	; (8007680 <_strtod_l+0xbd0>)
 800749a:	4a7b      	ldr	r2, [pc, #492]	; (8007688 <_strtod_l+0xbd8>)
 800749c:	4019      	ands	r1, r3
 800749e:	4291      	cmp	r1, r2
 80074a0:	4680      	mov	r8, r0
 80074a2:	d944      	bls.n	800752e <_strtod_l+0xa7e>
 80074a4:	ee18 2a90 	vmov	r2, s17
 80074a8:	4b78      	ldr	r3, [pc, #480]	; (800768c <_strtod_l+0xbdc>)
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d104      	bne.n	80074b8 <_strtod_l+0xa08>
 80074ae:	ee18 3a10 	vmov	r3, s16
 80074b2:	3301      	adds	r3, #1
 80074b4:	f43f ad40 	beq.w	8006f38 <_strtod_l+0x488>
 80074b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800768c <_strtod_l+0xbdc>
 80074bc:	f04f 38ff 	mov.w	r8, #4294967295
 80074c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 ff3e 	bl	8008344 <_Bfree>
 80074c8:	9905      	ldr	r1, [sp, #20]
 80074ca:	4620      	mov	r0, r4
 80074cc:	f000 ff3a 	bl	8008344 <_Bfree>
 80074d0:	4659      	mov	r1, fp
 80074d2:	4620      	mov	r0, r4
 80074d4:	f000 ff36 	bl	8008344 <_Bfree>
 80074d8:	4629      	mov	r1, r5
 80074da:	4620      	mov	r0, r4
 80074dc:	f000 ff32 	bl	8008344 <_Bfree>
 80074e0:	e609      	b.n	80070f6 <_strtod_l+0x646>
 80074e2:	f1b8 0f01 	cmp.w	r8, #1
 80074e6:	d103      	bne.n	80074f0 <_strtod_l+0xa40>
 80074e8:	f1b9 0f00 	cmp.w	r9, #0
 80074ec:	f43f ad95 	beq.w	800701a <_strtod_l+0x56a>
 80074f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007648 <_strtod_l+0xb98>
 80074f4:	4f60      	ldr	r7, [pc, #384]	; (8007678 <_strtod_l+0xbc8>)
 80074f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80074fa:	2600      	movs	r6, #0
 80074fc:	e7ae      	b.n	800745c <_strtod_l+0x9ac>
 80074fe:	4f5f      	ldr	r7, [pc, #380]	; (800767c <_strtod_l+0xbcc>)
 8007500:	2600      	movs	r6, #0
 8007502:	e7a7      	b.n	8007454 <_strtod_l+0x9a4>
 8007504:	4b5d      	ldr	r3, [pc, #372]	; (800767c <_strtod_l+0xbcc>)
 8007506:	4630      	mov	r0, r6
 8007508:	4639      	mov	r1, r7
 800750a:	2200      	movs	r2, #0
 800750c:	f7f9 f88c 	bl	8000628 <__aeabi_dmul>
 8007510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007512:	4606      	mov	r6, r0
 8007514:	460f      	mov	r7, r1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d09c      	beq.n	8007454 <_strtod_l+0x9a4>
 800751a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800751e:	e79d      	b.n	800745c <_strtod_l+0x9ac>
 8007520:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007650 <_strtod_l+0xba0>
 8007524:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007528:	ec57 6b17 	vmov	r6, r7, d7
 800752c:	e796      	b.n	800745c <_strtod_l+0x9ac>
 800752e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	46ca      	mov	sl, r9
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1c2      	bne.n	80074c0 <_strtod_l+0xa10>
 800753a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800753e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007540:	0d1b      	lsrs	r3, r3, #20
 8007542:	051b      	lsls	r3, r3, #20
 8007544:	429a      	cmp	r2, r3
 8007546:	d1bb      	bne.n	80074c0 <_strtod_l+0xa10>
 8007548:	4630      	mov	r0, r6
 800754a:	4639      	mov	r1, r7
 800754c:	f7f9 fc1c 	bl	8000d88 <__aeabi_d2lz>
 8007550:	f7f9 f83c 	bl	80005cc <__aeabi_l2d>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	f7f8 feac 	bl	80002b8 <__aeabi_dsub>
 8007560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007562:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007566:	ea43 0308 	orr.w	r3, r3, r8
 800756a:	4313      	orrs	r3, r2
 800756c:	4606      	mov	r6, r0
 800756e:	460f      	mov	r7, r1
 8007570:	d054      	beq.n	800761c <_strtod_l+0xb6c>
 8007572:	a339      	add	r3, pc, #228	; (adr r3, 8007658 <_strtod_l+0xba8>)
 8007574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007578:	f7f9 fac8 	bl	8000b0c <__aeabi_dcmplt>
 800757c:	2800      	cmp	r0, #0
 800757e:	f47f ace5 	bne.w	8006f4c <_strtod_l+0x49c>
 8007582:	a337      	add	r3, pc, #220	; (adr r3, 8007660 <_strtod_l+0xbb0>)
 8007584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f9 fadc 	bl	8000b48 <__aeabi_dcmpgt>
 8007590:	2800      	cmp	r0, #0
 8007592:	d095      	beq.n	80074c0 <_strtod_l+0xa10>
 8007594:	e4da      	b.n	8006f4c <_strtod_l+0x49c>
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	b333      	cbz	r3, 80075e8 <_strtod_l+0xb38>
 800759a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800759c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80075a0:	d822      	bhi.n	80075e8 <_strtod_l+0xb38>
 80075a2:	a331      	add	r3, pc, #196	; (adr r3, 8007668 <_strtod_l+0xbb8>)
 80075a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a8:	4630      	mov	r0, r6
 80075aa:	4639      	mov	r1, r7
 80075ac:	f7f9 fab8 	bl	8000b20 <__aeabi_dcmple>
 80075b0:	b1a0      	cbz	r0, 80075dc <_strtod_l+0xb2c>
 80075b2:	4639      	mov	r1, r7
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7f9 fb0f 	bl	8000bd8 <__aeabi_d2uiz>
 80075ba:	2801      	cmp	r0, #1
 80075bc:	bf38      	it	cc
 80075be:	2001      	movcc	r0, #1
 80075c0:	f7f8 ffb8 	bl	8000534 <__aeabi_ui2d>
 80075c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075c6:	4606      	mov	r6, r0
 80075c8:	460f      	mov	r7, r1
 80075ca:	bb23      	cbnz	r3, 8007616 <_strtod_l+0xb66>
 80075cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075d0:	9010      	str	r0, [sp, #64]	; 0x40
 80075d2:	9311      	str	r3, [sp, #68]	; 0x44
 80075d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80075d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80075dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80075de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80075e0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80075e4:	1a9b      	subs	r3, r3, r2
 80075e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80075e8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80075ec:	eeb0 0a48 	vmov.f32	s0, s16
 80075f0:	eef0 0a68 	vmov.f32	s1, s17
 80075f4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80075f8:	f001 f9d0 	bl	800899c <__ulp>
 80075fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007600:	ec53 2b10 	vmov	r2, r3, d0
 8007604:	f7f9 f810 	bl	8000628 <__aeabi_dmul>
 8007608:	ec53 2b18 	vmov	r2, r3, d8
 800760c:	f7f8 fe56 	bl	80002bc <__adddf3>
 8007610:	4680      	mov	r8, r0
 8007612:	4689      	mov	r9, r1
 8007614:	e78d      	b.n	8007532 <_strtod_l+0xa82>
 8007616:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800761a:	e7db      	b.n	80075d4 <_strtod_l+0xb24>
 800761c:	a314      	add	r3, pc, #80	; (adr r3, 8007670 <_strtod_l+0xbc0>)
 800761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007622:	f7f9 fa73 	bl	8000b0c <__aeabi_dcmplt>
 8007626:	e7b3      	b.n	8007590 <_strtod_l+0xae0>
 8007628:	2300      	movs	r3, #0
 800762a:	930a      	str	r3, [sp, #40]	; 0x28
 800762c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800762e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	f7ff ba7c 	b.w	8006b2e <_strtod_l+0x7e>
 8007636:	2a65      	cmp	r2, #101	; 0x65
 8007638:	f43f ab75 	beq.w	8006d26 <_strtod_l+0x276>
 800763c:	2a45      	cmp	r2, #69	; 0x45
 800763e:	f43f ab72 	beq.w	8006d26 <_strtod_l+0x276>
 8007642:	2301      	movs	r3, #1
 8007644:	f7ff bbaa 	b.w	8006d9c <_strtod_l+0x2ec>
 8007648:	00000000 	.word	0x00000000
 800764c:	bff00000 	.word	0xbff00000
 8007650:	00000000 	.word	0x00000000
 8007654:	3ff00000 	.word	0x3ff00000
 8007658:	94a03595 	.word	0x94a03595
 800765c:	3fdfffff 	.word	0x3fdfffff
 8007660:	35afe535 	.word	0x35afe535
 8007664:	3fe00000 	.word	0x3fe00000
 8007668:	ffc00000 	.word	0xffc00000
 800766c:	41dfffff 	.word	0x41dfffff
 8007670:	94a03595 	.word	0x94a03595
 8007674:	3fcfffff 	.word	0x3fcfffff
 8007678:	3ff00000 	.word	0x3ff00000
 800767c:	3fe00000 	.word	0x3fe00000
 8007680:	7ff00000 	.word	0x7ff00000
 8007684:	7fe00000 	.word	0x7fe00000
 8007688:	7c9fffff 	.word	0x7c9fffff
 800768c:	7fefffff 	.word	0x7fefffff

08007690 <strtod>:
 8007690:	460a      	mov	r2, r1
 8007692:	4601      	mov	r1, r0
 8007694:	4802      	ldr	r0, [pc, #8]	; (80076a0 <strtod+0x10>)
 8007696:	4b03      	ldr	r3, [pc, #12]	; (80076a4 <strtod+0x14>)
 8007698:	6800      	ldr	r0, [r0, #0]
 800769a:	f7ff ba09 	b.w	8006ab0 <_strtod_l>
 800769e:	bf00      	nop
 80076a0:	20000210 	.word	0x20000210
 80076a4:	20000058 	.word	0x20000058

080076a8 <std>:
 80076a8:	2300      	movs	r3, #0
 80076aa:	b510      	push	{r4, lr}
 80076ac:	4604      	mov	r4, r0
 80076ae:	e9c0 3300 	strd	r3, r3, [r0]
 80076b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076b6:	6083      	str	r3, [r0, #8]
 80076b8:	8181      	strh	r1, [r0, #12]
 80076ba:	6643      	str	r3, [r0, #100]	; 0x64
 80076bc:	81c2      	strh	r2, [r0, #14]
 80076be:	6183      	str	r3, [r0, #24]
 80076c0:	4619      	mov	r1, r3
 80076c2:	2208      	movs	r2, #8
 80076c4:	305c      	adds	r0, #92	; 0x5c
 80076c6:	f000 f8f4 	bl	80078b2 <memset>
 80076ca:	4b0d      	ldr	r3, [pc, #52]	; (8007700 <std+0x58>)
 80076cc:	6263      	str	r3, [r4, #36]	; 0x24
 80076ce:	4b0d      	ldr	r3, [pc, #52]	; (8007704 <std+0x5c>)
 80076d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80076d2:	4b0d      	ldr	r3, [pc, #52]	; (8007708 <std+0x60>)
 80076d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80076d6:	4b0d      	ldr	r3, [pc, #52]	; (800770c <std+0x64>)
 80076d8:	6323      	str	r3, [r4, #48]	; 0x30
 80076da:	4b0d      	ldr	r3, [pc, #52]	; (8007710 <std+0x68>)
 80076dc:	6224      	str	r4, [r4, #32]
 80076de:	429c      	cmp	r4, r3
 80076e0:	d006      	beq.n	80076f0 <std+0x48>
 80076e2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80076e6:	4294      	cmp	r4, r2
 80076e8:	d002      	beq.n	80076f0 <std+0x48>
 80076ea:	33d0      	adds	r3, #208	; 0xd0
 80076ec:	429c      	cmp	r4, r3
 80076ee:	d105      	bne.n	80076fc <std+0x54>
 80076f0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076f8:	f000 b966 	b.w	80079c8 <__retarget_lock_init_recursive>
 80076fc:	bd10      	pop	{r4, pc}
 80076fe:	bf00      	nop
 8007700:	0800782d 	.word	0x0800782d
 8007704:	0800784f 	.word	0x0800784f
 8007708:	08007887 	.word	0x08007887
 800770c:	080078ab 	.word	0x080078ab
 8007710:	20000574 	.word	0x20000574

08007714 <stdio_exit_handler>:
 8007714:	4a02      	ldr	r2, [pc, #8]	; (8007720 <stdio_exit_handler+0xc>)
 8007716:	4903      	ldr	r1, [pc, #12]	; (8007724 <stdio_exit_handler+0x10>)
 8007718:	4803      	ldr	r0, [pc, #12]	; (8007728 <stdio_exit_handler+0x14>)
 800771a:	f000 b869 	b.w	80077f0 <_fwalk_sglue>
 800771e:	bf00      	nop
 8007720:	2000004c 	.word	0x2000004c
 8007724:	08008d45 	.word	0x08008d45
 8007728:	200001c4 	.word	0x200001c4

0800772c <cleanup_stdio>:
 800772c:	6841      	ldr	r1, [r0, #4]
 800772e:	4b0c      	ldr	r3, [pc, #48]	; (8007760 <cleanup_stdio+0x34>)
 8007730:	4299      	cmp	r1, r3
 8007732:	b510      	push	{r4, lr}
 8007734:	4604      	mov	r4, r0
 8007736:	d001      	beq.n	800773c <cleanup_stdio+0x10>
 8007738:	f001 fb04 	bl	8008d44 <_fflush_r>
 800773c:	68a1      	ldr	r1, [r4, #8]
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <cleanup_stdio+0x38>)
 8007740:	4299      	cmp	r1, r3
 8007742:	d002      	beq.n	800774a <cleanup_stdio+0x1e>
 8007744:	4620      	mov	r0, r4
 8007746:	f001 fafd 	bl	8008d44 <_fflush_r>
 800774a:	68e1      	ldr	r1, [r4, #12]
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <cleanup_stdio+0x3c>)
 800774e:	4299      	cmp	r1, r3
 8007750:	d004      	beq.n	800775c <cleanup_stdio+0x30>
 8007752:	4620      	mov	r0, r4
 8007754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007758:	f001 baf4 	b.w	8008d44 <_fflush_r>
 800775c:	bd10      	pop	{r4, pc}
 800775e:	bf00      	nop
 8007760:	20000574 	.word	0x20000574
 8007764:	200005dc 	.word	0x200005dc
 8007768:	20000644 	.word	0x20000644

0800776c <global_stdio_init.part.0>:
 800776c:	b510      	push	{r4, lr}
 800776e:	4b0b      	ldr	r3, [pc, #44]	; (800779c <global_stdio_init.part.0+0x30>)
 8007770:	4c0b      	ldr	r4, [pc, #44]	; (80077a0 <global_stdio_init.part.0+0x34>)
 8007772:	4a0c      	ldr	r2, [pc, #48]	; (80077a4 <global_stdio_init.part.0+0x38>)
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	4620      	mov	r0, r4
 8007778:	2200      	movs	r2, #0
 800777a:	2104      	movs	r1, #4
 800777c:	f7ff ff94 	bl	80076a8 <std>
 8007780:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007784:	2201      	movs	r2, #1
 8007786:	2109      	movs	r1, #9
 8007788:	f7ff ff8e 	bl	80076a8 <std>
 800778c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007790:	2202      	movs	r2, #2
 8007792:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007796:	2112      	movs	r1, #18
 8007798:	f7ff bf86 	b.w	80076a8 <std>
 800779c:	200006ac 	.word	0x200006ac
 80077a0:	20000574 	.word	0x20000574
 80077a4:	08007715 	.word	0x08007715

080077a8 <__sfp_lock_acquire>:
 80077a8:	4801      	ldr	r0, [pc, #4]	; (80077b0 <__sfp_lock_acquire+0x8>)
 80077aa:	f000 b90e 	b.w	80079ca <__retarget_lock_acquire_recursive>
 80077ae:	bf00      	nop
 80077b0:	200006b5 	.word	0x200006b5

080077b4 <__sfp_lock_release>:
 80077b4:	4801      	ldr	r0, [pc, #4]	; (80077bc <__sfp_lock_release+0x8>)
 80077b6:	f000 b909 	b.w	80079cc <__retarget_lock_release_recursive>
 80077ba:	bf00      	nop
 80077bc:	200006b5 	.word	0x200006b5

080077c0 <__sinit>:
 80077c0:	b510      	push	{r4, lr}
 80077c2:	4604      	mov	r4, r0
 80077c4:	f7ff fff0 	bl	80077a8 <__sfp_lock_acquire>
 80077c8:	6a23      	ldr	r3, [r4, #32]
 80077ca:	b11b      	cbz	r3, 80077d4 <__sinit+0x14>
 80077cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077d0:	f7ff bff0 	b.w	80077b4 <__sfp_lock_release>
 80077d4:	4b04      	ldr	r3, [pc, #16]	; (80077e8 <__sinit+0x28>)
 80077d6:	6223      	str	r3, [r4, #32]
 80077d8:	4b04      	ldr	r3, [pc, #16]	; (80077ec <__sinit+0x2c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1f5      	bne.n	80077cc <__sinit+0xc>
 80077e0:	f7ff ffc4 	bl	800776c <global_stdio_init.part.0>
 80077e4:	e7f2      	b.n	80077cc <__sinit+0xc>
 80077e6:	bf00      	nop
 80077e8:	0800772d 	.word	0x0800772d
 80077ec:	200006ac 	.word	0x200006ac

080077f0 <_fwalk_sglue>:
 80077f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	4607      	mov	r7, r0
 80077f6:	4688      	mov	r8, r1
 80077f8:	4614      	mov	r4, r2
 80077fa:	2600      	movs	r6, #0
 80077fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007800:	f1b9 0901 	subs.w	r9, r9, #1
 8007804:	d505      	bpl.n	8007812 <_fwalk_sglue+0x22>
 8007806:	6824      	ldr	r4, [r4, #0]
 8007808:	2c00      	cmp	r4, #0
 800780a:	d1f7      	bne.n	80077fc <_fwalk_sglue+0xc>
 800780c:	4630      	mov	r0, r6
 800780e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d907      	bls.n	8007828 <_fwalk_sglue+0x38>
 8007818:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800781c:	3301      	adds	r3, #1
 800781e:	d003      	beq.n	8007828 <_fwalk_sglue+0x38>
 8007820:	4629      	mov	r1, r5
 8007822:	4638      	mov	r0, r7
 8007824:	47c0      	blx	r8
 8007826:	4306      	orrs	r6, r0
 8007828:	3568      	adds	r5, #104	; 0x68
 800782a:	e7e9      	b.n	8007800 <_fwalk_sglue+0x10>

0800782c <__sread>:
 800782c:	b510      	push	{r4, lr}
 800782e:	460c      	mov	r4, r1
 8007830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007834:	f000 f87a 	bl	800792c <_read_r>
 8007838:	2800      	cmp	r0, #0
 800783a:	bfab      	itete	ge
 800783c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800783e:	89a3      	ldrhlt	r3, [r4, #12]
 8007840:	181b      	addge	r3, r3, r0
 8007842:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007846:	bfac      	ite	ge
 8007848:	6563      	strge	r3, [r4, #84]	; 0x54
 800784a:	81a3      	strhlt	r3, [r4, #12]
 800784c:	bd10      	pop	{r4, pc}

0800784e <__swrite>:
 800784e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007852:	461f      	mov	r7, r3
 8007854:	898b      	ldrh	r3, [r1, #12]
 8007856:	05db      	lsls	r3, r3, #23
 8007858:	4605      	mov	r5, r0
 800785a:	460c      	mov	r4, r1
 800785c:	4616      	mov	r6, r2
 800785e:	d505      	bpl.n	800786c <__swrite+0x1e>
 8007860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007864:	2302      	movs	r3, #2
 8007866:	2200      	movs	r2, #0
 8007868:	f000 f84e 	bl	8007908 <_lseek_r>
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007876:	81a3      	strh	r3, [r4, #12]
 8007878:	4632      	mov	r2, r6
 800787a:	463b      	mov	r3, r7
 800787c:	4628      	mov	r0, r5
 800787e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007882:	f000 b865 	b.w	8007950 <_write_r>

08007886 <__sseek>:
 8007886:	b510      	push	{r4, lr}
 8007888:	460c      	mov	r4, r1
 800788a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788e:	f000 f83b 	bl	8007908 <_lseek_r>
 8007892:	1c43      	adds	r3, r0, #1
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	bf15      	itete	ne
 8007898:	6560      	strne	r0, [r4, #84]	; 0x54
 800789a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800789e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078a2:	81a3      	strheq	r3, [r4, #12]
 80078a4:	bf18      	it	ne
 80078a6:	81a3      	strhne	r3, [r4, #12]
 80078a8:	bd10      	pop	{r4, pc}

080078aa <__sclose>:
 80078aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ae:	f000 b81b 	b.w	80078e8 <_close_r>

080078b2 <memset>:
 80078b2:	4402      	add	r2, r0
 80078b4:	4603      	mov	r3, r0
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d100      	bne.n	80078bc <memset+0xa>
 80078ba:	4770      	bx	lr
 80078bc:	f803 1b01 	strb.w	r1, [r3], #1
 80078c0:	e7f9      	b.n	80078b6 <memset+0x4>

080078c2 <strncmp>:
 80078c2:	b510      	push	{r4, lr}
 80078c4:	b16a      	cbz	r2, 80078e2 <strncmp+0x20>
 80078c6:	3901      	subs	r1, #1
 80078c8:	1884      	adds	r4, r0, r2
 80078ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d103      	bne.n	80078de <strncmp+0x1c>
 80078d6:	42a0      	cmp	r0, r4
 80078d8:	d001      	beq.n	80078de <strncmp+0x1c>
 80078da:	2a00      	cmp	r2, #0
 80078dc:	d1f5      	bne.n	80078ca <strncmp+0x8>
 80078de:	1ad0      	subs	r0, r2, r3
 80078e0:	bd10      	pop	{r4, pc}
 80078e2:	4610      	mov	r0, r2
 80078e4:	e7fc      	b.n	80078e0 <strncmp+0x1e>
	...

080078e8 <_close_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d06      	ldr	r5, [pc, #24]	; (8007904 <_close_r+0x1c>)
 80078ec:	2300      	movs	r3, #0
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	602b      	str	r3, [r5, #0]
 80078f4:	f7fb fe6f 	bl	80035d6 <_close>
 80078f8:	1c43      	adds	r3, r0, #1
 80078fa:	d102      	bne.n	8007902 <_close_r+0x1a>
 80078fc:	682b      	ldr	r3, [r5, #0]
 80078fe:	b103      	cbz	r3, 8007902 <_close_r+0x1a>
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	200006b0 	.word	0x200006b0

08007908 <_lseek_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	4d07      	ldr	r5, [pc, #28]	; (8007928 <_lseek_r+0x20>)
 800790c:	4604      	mov	r4, r0
 800790e:	4608      	mov	r0, r1
 8007910:	4611      	mov	r1, r2
 8007912:	2200      	movs	r2, #0
 8007914:	602a      	str	r2, [r5, #0]
 8007916:	461a      	mov	r2, r3
 8007918:	f7fb fe84 	bl	8003624 <_lseek>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_lseek_r+0x1e>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_lseek_r+0x1e>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	200006b0 	.word	0x200006b0

0800792c <_read_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d07      	ldr	r5, [pc, #28]	; (800794c <_read_r+0x20>)
 8007930:	4604      	mov	r4, r0
 8007932:	4608      	mov	r0, r1
 8007934:	4611      	mov	r1, r2
 8007936:	2200      	movs	r2, #0
 8007938:	602a      	str	r2, [r5, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	f7fb fe12 	bl	8003564 <_read>
 8007940:	1c43      	adds	r3, r0, #1
 8007942:	d102      	bne.n	800794a <_read_r+0x1e>
 8007944:	682b      	ldr	r3, [r5, #0]
 8007946:	b103      	cbz	r3, 800794a <_read_r+0x1e>
 8007948:	6023      	str	r3, [r4, #0]
 800794a:	bd38      	pop	{r3, r4, r5, pc}
 800794c:	200006b0 	.word	0x200006b0

08007950 <_write_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d07      	ldr	r5, [pc, #28]	; (8007970 <_write_r+0x20>)
 8007954:	4604      	mov	r4, r0
 8007956:	4608      	mov	r0, r1
 8007958:	4611      	mov	r1, r2
 800795a:	2200      	movs	r2, #0
 800795c:	602a      	str	r2, [r5, #0]
 800795e:	461a      	mov	r2, r3
 8007960:	f7fb fe1d 	bl	800359e <_write>
 8007964:	1c43      	adds	r3, r0, #1
 8007966:	d102      	bne.n	800796e <_write_r+0x1e>
 8007968:	682b      	ldr	r3, [r5, #0]
 800796a:	b103      	cbz	r3, 800796e <_write_r+0x1e>
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	bd38      	pop	{r3, r4, r5, pc}
 8007970:	200006b0 	.word	0x200006b0

08007974 <__errno>:
 8007974:	4b01      	ldr	r3, [pc, #4]	; (800797c <__errno+0x8>)
 8007976:	6818      	ldr	r0, [r3, #0]
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	20000210 	.word	0x20000210

08007980 <__libc_init_array>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	4d0d      	ldr	r5, [pc, #52]	; (80079b8 <__libc_init_array+0x38>)
 8007984:	4c0d      	ldr	r4, [pc, #52]	; (80079bc <__libc_init_array+0x3c>)
 8007986:	1b64      	subs	r4, r4, r5
 8007988:	10a4      	asrs	r4, r4, #2
 800798a:	2600      	movs	r6, #0
 800798c:	42a6      	cmp	r6, r4
 800798e:	d109      	bne.n	80079a4 <__libc_init_array+0x24>
 8007990:	4d0b      	ldr	r5, [pc, #44]	; (80079c0 <__libc_init_array+0x40>)
 8007992:	4c0c      	ldr	r4, [pc, #48]	; (80079c4 <__libc_init_array+0x44>)
 8007994:	f002 fdce 	bl	800a534 <_init>
 8007998:	1b64      	subs	r4, r4, r5
 800799a:	10a4      	asrs	r4, r4, #2
 800799c:	2600      	movs	r6, #0
 800799e:	42a6      	cmp	r6, r4
 80079a0:	d105      	bne.n	80079ae <__libc_init_array+0x2e>
 80079a2:	bd70      	pop	{r4, r5, r6, pc}
 80079a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079a8:	4798      	blx	r3
 80079aa:	3601      	adds	r6, #1
 80079ac:	e7ee      	b.n	800798c <__libc_init_array+0xc>
 80079ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b2:	4798      	blx	r3
 80079b4:	3601      	adds	r6, #1
 80079b6:	e7f2      	b.n	800799e <__libc_init_array+0x1e>
 80079b8:	0800a9e0 	.word	0x0800a9e0
 80079bc:	0800a9e0 	.word	0x0800a9e0
 80079c0:	0800a9e0 	.word	0x0800a9e0
 80079c4:	0800a9e4 	.word	0x0800a9e4

080079c8 <__retarget_lock_init_recursive>:
 80079c8:	4770      	bx	lr

080079ca <__retarget_lock_acquire_recursive>:
 80079ca:	4770      	bx	lr

080079cc <__retarget_lock_release_recursive>:
 80079cc:	4770      	bx	lr

080079ce <memcpy>:
 80079ce:	440a      	add	r2, r1
 80079d0:	4291      	cmp	r1, r2
 80079d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80079d6:	d100      	bne.n	80079da <memcpy+0xc>
 80079d8:	4770      	bx	lr
 80079da:	b510      	push	{r4, lr}
 80079dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079e4:	4291      	cmp	r1, r2
 80079e6:	d1f9      	bne.n	80079dc <memcpy+0xe>
 80079e8:	bd10      	pop	{r4, pc}
 80079ea:	0000      	movs	r0, r0
 80079ec:	0000      	movs	r0, r0
	...

080079f0 <nan>:
 80079f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80079f8 <nan+0x8>
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	00000000 	.word	0x00000000
 80079fc:	7ff80000 	.word	0x7ff80000

08007a00 <_free_r>:
 8007a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a02:	2900      	cmp	r1, #0
 8007a04:	d044      	beq.n	8007a90 <_free_r+0x90>
 8007a06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a0a:	9001      	str	r0, [sp, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a12:	bfb8      	it	lt
 8007a14:	18e4      	addlt	r4, r4, r3
 8007a16:	f000 fc49 	bl	80082ac <__malloc_lock>
 8007a1a:	4a1e      	ldr	r2, [pc, #120]	; (8007a94 <_free_r+0x94>)
 8007a1c:	9801      	ldr	r0, [sp, #4]
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	b933      	cbnz	r3, 8007a30 <_free_r+0x30>
 8007a22:	6063      	str	r3, [r4, #4]
 8007a24:	6014      	str	r4, [r2, #0]
 8007a26:	b003      	add	sp, #12
 8007a28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a2c:	f000 bc44 	b.w	80082b8 <__malloc_unlock>
 8007a30:	42a3      	cmp	r3, r4
 8007a32:	d908      	bls.n	8007a46 <_free_r+0x46>
 8007a34:	6825      	ldr	r5, [r4, #0]
 8007a36:	1961      	adds	r1, r4, r5
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	bf01      	itttt	eq
 8007a3c:	6819      	ldreq	r1, [r3, #0]
 8007a3e:	685b      	ldreq	r3, [r3, #4]
 8007a40:	1949      	addeq	r1, r1, r5
 8007a42:	6021      	streq	r1, [r4, #0]
 8007a44:	e7ed      	b.n	8007a22 <_free_r+0x22>
 8007a46:	461a      	mov	r2, r3
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	b10b      	cbz	r3, 8007a50 <_free_r+0x50>
 8007a4c:	42a3      	cmp	r3, r4
 8007a4e:	d9fa      	bls.n	8007a46 <_free_r+0x46>
 8007a50:	6811      	ldr	r1, [r2, #0]
 8007a52:	1855      	adds	r5, r2, r1
 8007a54:	42a5      	cmp	r5, r4
 8007a56:	d10b      	bne.n	8007a70 <_free_r+0x70>
 8007a58:	6824      	ldr	r4, [r4, #0]
 8007a5a:	4421      	add	r1, r4
 8007a5c:	1854      	adds	r4, r2, r1
 8007a5e:	42a3      	cmp	r3, r4
 8007a60:	6011      	str	r1, [r2, #0]
 8007a62:	d1e0      	bne.n	8007a26 <_free_r+0x26>
 8007a64:	681c      	ldr	r4, [r3, #0]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	6053      	str	r3, [r2, #4]
 8007a6a:	440c      	add	r4, r1
 8007a6c:	6014      	str	r4, [r2, #0]
 8007a6e:	e7da      	b.n	8007a26 <_free_r+0x26>
 8007a70:	d902      	bls.n	8007a78 <_free_r+0x78>
 8007a72:	230c      	movs	r3, #12
 8007a74:	6003      	str	r3, [r0, #0]
 8007a76:	e7d6      	b.n	8007a26 <_free_r+0x26>
 8007a78:	6825      	ldr	r5, [r4, #0]
 8007a7a:	1961      	adds	r1, r4, r5
 8007a7c:	428b      	cmp	r3, r1
 8007a7e:	bf04      	itt	eq
 8007a80:	6819      	ldreq	r1, [r3, #0]
 8007a82:	685b      	ldreq	r3, [r3, #4]
 8007a84:	6063      	str	r3, [r4, #4]
 8007a86:	bf04      	itt	eq
 8007a88:	1949      	addeq	r1, r1, r5
 8007a8a:	6021      	streq	r1, [r4, #0]
 8007a8c:	6054      	str	r4, [r2, #4]
 8007a8e:	e7ca      	b.n	8007a26 <_free_r+0x26>
 8007a90:	b003      	add	sp, #12
 8007a92:	bd30      	pop	{r4, r5, pc}
 8007a94:	200006b8 	.word	0x200006b8

08007a98 <rshift>:
 8007a98:	6903      	ldr	r3, [r0, #16]
 8007a9a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007a9e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007aa2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007aa6:	f100 0414 	add.w	r4, r0, #20
 8007aaa:	dd45      	ble.n	8007b38 <rshift+0xa0>
 8007aac:	f011 011f 	ands.w	r1, r1, #31
 8007ab0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007ab4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007ab8:	d10c      	bne.n	8007ad4 <rshift+0x3c>
 8007aba:	f100 0710 	add.w	r7, r0, #16
 8007abe:	4629      	mov	r1, r5
 8007ac0:	42b1      	cmp	r1, r6
 8007ac2:	d334      	bcc.n	8007b2e <rshift+0x96>
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	1eea      	subs	r2, r5, #3
 8007aca:	4296      	cmp	r6, r2
 8007acc:	bf38      	it	cc
 8007ace:	2300      	movcc	r3, #0
 8007ad0:	4423      	add	r3, r4
 8007ad2:	e015      	b.n	8007b00 <rshift+0x68>
 8007ad4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007ad8:	f1c1 0820 	rsb	r8, r1, #32
 8007adc:	40cf      	lsrs	r7, r1
 8007ade:	f105 0e04 	add.w	lr, r5, #4
 8007ae2:	46a1      	mov	r9, r4
 8007ae4:	4576      	cmp	r6, lr
 8007ae6:	46f4      	mov	ip, lr
 8007ae8:	d815      	bhi.n	8007b16 <rshift+0x7e>
 8007aea:	1a9a      	subs	r2, r3, r2
 8007aec:	0092      	lsls	r2, r2, #2
 8007aee:	3a04      	subs	r2, #4
 8007af0:	3501      	adds	r5, #1
 8007af2:	42ae      	cmp	r6, r5
 8007af4:	bf38      	it	cc
 8007af6:	2200      	movcc	r2, #0
 8007af8:	18a3      	adds	r3, r4, r2
 8007afa:	50a7      	str	r7, [r4, r2]
 8007afc:	b107      	cbz	r7, 8007b00 <rshift+0x68>
 8007afe:	3304      	adds	r3, #4
 8007b00:	1b1a      	subs	r2, r3, r4
 8007b02:	42a3      	cmp	r3, r4
 8007b04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007b08:	bf08      	it	eq
 8007b0a:	2300      	moveq	r3, #0
 8007b0c:	6102      	str	r2, [r0, #16]
 8007b0e:	bf08      	it	eq
 8007b10:	6143      	streq	r3, [r0, #20]
 8007b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b16:	f8dc c000 	ldr.w	ip, [ip]
 8007b1a:	fa0c fc08 	lsl.w	ip, ip, r8
 8007b1e:	ea4c 0707 	orr.w	r7, ip, r7
 8007b22:	f849 7b04 	str.w	r7, [r9], #4
 8007b26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007b2a:	40cf      	lsrs	r7, r1
 8007b2c:	e7da      	b.n	8007ae4 <rshift+0x4c>
 8007b2e:	f851 cb04 	ldr.w	ip, [r1], #4
 8007b32:	f847 cf04 	str.w	ip, [r7, #4]!
 8007b36:	e7c3      	b.n	8007ac0 <rshift+0x28>
 8007b38:	4623      	mov	r3, r4
 8007b3a:	e7e1      	b.n	8007b00 <rshift+0x68>

08007b3c <__hexdig_fun>:
 8007b3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007b40:	2b09      	cmp	r3, #9
 8007b42:	d802      	bhi.n	8007b4a <__hexdig_fun+0xe>
 8007b44:	3820      	subs	r0, #32
 8007b46:	b2c0      	uxtb	r0, r0
 8007b48:	4770      	bx	lr
 8007b4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007b4e:	2b05      	cmp	r3, #5
 8007b50:	d801      	bhi.n	8007b56 <__hexdig_fun+0x1a>
 8007b52:	3847      	subs	r0, #71	; 0x47
 8007b54:	e7f7      	b.n	8007b46 <__hexdig_fun+0xa>
 8007b56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007b5a:	2b05      	cmp	r3, #5
 8007b5c:	d801      	bhi.n	8007b62 <__hexdig_fun+0x26>
 8007b5e:	3827      	subs	r0, #39	; 0x27
 8007b60:	e7f1      	b.n	8007b46 <__hexdig_fun+0xa>
 8007b62:	2000      	movs	r0, #0
 8007b64:	4770      	bx	lr
	...

08007b68 <__gethex>:
 8007b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b6c:	4617      	mov	r7, r2
 8007b6e:	680a      	ldr	r2, [r1, #0]
 8007b70:	b085      	sub	sp, #20
 8007b72:	f102 0b02 	add.w	fp, r2, #2
 8007b76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007b7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007b7e:	4681      	mov	r9, r0
 8007b80:	468a      	mov	sl, r1
 8007b82:	9302      	str	r3, [sp, #8]
 8007b84:	32fe      	adds	r2, #254	; 0xfe
 8007b86:	eb02 030b 	add.w	r3, r2, fp
 8007b8a:	46d8      	mov	r8, fp
 8007b8c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	2830      	cmp	r0, #48	; 0x30
 8007b94:	d0f7      	beq.n	8007b86 <__gethex+0x1e>
 8007b96:	f7ff ffd1 	bl	8007b3c <__hexdig_fun>
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d138      	bne.n	8007c12 <__gethex+0xaa>
 8007ba0:	49a7      	ldr	r1, [pc, #668]	; (8007e40 <__gethex+0x2d8>)
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4640      	mov	r0, r8
 8007ba6:	f7ff fe8c 	bl	80078c2 <strncmp>
 8007baa:	4606      	mov	r6, r0
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d169      	bne.n	8007c84 <__gethex+0x11c>
 8007bb0:	f898 0001 	ldrb.w	r0, [r8, #1]
 8007bb4:	465d      	mov	r5, fp
 8007bb6:	f7ff ffc1 	bl	8007b3c <__hexdig_fun>
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d064      	beq.n	8007c88 <__gethex+0x120>
 8007bbe:	465a      	mov	r2, fp
 8007bc0:	7810      	ldrb	r0, [r2, #0]
 8007bc2:	2830      	cmp	r0, #48	; 0x30
 8007bc4:	4690      	mov	r8, r2
 8007bc6:	f102 0201 	add.w	r2, r2, #1
 8007bca:	d0f9      	beq.n	8007bc0 <__gethex+0x58>
 8007bcc:	f7ff ffb6 	bl	8007b3c <__hexdig_fun>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	fab0 f480 	clz	r4, r0
 8007bd6:	0964      	lsrs	r4, r4, #5
 8007bd8:	465e      	mov	r6, fp
 8007bda:	9301      	str	r3, [sp, #4]
 8007bdc:	4642      	mov	r2, r8
 8007bde:	4615      	mov	r5, r2
 8007be0:	3201      	adds	r2, #1
 8007be2:	7828      	ldrb	r0, [r5, #0]
 8007be4:	f7ff ffaa 	bl	8007b3c <__hexdig_fun>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d1f8      	bne.n	8007bde <__gethex+0x76>
 8007bec:	4994      	ldr	r1, [pc, #592]	; (8007e40 <__gethex+0x2d8>)
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	f7ff fe66 	bl	80078c2 <strncmp>
 8007bf6:	b978      	cbnz	r0, 8007c18 <__gethex+0xb0>
 8007bf8:	b946      	cbnz	r6, 8007c0c <__gethex+0xa4>
 8007bfa:	1c6e      	adds	r6, r5, #1
 8007bfc:	4632      	mov	r2, r6
 8007bfe:	4615      	mov	r5, r2
 8007c00:	3201      	adds	r2, #1
 8007c02:	7828      	ldrb	r0, [r5, #0]
 8007c04:	f7ff ff9a 	bl	8007b3c <__hexdig_fun>
 8007c08:	2800      	cmp	r0, #0
 8007c0a:	d1f8      	bne.n	8007bfe <__gethex+0x96>
 8007c0c:	1b73      	subs	r3, r6, r5
 8007c0e:	009e      	lsls	r6, r3, #2
 8007c10:	e004      	b.n	8007c1c <__gethex+0xb4>
 8007c12:	2400      	movs	r4, #0
 8007c14:	4626      	mov	r6, r4
 8007c16:	e7e1      	b.n	8007bdc <__gethex+0x74>
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	d1f7      	bne.n	8007c0c <__gethex+0xa4>
 8007c1c:	782b      	ldrb	r3, [r5, #0]
 8007c1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c22:	2b50      	cmp	r3, #80	; 0x50
 8007c24:	d13d      	bne.n	8007ca2 <__gethex+0x13a>
 8007c26:	786b      	ldrb	r3, [r5, #1]
 8007c28:	2b2b      	cmp	r3, #43	; 0x2b
 8007c2a:	d02f      	beq.n	8007c8c <__gethex+0x124>
 8007c2c:	2b2d      	cmp	r3, #45	; 0x2d
 8007c2e:	d031      	beq.n	8007c94 <__gethex+0x12c>
 8007c30:	1c69      	adds	r1, r5, #1
 8007c32:	f04f 0b00 	mov.w	fp, #0
 8007c36:	7808      	ldrb	r0, [r1, #0]
 8007c38:	f7ff ff80 	bl	8007b3c <__hexdig_fun>
 8007c3c:	1e42      	subs	r2, r0, #1
 8007c3e:	b2d2      	uxtb	r2, r2
 8007c40:	2a18      	cmp	r2, #24
 8007c42:	d82e      	bhi.n	8007ca2 <__gethex+0x13a>
 8007c44:	f1a0 0210 	sub.w	r2, r0, #16
 8007c48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007c4c:	f7ff ff76 	bl	8007b3c <__hexdig_fun>
 8007c50:	f100 3cff 	add.w	ip, r0, #4294967295
 8007c54:	fa5f fc8c 	uxtb.w	ip, ip
 8007c58:	f1bc 0f18 	cmp.w	ip, #24
 8007c5c:	d91d      	bls.n	8007c9a <__gethex+0x132>
 8007c5e:	f1bb 0f00 	cmp.w	fp, #0
 8007c62:	d000      	beq.n	8007c66 <__gethex+0xfe>
 8007c64:	4252      	negs	r2, r2
 8007c66:	4416      	add	r6, r2
 8007c68:	f8ca 1000 	str.w	r1, [sl]
 8007c6c:	b1dc      	cbz	r4, 8007ca6 <__gethex+0x13e>
 8007c6e:	9b01      	ldr	r3, [sp, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bf14      	ite	ne
 8007c74:	f04f 0800 	movne.w	r8, #0
 8007c78:	f04f 0806 	moveq.w	r8, #6
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	b005      	add	sp, #20
 8007c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c84:	4645      	mov	r5, r8
 8007c86:	4626      	mov	r6, r4
 8007c88:	2401      	movs	r4, #1
 8007c8a:	e7c7      	b.n	8007c1c <__gethex+0xb4>
 8007c8c:	f04f 0b00 	mov.w	fp, #0
 8007c90:	1ca9      	adds	r1, r5, #2
 8007c92:	e7d0      	b.n	8007c36 <__gethex+0xce>
 8007c94:	f04f 0b01 	mov.w	fp, #1
 8007c98:	e7fa      	b.n	8007c90 <__gethex+0x128>
 8007c9a:	230a      	movs	r3, #10
 8007c9c:	fb03 0002 	mla	r0, r3, r2, r0
 8007ca0:	e7d0      	b.n	8007c44 <__gethex+0xdc>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	e7e0      	b.n	8007c68 <__gethex+0x100>
 8007ca6:	eba5 0308 	sub.w	r3, r5, r8
 8007caa:	3b01      	subs	r3, #1
 8007cac:	4621      	mov	r1, r4
 8007cae:	2b07      	cmp	r3, #7
 8007cb0:	dc0a      	bgt.n	8007cc8 <__gethex+0x160>
 8007cb2:	4648      	mov	r0, r9
 8007cb4:	f000 fb06 	bl	80082c4 <_Balloc>
 8007cb8:	4604      	mov	r4, r0
 8007cba:	b940      	cbnz	r0, 8007cce <__gethex+0x166>
 8007cbc:	4b61      	ldr	r3, [pc, #388]	; (8007e44 <__gethex+0x2dc>)
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	21e4      	movs	r1, #228	; 0xe4
 8007cc2:	4861      	ldr	r0, [pc, #388]	; (8007e48 <__gethex+0x2e0>)
 8007cc4:	f001 f876 	bl	8008db4 <__assert_func>
 8007cc8:	3101      	adds	r1, #1
 8007cca:	105b      	asrs	r3, r3, #1
 8007ccc:	e7ef      	b.n	8007cae <__gethex+0x146>
 8007cce:	f100 0a14 	add.w	sl, r0, #20
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	495a      	ldr	r1, [pc, #360]	; (8007e40 <__gethex+0x2d8>)
 8007cd6:	f8cd a004 	str.w	sl, [sp, #4]
 8007cda:	469b      	mov	fp, r3
 8007cdc:	45a8      	cmp	r8, r5
 8007cde:	d342      	bcc.n	8007d66 <__gethex+0x1fe>
 8007ce0:	9801      	ldr	r0, [sp, #4]
 8007ce2:	f840 bb04 	str.w	fp, [r0], #4
 8007ce6:	eba0 000a 	sub.w	r0, r0, sl
 8007cea:	1080      	asrs	r0, r0, #2
 8007cec:	6120      	str	r0, [r4, #16]
 8007cee:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8007cf2:	4658      	mov	r0, fp
 8007cf4:	f000 fbd8 	bl	80084a8 <__hi0bits>
 8007cf8:	683d      	ldr	r5, [r7, #0]
 8007cfa:	eba8 0000 	sub.w	r0, r8, r0
 8007cfe:	42a8      	cmp	r0, r5
 8007d00:	dd59      	ble.n	8007db6 <__gethex+0x24e>
 8007d02:	eba0 0805 	sub.w	r8, r0, r5
 8007d06:	4641      	mov	r1, r8
 8007d08:	4620      	mov	r0, r4
 8007d0a:	f000 ff67 	bl	8008bdc <__any_on>
 8007d0e:	4683      	mov	fp, r0
 8007d10:	b1b8      	cbz	r0, 8007d42 <__gethex+0x1da>
 8007d12:	f108 33ff 	add.w	r3, r8, #4294967295
 8007d16:	1159      	asrs	r1, r3, #5
 8007d18:	f003 021f 	and.w	r2, r3, #31
 8007d1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007d20:	f04f 0b01 	mov.w	fp, #1
 8007d24:	fa0b f202 	lsl.w	r2, fp, r2
 8007d28:	420a      	tst	r2, r1
 8007d2a:	d00a      	beq.n	8007d42 <__gethex+0x1da>
 8007d2c:	455b      	cmp	r3, fp
 8007d2e:	dd06      	ble.n	8007d3e <__gethex+0x1d6>
 8007d30:	f1a8 0102 	sub.w	r1, r8, #2
 8007d34:	4620      	mov	r0, r4
 8007d36:	f000 ff51 	bl	8008bdc <__any_on>
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d138      	bne.n	8007db0 <__gethex+0x248>
 8007d3e:	f04f 0b02 	mov.w	fp, #2
 8007d42:	4641      	mov	r1, r8
 8007d44:	4620      	mov	r0, r4
 8007d46:	f7ff fea7 	bl	8007a98 <rshift>
 8007d4a:	4446      	add	r6, r8
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	42b3      	cmp	r3, r6
 8007d50:	da41      	bge.n	8007dd6 <__gethex+0x26e>
 8007d52:	4621      	mov	r1, r4
 8007d54:	4648      	mov	r0, r9
 8007d56:	f000 faf5 	bl	8008344 <_Bfree>
 8007d5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8007d64:	e78a      	b.n	8007c7c <__gethex+0x114>
 8007d66:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8007d6a:	2a2e      	cmp	r2, #46	; 0x2e
 8007d6c:	d014      	beq.n	8007d98 <__gethex+0x230>
 8007d6e:	2b20      	cmp	r3, #32
 8007d70:	d106      	bne.n	8007d80 <__gethex+0x218>
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	f843 bb04 	str.w	fp, [r3], #4
 8007d78:	f04f 0b00 	mov.w	fp, #0
 8007d7c:	9301      	str	r3, [sp, #4]
 8007d7e:	465b      	mov	r3, fp
 8007d80:	7828      	ldrb	r0, [r5, #0]
 8007d82:	9303      	str	r3, [sp, #12]
 8007d84:	f7ff feda 	bl	8007b3c <__hexdig_fun>
 8007d88:	9b03      	ldr	r3, [sp, #12]
 8007d8a:	f000 000f 	and.w	r0, r0, #15
 8007d8e:	4098      	lsls	r0, r3
 8007d90:	ea4b 0b00 	orr.w	fp, fp, r0
 8007d94:	3304      	adds	r3, #4
 8007d96:	e7a1      	b.n	8007cdc <__gethex+0x174>
 8007d98:	45a8      	cmp	r8, r5
 8007d9a:	d8e8      	bhi.n	8007d6e <__gethex+0x206>
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	4628      	mov	r0, r5
 8007da0:	9303      	str	r3, [sp, #12]
 8007da2:	f7ff fd8e 	bl	80078c2 <strncmp>
 8007da6:	4926      	ldr	r1, [pc, #152]	; (8007e40 <__gethex+0x2d8>)
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	2800      	cmp	r0, #0
 8007dac:	d1df      	bne.n	8007d6e <__gethex+0x206>
 8007dae:	e795      	b.n	8007cdc <__gethex+0x174>
 8007db0:	f04f 0b03 	mov.w	fp, #3
 8007db4:	e7c5      	b.n	8007d42 <__gethex+0x1da>
 8007db6:	da0b      	bge.n	8007dd0 <__gethex+0x268>
 8007db8:	eba5 0800 	sub.w	r8, r5, r0
 8007dbc:	4621      	mov	r1, r4
 8007dbe:	4642      	mov	r2, r8
 8007dc0:	4648      	mov	r0, r9
 8007dc2:	f000 fcd9 	bl	8008778 <__lshift>
 8007dc6:	eba6 0608 	sub.w	r6, r6, r8
 8007dca:	4604      	mov	r4, r0
 8007dcc:	f100 0a14 	add.w	sl, r0, #20
 8007dd0:	f04f 0b00 	mov.w	fp, #0
 8007dd4:	e7ba      	b.n	8007d4c <__gethex+0x1e4>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	42b3      	cmp	r3, r6
 8007dda:	dd73      	ble.n	8007ec4 <__gethex+0x35c>
 8007ddc:	1b9e      	subs	r6, r3, r6
 8007dde:	42b5      	cmp	r5, r6
 8007de0:	dc34      	bgt.n	8007e4c <__gethex+0x2e4>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b02      	cmp	r3, #2
 8007de6:	d023      	beq.n	8007e30 <__gethex+0x2c8>
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d025      	beq.n	8007e38 <__gethex+0x2d0>
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d115      	bne.n	8007e1c <__gethex+0x2b4>
 8007df0:	42b5      	cmp	r5, r6
 8007df2:	d113      	bne.n	8007e1c <__gethex+0x2b4>
 8007df4:	2d01      	cmp	r5, #1
 8007df6:	d10b      	bne.n	8007e10 <__gethex+0x2a8>
 8007df8:	9a02      	ldr	r2, [sp, #8]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6013      	str	r3, [r2, #0]
 8007dfe:	2301      	movs	r3, #1
 8007e00:	6123      	str	r3, [r4, #16]
 8007e02:	f8ca 3000 	str.w	r3, [sl]
 8007e06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e08:	f04f 0862 	mov.w	r8, #98	; 0x62
 8007e0c:	601c      	str	r4, [r3, #0]
 8007e0e:	e735      	b.n	8007c7c <__gethex+0x114>
 8007e10:	1e69      	subs	r1, r5, #1
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 fee2 	bl	8008bdc <__any_on>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	d1ed      	bne.n	8007df8 <__gethex+0x290>
 8007e1c:	4621      	mov	r1, r4
 8007e1e:	4648      	mov	r0, r9
 8007e20:	f000 fa90 	bl	8008344 <_Bfree>
 8007e24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e26:	2300      	movs	r3, #0
 8007e28:	6013      	str	r3, [r2, #0]
 8007e2a:	f04f 0850 	mov.w	r8, #80	; 0x50
 8007e2e:	e725      	b.n	8007c7c <__gethex+0x114>
 8007e30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f2      	bne.n	8007e1c <__gethex+0x2b4>
 8007e36:	e7df      	b.n	8007df8 <__gethex+0x290>
 8007e38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1dc      	bne.n	8007df8 <__gethex+0x290>
 8007e3e:	e7ed      	b.n	8007e1c <__gethex+0x2b4>
 8007e40:	0800a5e8 	.word	0x0800a5e8
 8007e44:	0800a650 	.word	0x0800a650
 8007e48:	0800a661 	.word	0x0800a661
 8007e4c:	f106 38ff 	add.w	r8, r6, #4294967295
 8007e50:	f1bb 0f00 	cmp.w	fp, #0
 8007e54:	d133      	bne.n	8007ebe <__gethex+0x356>
 8007e56:	f1b8 0f00 	cmp.w	r8, #0
 8007e5a:	d004      	beq.n	8007e66 <__gethex+0x2fe>
 8007e5c:	4641      	mov	r1, r8
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f000 febc 	bl	8008bdc <__any_on>
 8007e64:	4683      	mov	fp, r0
 8007e66:	ea4f 1268 	mov.w	r2, r8, asr #5
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007e70:	f008 081f 	and.w	r8, r8, #31
 8007e74:	fa03 f308 	lsl.w	r3, r3, r8
 8007e78:	4213      	tst	r3, r2
 8007e7a:	4631      	mov	r1, r6
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	bf18      	it	ne
 8007e80:	f04b 0b02 	orrne.w	fp, fp, #2
 8007e84:	1bad      	subs	r5, r5, r6
 8007e86:	f7ff fe07 	bl	8007a98 <rshift>
 8007e8a:	687e      	ldr	r6, [r7, #4]
 8007e8c:	f04f 0802 	mov.w	r8, #2
 8007e90:	f1bb 0f00 	cmp.w	fp, #0
 8007e94:	d04a      	beq.n	8007f2c <__gethex+0x3c4>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	d016      	beq.n	8007eca <__gethex+0x362>
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d018      	beq.n	8007ed2 <__gethex+0x36a>
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d109      	bne.n	8007eb8 <__gethex+0x350>
 8007ea4:	f01b 0f02 	tst.w	fp, #2
 8007ea8:	d006      	beq.n	8007eb8 <__gethex+0x350>
 8007eaa:	f8da 3000 	ldr.w	r3, [sl]
 8007eae:	ea4b 0b03 	orr.w	fp, fp, r3
 8007eb2:	f01b 0f01 	tst.w	fp, #1
 8007eb6:	d10f      	bne.n	8007ed8 <__gethex+0x370>
 8007eb8:	f048 0810 	orr.w	r8, r8, #16
 8007ebc:	e036      	b.n	8007f2c <__gethex+0x3c4>
 8007ebe:	f04f 0b01 	mov.w	fp, #1
 8007ec2:	e7d0      	b.n	8007e66 <__gethex+0x2fe>
 8007ec4:	f04f 0801 	mov.w	r8, #1
 8007ec8:	e7e2      	b.n	8007e90 <__gethex+0x328>
 8007eca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ecc:	f1c3 0301 	rsb	r3, r3, #1
 8007ed0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d0ef      	beq.n	8007eb8 <__gethex+0x350>
 8007ed8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007edc:	f104 0214 	add.w	r2, r4, #20
 8007ee0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8007ee4:	9301      	str	r3, [sp, #4]
 8007ee6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8007eea:	2300      	movs	r3, #0
 8007eec:	4694      	mov	ip, r2
 8007eee:	f852 1b04 	ldr.w	r1, [r2], #4
 8007ef2:	f1b1 3fff 	cmp.w	r1, #4294967295
 8007ef6:	d01e      	beq.n	8007f36 <__gethex+0x3ce>
 8007ef8:	3101      	adds	r1, #1
 8007efa:	f8cc 1000 	str.w	r1, [ip]
 8007efe:	f1b8 0f02 	cmp.w	r8, #2
 8007f02:	f104 0214 	add.w	r2, r4, #20
 8007f06:	d13d      	bne.n	8007f84 <__gethex+0x41c>
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	d10b      	bne.n	8007f28 <__gethex+0x3c0>
 8007f10:	1169      	asrs	r1, r5, #5
 8007f12:	2301      	movs	r3, #1
 8007f14:	f005 051f 	and.w	r5, r5, #31
 8007f18:	fa03 f505 	lsl.w	r5, r3, r5
 8007f1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f20:	421d      	tst	r5, r3
 8007f22:	bf18      	it	ne
 8007f24:	f04f 0801 	movne.w	r8, #1
 8007f28:	f048 0820 	orr.w	r8, r8, #32
 8007f2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f2e:	601c      	str	r4, [r3, #0]
 8007f30:	9b02      	ldr	r3, [sp, #8]
 8007f32:	601e      	str	r6, [r3, #0]
 8007f34:	e6a2      	b.n	8007c7c <__gethex+0x114>
 8007f36:	4290      	cmp	r0, r2
 8007f38:	f842 3c04 	str.w	r3, [r2, #-4]
 8007f3c:	d8d6      	bhi.n	8007eec <__gethex+0x384>
 8007f3e:	68a2      	ldr	r2, [r4, #8]
 8007f40:	4593      	cmp	fp, r2
 8007f42:	db17      	blt.n	8007f74 <__gethex+0x40c>
 8007f44:	6861      	ldr	r1, [r4, #4]
 8007f46:	4648      	mov	r0, r9
 8007f48:	3101      	adds	r1, #1
 8007f4a:	f000 f9bb 	bl	80082c4 <_Balloc>
 8007f4e:	4682      	mov	sl, r0
 8007f50:	b918      	cbnz	r0, 8007f5a <__gethex+0x3f2>
 8007f52:	4b1b      	ldr	r3, [pc, #108]	; (8007fc0 <__gethex+0x458>)
 8007f54:	4602      	mov	r2, r0
 8007f56:	2184      	movs	r1, #132	; 0x84
 8007f58:	e6b3      	b.n	8007cc2 <__gethex+0x15a>
 8007f5a:	6922      	ldr	r2, [r4, #16]
 8007f5c:	3202      	adds	r2, #2
 8007f5e:	f104 010c 	add.w	r1, r4, #12
 8007f62:	0092      	lsls	r2, r2, #2
 8007f64:	300c      	adds	r0, #12
 8007f66:	f7ff fd32 	bl	80079ce <memcpy>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4648      	mov	r0, r9
 8007f6e:	f000 f9e9 	bl	8008344 <_Bfree>
 8007f72:	4654      	mov	r4, sl
 8007f74:	6922      	ldr	r2, [r4, #16]
 8007f76:	1c51      	adds	r1, r2, #1
 8007f78:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007f7c:	6121      	str	r1, [r4, #16]
 8007f7e:	2101      	movs	r1, #1
 8007f80:	6151      	str	r1, [r2, #20]
 8007f82:	e7bc      	b.n	8007efe <__gethex+0x396>
 8007f84:	6921      	ldr	r1, [r4, #16]
 8007f86:	4559      	cmp	r1, fp
 8007f88:	dd0b      	ble.n	8007fa2 <__gethex+0x43a>
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	f7ff fd83 	bl	8007a98 <rshift>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	3601      	adds	r6, #1
 8007f96:	42b3      	cmp	r3, r6
 8007f98:	f6ff aedb 	blt.w	8007d52 <__gethex+0x1ea>
 8007f9c:	f04f 0801 	mov.w	r8, #1
 8007fa0:	e7c2      	b.n	8007f28 <__gethex+0x3c0>
 8007fa2:	f015 051f 	ands.w	r5, r5, #31
 8007fa6:	d0f9      	beq.n	8007f9c <__gethex+0x434>
 8007fa8:	9b01      	ldr	r3, [sp, #4]
 8007faa:	441a      	add	r2, r3
 8007fac:	f1c5 0520 	rsb	r5, r5, #32
 8007fb0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8007fb4:	f000 fa78 	bl	80084a8 <__hi0bits>
 8007fb8:	42a8      	cmp	r0, r5
 8007fba:	dbe6      	blt.n	8007f8a <__gethex+0x422>
 8007fbc:	e7ee      	b.n	8007f9c <__gethex+0x434>
 8007fbe:	bf00      	nop
 8007fc0:	0800a650 	.word	0x0800a650

08007fc4 <L_shift>:
 8007fc4:	f1c2 0208 	rsb	r2, r2, #8
 8007fc8:	0092      	lsls	r2, r2, #2
 8007fca:	b570      	push	{r4, r5, r6, lr}
 8007fcc:	f1c2 0620 	rsb	r6, r2, #32
 8007fd0:	6843      	ldr	r3, [r0, #4]
 8007fd2:	6804      	ldr	r4, [r0, #0]
 8007fd4:	fa03 f506 	lsl.w	r5, r3, r6
 8007fd8:	432c      	orrs	r4, r5
 8007fda:	40d3      	lsrs	r3, r2
 8007fdc:	6004      	str	r4, [r0, #0]
 8007fde:	f840 3f04 	str.w	r3, [r0, #4]!
 8007fe2:	4288      	cmp	r0, r1
 8007fe4:	d3f4      	bcc.n	8007fd0 <L_shift+0xc>
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}

08007fe8 <__match>:
 8007fe8:	b530      	push	{r4, r5, lr}
 8007fea:	6803      	ldr	r3, [r0, #0]
 8007fec:	3301      	adds	r3, #1
 8007fee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ff2:	b914      	cbnz	r4, 8007ffa <__match+0x12>
 8007ff4:	6003      	str	r3, [r0, #0]
 8007ff6:	2001      	movs	r0, #1
 8007ff8:	bd30      	pop	{r4, r5, pc}
 8007ffa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ffe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008002:	2d19      	cmp	r5, #25
 8008004:	bf98      	it	ls
 8008006:	3220      	addls	r2, #32
 8008008:	42a2      	cmp	r2, r4
 800800a:	d0f0      	beq.n	8007fee <__match+0x6>
 800800c:	2000      	movs	r0, #0
 800800e:	e7f3      	b.n	8007ff8 <__match+0x10>

08008010 <__hexnan>:
 8008010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008014:	680b      	ldr	r3, [r1, #0]
 8008016:	6801      	ldr	r1, [r0, #0]
 8008018:	115e      	asrs	r6, r3, #5
 800801a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800801e:	f013 031f 	ands.w	r3, r3, #31
 8008022:	b087      	sub	sp, #28
 8008024:	bf18      	it	ne
 8008026:	3604      	addne	r6, #4
 8008028:	2500      	movs	r5, #0
 800802a:	1f37      	subs	r7, r6, #4
 800802c:	4682      	mov	sl, r0
 800802e:	4690      	mov	r8, r2
 8008030:	9301      	str	r3, [sp, #4]
 8008032:	f846 5c04 	str.w	r5, [r6, #-4]
 8008036:	46b9      	mov	r9, r7
 8008038:	463c      	mov	r4, r7
 800803a:	9502      	str	r5, [sp, #8]
 800803c:	46ab      	mov	fp, r5
 800803e:	784a      	ldrb	r2, [r1, #1]
 8008040:	1c4b      	adds	r3, r1, #1
 8008042:	9303      	str	r3, [sp, #12]
 8008044:	b342      	cbz	r2, 8008098 <__hexnan+0x88>
 8008046:	4610      	mov	r0, r2
 8008048:	9105      	str	r1, [sp, #20]
 800804a:	9204      	str	r2, [sp, #16]
 800804c:	f7ff fd76 	bl	8007b3c <__hexdig_fun>
 8008050:	2800      	cmp	r0, #0
 8008052:	d14f      	bne.n	80080f4 <__hexnan+0xe4>
 8008054:	9a04      	ldr	r2, [sp, #16]
 8008056:	9905      	ldr	r1, [sp, #20]
 8008058:	2a20      	cmp	r2, #32
 800805a:	d818      	bhi.n	800808e <__hexnan+0x7e>
 800805c:	9b02      	ldr	r3, [sp, #8]
 800805e:	459b      	cmp	fp, r3
 8008060:	dd13      	ble.n	800808a <__hexnan+0x7a>
 8008062:	454c      	cmp	r4, r9
 8008064:	d206      	bcs.n	8008074 <__hexnan+0x64>
 8008066:	2d07      	cmp	r5, #7
 8008068:	dc04      	bgt.n	8008074 <__hexnan+0x64>
 800806a:	462a      	mov	r2, r5
 800806c:	4649      	mov	r1, r9
 800806e:	4620      	mov	r0, r4
 8008070:	f7ff ffa8 	bl	8007fc4 <L_shift>
 8008074:	4544      	cmp	r4, r8
 8008076:	d950      	bls.n	800811a <__hexnan+0x10a>
 8008078:	2300      	movs	r3, #0
 800807a:	f1a4 0904 	sub.w	r9, r4, #4
 800807e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008082:	f8cd b008 	str.w	fp, [sp, #8]
 8008086:	464c      	mov	r4, r9
 8008088:	461d      	mov	r5, r3
 800808a:	9903      	ldr	r1, [sp, #12]
 800808c:	e7d7      	b.n	800803e <__hexnan+0x2e>
 800808e:	2a29      	cmp	r2, #41	; 0x29
 8008090:	d155      	bne.n	800813e <__hexnan+0x12e>
 8008092:	3102      	adds	r1, #2
 8008094:	f8ca 1000 	str.w	r1, [sl]
 8008098:	f1bb 0f00 	cmp.w	fp, #0
 800809c:	d04f      	beq.n	800813e <__hexnan+0x12e>
 800809e:	454c      	cmp	r4, r9
 80080a0:	d206      	bcs.n	80080b0 <__hexnan+0xa0>
 80080a2:	2d07      	cmp	r5, #7
 80080a4:	dc04      	bgt.n	80080b0 <__hexnan+0xa0>
 80080a6:	462a      	mov	r2, r5
 80080a8:	4649      	mov	r1, r9
 80080aa:	4620      	mov	r0, r4
 80080ac:	f7ff ff8a 	bl	8007fc4 <L_shift>
 80080b0:	4544      	cmp	r4, r8
 80080b2:	d934      	bls.n	800811e <__hexnan+0x10e>
 80080b4:	f1a8 0204 	sub.w	r2, r8, #4
 80080b8:	4623      	mov	r3, r4
 80080ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80080be:	f842 1f04 	str.w	r1, [r2, #4]!
 80080c2:	429f      	cmp	r7, r3
 80080c4:	d2f9      	bcs.n	80080ba <__hexnan+0xaa>
 80080c6:	1b3b      	subs	r3, r7, r4
 80080c8:	f023 0303 	bic.w	r3, r3, #3
 80080cc:	3304      	adds	r3, #4
 80080ce:	3e03      	subs	r6, #3
 80080d0:	3401      	adds	r4, #1
 80080d2:	42a6      	cmp	r6, r4
 80080d4:	bf38      	it	cc
 80080d6:	2304      	movcc	r3, #4
 80080d8:	4443      	add	r3, r8
 80080da:	2200      	movs	r2, #0
 80080dc:	f843 2b04 	str.w	r2, [r3], #4
 80080e0:	429f      	cmp	r7, r3
 80080e2:	d2fb      	bcs.n	80080dc <__hexnan+0xcc>
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	b91b      	cbnz	r3, 80080f0 <__hexnan+0xe0>
 80080e8:	4547      	cmp	r7, r8
 80080ea:	d126      	bne.n	800813a <__hexnan+0x12a>
 80080ec:	2301      	movs	r3, #1
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	2005      	movs	r0, #5
 80080f2:	e025      	b.n	8008140 <__hexnan+0x130>
 80080f4:	3501      	adds	r5, #1
 80080f6:	2d08      	cmp	r5, #8
 80080f8:	f10b 0b01 	add.w	fp, fp, #1
 80080fc:	dd06      	ble.n	800810c <__hexnan+0xfc>
 80080fe:	4544      	cmp	r4, r8
 8008100:	d9c3      	bls.n	800808a <__hexnan+0x7a>
 8008102:	2300      	movs	r3, #0
 8008104:	f844 3c04 	str.w	r3, [r4, #-4]
 8008108:	2501      	movs	r5, #1
 800810a:	3c04      	subs	r4, #4
 800810c:	6822      	ldr	r2, [r4, #0]
 800810e:	f000 000f 	and.w	r0, r0, #15
 8008112:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008116:	6020      	str	r0, [r4, #0]
 8008118:	e7b7      	b.n	800808a <__hexnan+0x7a>
 800811a:	2508      	movs	r5, #8
 800811c:	e7b5      	b.n	800808a <__hexnan+0x7a>
 800811e:	9b01      	ldr	r3, [sp, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d0df      	beq.n	80080e4 <__hexnan+0xd4>
 8008124:	f1c3 0320 	rsb	r3, r3, #32
 8008128:	f04f 32ff 	mov.w	r2, #4294967295
 800812c:	40da      	lsrs	r2, r3
 800812e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008132:	4013      	ands	r3, r2
 8008134:	f846 3c04 	str.w	r3, [r6, #-4]
 8008138:	e7d4      	b.n	80080e4 <__hexnan+0xd4>
 800813a:	3f04      	subs	r7, #4
 800813c:	e7d2      	b.n	80080e4 <__hexnan+0xd4>
 800813e:	2004      	movs	r0, #4
 8008140:	b007      	add	sp, #28
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008148 <sbrk_aligned>:
 8008148:	b570      	push	{r4, r5, r6, lr}
 800814a:	4e0e      	ldr	r6, [pc, #56]	; (8008184 <sbrk_aligned+0x3c>)
 800814c:	460c      	mov	r4, r1
 800814e:	6831      	ldr	r1, [r6, #0]
 8008150:	4605      	mov	r5, r0
 8008152:	b911      	cbnz	r1, 800815a <sbrk_aligned+0x12>
 8008154:	f000 fe1e 	bl	8008d94 <_sbrk_r>
 8008158:	6030      	str	r0, [r6, #0]
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f000 fe19 	bl	8008d94 <_sbrk_r>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d00a      	beq.n	800817c <sbrk_aligned+0x34>
 8008166:	1cc4      	adds	r4, r0, #3
 8008168:	f024 0403 	bic.w	r4, r4, #3
 800816c:	42a0      	cmp	r0, r4
 800816e:	d007      	beq.n	8008180 <sbrk_aligned+0x38>
 8008170:	1a21      	subs	r1, r4, r0
 8008172:	4628      	mov	r0, r5
 8008174:	f000 fe0e 	bl	8008d94 <_sbrk_r>
 8008178:	3001      	adds	r0, #1
 800817a:	d101      	bne.n	8008180 <sbrk_aligned+0x38>
 800817c:	f04f 34ff 	mov.w	r4, #4294967295
 8008180:	4620      	mov	r0, r4
 8008182:	bd70      	pop	{r4, r5, r6, pc}
 8008184:	200006bc 	.word	0x200006bc

08008188 <_malloc_r>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	1ccd      	adds	r5, r1, #3
 800818e:	f025 0503 	bic.w	r5, r5, #3
 8008192:	3508      	adds	r5, #8
 8008194:	2d0c      	cmp	r5, #12
 8008196:	bf38      	it	cc
 8008198:	250c      	movcc	r5, #12
 800819a:	2d00      	cmp	r5, #0
 800819c:	4607      	mov	r7, r0
 800819e:	db01      	blt.n	80081a4 <_malloc_r+0x1c>
 80081a0:	42a9      	cmp	r1, r5
 80081a2:	d905      	bls.n	80081b0 <_malloc_r+0x28>
 80081a4:	230c      	movs	r3, #12
 80081a6:	603b      	str	r3, [r7, #0]
 80081a8:	2600      	movs	r6, #0
 80081aa:	4630      	mov	r0, r6
 80081ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008284 <_malloc_r+0xfc>
 80081b4:	f000 f87a 	bl	80082ac <__malloc_lock>
 80081b8:	f8d8 3000 	ldr.w	r3, [r8]
 80081bc:	461c      	mov	r4, r3
 80081be:	bb5c      	cbnz	r4, 8008218 <_malloc_r+0x90>
 80081c0:	4629      	mov	r1, r5
 80081c2:	4638      	mov	r0, r7
 80081c4:	f7ff ffc0 	bl	8008148 <sbrk_aligned>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	4604      	mov	r4, r0
 80081cc:	d155      	bne.n	800827a <_malloc_r+0xf2>
 80081ce:	f8d8 4000 	ldr.w	r4, [r8]
 80081d2:	4626      	mov	r6, r4
 80081d4:	2e00      	cmp	r6, #0
 80081d6:	d145      	bne.n	8008264 <_malloc_r+0xdc>
 80081d8:	2c00      	cmp	r4, #0
 80081da:	d048      	beq.n	800826e <_malloc_r+0xe6>
 80081dc:	6823      	ldr	r3, [r4, #0]
 80081de:	4631      	mov	r1, r6
 80081e0:	4638      	mov	r0, r7
 80081e2:	eb04 0903 	add.w	r9, r4, r3
 80081e6:	f000 fdd5 	bl	8008d94 <_sbrk_r>
 80081ea:	4581      	cmp	r9, r0
 80081ec:	d13f      	bne.n	800826e <_malloc_r+0xe6>
 80081ee:	6821      	ldr	r1, [r4, #0]
 80081f0:	1a6d      	subs	r5, r5, r1
 80081f2:	4629      	mov	r1, r5
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff ffa7 	bl	8008148 <sbrk_aligned>
 80081fa:	3001      	adds	r0, #1
 80081fc:	d037      	beq.n	800826e <_malloc_r+0xe6>
 80081fe:	6823      	ldr	r3, [r4, #0]
 8008200:	442b      	add	r3, r5
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	f8d8 3000 	ldr.w	r3, [r8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d038      	beq.n	800827e <_malloc_r+0xf6>
 800820c:	685a      	ldr	r2, [r3, #4]
 800820e:	42a2      	cmp	r2, r4
 8008210:	d12b      	bne.n	800826a <_malloc_r+0xe2>
 8008212:	2200      	movs	r2, #0
 8008214:	605a      	str	r2, [r3, #4]
 8008216:	e00f      	b.n	8008238 <_malloc_r+0xb0>
 8008218:	6822      	ldr	r2, [r4, #0]
 800821a:	1b52      	subs	r2, r2, r5
 800821c:	d41f      	bmi.n	800825e <_malloc_r+0xd6>
 800821e:	2a0b      	cmp	r2, #11
 8008220:	d917      	bls.n	8008252 <_malloc_r+0xca>
 8008222:	1961      	adds	r1, r4, r5
 8008224:	42a3      	cmp	r3, r4
 8008226:	6025      	str	r5, [r4, #0]
 8008228:	bf18      	it	ne
 800822a:	6059      	strne	r1, [r3, #4]
 800822c:	6863      	ldr	r3, [r4, #4]
 800822e:	bf08      	it	eq
 8008230:	f8c8 1000 	streq.w	r1, [r8]
 8008234:	5162      	str	r2, [r4, r5]
 8008236:	604b      	str	r3, [r1, #4]
 8008238:	4638      	mov	r0, r7
 800823a:	f104 060b 	add.w	r6, r4, #11
 800823e:	f000 f83b 	bl	80082b8 <__malloc_unlock>
 8008242:	f026 0607 	bic.w	r6, r6, #7
 8008246:	1d23      	adds	r3, r4, #4
 8008248:	1af2      	subs	r2, r6, r3
 800824a:	d0ae      	beq.n	80081aa <_malloc_r+0x22>
 800824c:	1b9b      	subs	r3, r3, r6
 800824e:	50a3      	str	r3, [r4, r2]
 8008250:	e7ab      	b.n	80081aa <_malloc_r+0x22>
 8008252:	42a3      	cmp	r3, r4
 8008254:	6862      	ldr	r2, [r4, #4]
 8008256:	d1dd      	bne.n	8008214 <_malloc_r+0x8c>
 8008258:	f8c8 2000 	str.w	r2, [r8]
 800825c:	e7ec      	b.n	8008238 <_malloc_r+0xb0>
 800825e:	4623      	mov	r3, r4
 8008260:	6864      	ldr	r4, [r4, #4]
 8008262:	e7ac      	b.n	80081be <_malloc_r+0x36>
 8008264:	4634      	mov	r4, r6
 8008266:	6876      	ldr	r6, [r6, #4]
 8008268:	e7b4      	b.n	80081d4 <_malloc_r+0x4c>
 800826a:	4613      	mov	r3, r2
 800826c:	e7cc      	b.n	8008208 <_malloc_r+0x80>
 800826e:	230c      	movs	r3, #12
 8008270:	603b      	str	r3, [r7, #0]
 8008272:	4638      	mov	r0, r7
 8008274:	f000 f820 	bl	80082b8 <__malloc_unlock>
 8008278:	e797      	b.n	80081aa <_malloc_r+0x22>
 800827a:	6025      	str	r5, [r4, #0]
 800827c:	e7dc      	b.n	8008238 <_malloc_r+0xb0>
 800827e:	605b      	str	r3, [r3, #4]
 8008280:	deff      	udf	#255	; 0xff
 8008282:	bf00      	nop
 8008284:	200006b8 	.word	0x200006b8

08008288 <__ascii_mbtowc>:
 8008288:	b082      	sub	sp, #8
 800828a:	b901      	cbnz	r1, 800828e <__ascii_mbtowc+0x6>
 800828c:	a901      	add	r1, sp, #4
 800828e:	b142      	cbz	r2, 80082a2 <__ascii_mbtowc+0x1a>
 8008290:	b14b      	cbz	r3, 80082a6 <__ascii_mbtowc+0x1e>
 8008292:	7813      	ldrb	r3, [r2, #0]
 8008294:	600b      	str	r3, [r1, #0]
 8008296:	7812      	ldrb	r2, [r2, #0]
 8008298:	1e10      	subs	r0, r2, #0
 800829a:	bf18      	it	ne
 800829c:	2001      	movne	r0, #1
 800829e:	b002      	add	sp, #8
 80082a0:	4770      	bx	lr
 80082a2:	4610      	mov	r0, r2
 80082a4:	e7fb      	b.n	800829e <__ascii_mbtowc+0x16>
 80082a6:	f06f 0001 	mvn.w	r0, #1
 80082aa:	e7f8      	b.n	800829e <__ascii_mbtowc+0x16>

080082ac <__malloc_lock>:
 80082ac:	4801      	ldr	r0, [pc, #4]	; (80082b4 <__malloc_lock+0x8>)
 80082ae:	f7ff bb8c 	b.w	80079ca <__retarget_lock_acquire_recursive>
 80082b2:	bf00      	nop
 80082b4:	200006b4 	.word	0x200006b4

080082b8 <__malloc_unlock>:
 80082b8:	4801      	ldr	r0, [pc, #4]	; (80082c0 <__malloc_unlock+0x8>)
 80082ba:	f7ff bb87 	b.w	80079cc <__retarget_lock_release_recursive>
 80082be:	bf00      	nop
 80082c0:	200006b4 	.word	0x200006b4

080082c4 <_Balloc>:
 80082c4:	b570      	push	{r4, r5, r6, lr}
 80082c6:	69c6      	ldr	r6, [r0, #28]
 80082c8:	4604      	mov	r4, r0
 80082ca:	460d      	mov	r5, r1
 80082cc:	b976      	cbnz	r6, 80082ec <_Balloc+0x28>
 80082ce:	2010      	movs	r0, #16
 80082d0:	f000 fda4 	bl	8008e1c <malloc>
 80082d4:	4602      	mov	r2, r0
 80082d6:	61e0      	str	r0, [r4, #28]
 80082d8:	b920      	cbnz	r0, 80082e4 <_Balloc+0x20>
 80082da:	4b18      	ldr	r3, [pc, #96]	; (800833c <_Balloc+0x78>)
 80082dc:	4818      	ldr	r0, [pc, #96]	; (8008340 <_Balloc+0x7c>)
 80082de:	216b      	movs	r1, #107	; 0x6b
 80082e0:	f000 fd68 	bl	8008db4 <__assert_func>
 80082e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082e8:	6006      	str	r6, [r0, #0]
 80082ea:	60c6      	str	r6, [r0, #12]
 80082ec:	69e6      	ldr	r6, [r4, #28]
 80082ee:	68f3      	ldr	r3, [r6, #12]
 80082f0:	b183      	cbz	r3, 8008314 <_Balloc+0x50>
 80082f2:	69e3      	ldr	r3, [r4, #28]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80082fa:	b9b8      	cbnz	r0, 800832c <_Balloc+0x68>
 80082fc:	2101      	movs	r1, #1
 80082fe:	fa01 f605 	lsl.w	r6, r1, r5
 8008302:	1d72      	adds	r2, r6, #5
 8008304:	0092      	lsls	r2, r2, #2
 8008306:	4620      	mov	r0, r4
 8008308:	f000 fd72 	bl	8008df0 <_calloc_r>
 800830c:	b160      	cbz	r0, 8008328 <_Balloc+0x64>
 800830e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008312:	e00e      	b.n	8008332 <_Balloc+0x6e>
 8008314:	2221      	movs	r2, #33	; 0x21
 8008316:	2104      	movs	r1, #4
 8008318:	4620      	mov	r0, r4
 800831a:	f000 fd69 	bl	8008df0 <_calloc_r>
 800831e:	69e3      	ldr	r3, [r4, #28]
 8008320:	60f0      	str	r0, [r6, #12]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1e4      	bne.n	80082f2 <_Balloc+0x2e>
 8008328:	2000      	movs	r0, #0
 800832a:	bd70      	pop	{r4, r5, r6, pc}
 800832c:	6802      	ldr	r2, [r0, #0]
 800832e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008332:	2300      	movs	r3, #0
 8008334:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008338:	e7f7      	b.n	800832a <_Balloc+0x66>
 800833a:	bf00      	nop
 800833c:	0800a6c1 	.word	0x0800a6c1
 8008340:	0800a6d8 	.word	0x0800a6d8

08008344 <_Bfree>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	69c6      	ldr	r6, [r0, #28]
 8008348:	4605      	mov	r5, r0
 800834a:	460c      	mov	r4, r1
 800834c:	b976      	cbnz	r6, 800836c <_Bfree+0x28>
 800834e:	2010      	movs	r0, #16
 8008350:	f000 fd64 	bl	8008e1c <malloc>
 8008354:	4602      	mov	r2, r0
 8008356:	61e8      	str	r0, [r5, #28]
 8008358:	b920      	cbnz	r0, 8008364 <_Bfree+0x20>
 800835a:	4b09      	ldr	r3, [pc, #36]	; (8008380 <_Bfree+0x3c>)
 800835c:	4809      	ldr	r0, [pc, #36]	; (8008384 <_Bfree+0x40>)
 800835e:	218f      	movs	r1, #143	; 0x8f
 8008360:	f000 fd28 	bl	8008db4 <__assert_func>
 8008364:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008368:	6006      	str	r6, [r0, #0]
 800836a:	60c6      	str	r6, [r0, #12]
 800836c:	b13c      	cbz	r4, 800837e <_Bfree+0x3a>
 800836e:	69eb      	ldr	r3, [r5, #28]
 8008370:	6862      	ldr	r2, [r4, #4]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008378:	6021      	str	r1, [r4, #0]
 800837a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800837e:	bd70      	pop	{r4, r5, r6, pc}
 8008380:	0800a6c1 	.word	0x0800a6c1
 8008384:	0800a6d8 	.word	0x0800a6d8

08008388 <__multadd>:
 8008388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800838c:	690d      	ldr	r5, [r1, #16]
 800838e:	4607      	mov	r7, r0
 8008390:	460c      	mov	r4, r1
 8008392:	461e      	mov	r6, r3
 8008394:	f101 0c14 	add.w	ip, r1, #20
 8008398:	2000      	movs	r0, #0
 800839a:	f8dc 3000 	ldr.w	r3, [ip]
 800839e:	b299      	uxth	r1, r3
 80083a0:	fb02 6101 	mla	r1, r2, r1, r6
 80083a4:	0c1e      	lsrs	r6, r3, #16
 80083a6:	0c0b      	lsrs	r3, r1, #16
 80083a8:	fb02 3306 	mla	r3, r2, r6, r3
 80083ac:	b289      	uxth	r1, r1
 80083ae:	3001      	adds	r0, #1
 80083b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80083b4:	4285      	cmp	r5, r0
 80083b6:	f84c 1b04 	str.w	r1, [ip], #4
 80083ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80083be:	dcec      	bgt.n	800839a <__multadd+0x12>
 80083c0:	b30e      	cbz	r6, 8008406 <__multadd+0x7e>
 80083c2:	68a3      	ldr	r3, [r4, #8]
 80083c4:	42ab      	cmp	r3, r5
 80083c6:	dc19      	bgt.n	80083fc <__multadd+0x74>
 80083c8:	6861      	ldr	r1, [r4, #4]
 80083ca:	4638      	mov	r0, r7
 80083cc:	3101      	adds	r1, #1
 80083ce:	f7ff ff79 	bl	80082c4 <_Balloc>
 80083d2:	4680      	mov	r8, r0
 80083d4:	b928      	cbnz	r0, 80083e2 <__multadd+0x5a>
 80083d6:	4602      	mov	r2, r0
 80083d8:	4b0c      	ldr	r3, [pc, #48]	; (800840c <__multadd+0x84>)
 80083da:	480d      	ldr	r0, [pc, #52]	; (8008410 <__multadd+0x88>)
 80083dc:	21ba      	movs	r1, #186	; 0xba
 80083de:	f000 fce9 	bl	8008db4 <__assert_func>
 80083e2:	6922      	ldr	r2, [r4, #16]
 80083e4:	3202      	adds	r2, #2
 80083e6:	f104 010c 	add.w	r1, r4, #12
 80083ea:	0092      	lsls	r2, r2, #2
 80083ec:	300c      	adds	r0, #12
 80083ee:	f7ff faee 	bl	80079ce <memcpy>
 80083f2:	4621      	mov	r1, r4
 80083f4:	4638      	mov	r0, r7
 80083f6:	f7ff ffa5 	bl	8008344 <_Bfree>
 80083fa:	4644      	mov	r4, r8
 80083fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008400:	3501      	adds	r5, #1
 8008402:	615e      	str	r6, [r3, #20]
 8008404:	6125      	str	r5, [r4, #16]
 8008406:	4620      	mov	r0, r4
 8008408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800840c:	0800a650 	.word	0x0800a650
 8008410:	0800a6d8 	.word	0x0800a6d8

08008414 <__s2b>:
 8008414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008418:	460c      	mov	r4, r1
 800841a:	4615      	mov	r5, r2
 800841c:	461f      	mov	r7, r3
 800841e:	2209      	movs	r2, #9
 8008420:	3308      	adds	r3, #8
 8008422:	4606      	mov	r6, r0
 8008424:	fb93 f3f2 	sdiv	r3, r3, r2
 8008428:	2100      	movs	r1, #0
 800842a:	2201      	movs	r2, #1
 800842c:	429a      	cmp	r2, r3
 800842e:	db09      	blt.n	8008444 <__s2b+0x30>
 8008430:	4630      	mov	r0, r6
 8008432:	f7ff ff47 	bl	80082c4 <_Balloc>
 8008436:	b940      	cbnz	r0, 800844a <__s2b+0x36>
 8008438:	4602      	mov	r2, r0
 800843a:	4b19      	ldr	r3, [pc, #100]	; (80084a0 <__s2b+0x8c>)
 800843c:	4819      	ldr	r0, [pc, #100]	; (80084a4 <__s2b+0x90>)
 800843e:	21d3      	movs	r1, #211	; 0xd3
 8008440:	f000 fcb8 	bl	8008db4 <__assert_func>
 8008444:	0052      	lsls	r2, r2, #1
 8008446:	3101      	adds	r1, #1
 8008448:	e7f0      	b.n	800842c <__s2b+0x18>
 800844a:	9b08      	ldr	r3, [sp, #32]
 800844c:	6143      	str	r3, [r0, #20]
 800844e:	2d09      	cmp	r5, #9
 8008450:	f04f 0301 	mov.w	r3, #1
 8008454:	6103      	str	r3, [r0, #16]
 8008456:	dd16      	ble.n	8008486 <__s2b+0x72>
 8008458:	f104 0909 	add.w	r9, r4, #9
 800845c:	46c8      	mov	r8, r9
 800845e:	442c      	add	r4, r5
 8008460:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008464:	4601      	mov	r1, r0
 8008466:	3b30      	subs	r3, #48	; 0x30
 8008468:	220a      	movs	r2, #10
 800846a:	4630      	mov	r0, r6
 800846c:	f7ff ff8c 	bl	8008388 <__multadd>
 8008470:	45a0      	cmp	r8, r4
 8008472:	d1f5      	bne.n	8008460 <__s2b+0x4c>
 8008474:	f1a5 0408 	sub.w	r4, r5, #8
 8008478:	444c      	add	r4, r9
 800847a:	1b2d      	subs	r5, r5, r4
 800847c:	1963      	adds	r3, r4, r5
 800847e:	42bb      	cmp	r3, r7
 8008480:	db04      	blt.n	800848c <__s2b+0x78>
 8008482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008486:	340a      	adds	r4, #10
 8008488:	2509      	movs	r5, #9
 800848a:	e7f6      	b.n	800847a <__s2b+0x66>
 800848c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008490:	4601      	mov	r1, r0
 8008492:	3b30      	subs	r3, #48	; 0x30
 8008494:	220a      	movs	r2, #10
 8008496:	4630      	mov	r0, r6
 8008498:	f7ff ff76 	bl	8008388 <__multadd>
 800849c:	e7ee      	b.n	800847c <__s2b+0x68>
 800849e:	bf00      	nop
 80084a0:	0800a650 	.word	0x0800a650
 80084a4:	0800a6d8 	.word	0x0800a6d8

080084a8 <__hi0bits>:
 80084a8:	0c03      	lsrs	r3, r0, #16
 80084aa:	041b      	lsls	r3, r3, #16
 80084ac:	b9d3      	cbnz	r3, 80084e4 <__hi0bits+0x3c>
 80084ae:	0400      	lsls	r0, r0, #16
 80084b0:	2310      	movs	r3, #16
 80084b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80084b6:	bf04      	itt	eq
 80084b8:	0200      	lsleq	r0, r0, #8
 80084ba:	3308      	addeq	r3, #8
 80084bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80084c0:	bf04      	itt	eq
 80084c2:	0100      	lsleq	r0, r0, #4
 80084c4:	3304      	addeq	r3, #4
 80084c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80084ca:	bf04      	itt	eq
 80084cc:	0080      	lsleq	r0, r0, #2
 80084ce:	3302      	addeq	r3, #2
 80084d0:	2800      	cmp	r0, #0
 80084d2:	db05      	blt.n	80084e0 <__hi0bits+0x38>
 80084d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80084d8:	f103 0301 	add.w	r3, r3, #1
 80084dc:	bf08      	it	eq
 80084de:	2320      	moveq	r3, #32
 80084e0:	4618      	mov	r0, r3
 80084e2:	4770      	bx	lr
 80084e4:	2300      	movs	r3, #0
 80084e6:	e7e4      	b.n	80084b2 <__hi0bits+0xa>

080084e8 <__lo0bits>:
 80084e8:	6803      	ldr	r3, [r0, #0]
 80084ea:	f013 0207 	ands.w	r2, r3, #7
 80084ee:	d00c      	beq.n	800850a <__lo0bits+0x22>
 80084f0:	07d9      	lsls	r1, r3, #31
 80084f2:	d422      	bmi.n	800853a <__lo0bits+0x52>
 80084f4:	079a      	lsls	r2, r3, #30
 80084f6:	bf49      	itett	mi
 80084f8:	085b      	lsrmi	r3, r3, #1
 80084fa:	089b      	lsrpl	r3, r3, #2
 80084fc:	6003      	strmi	r3, [r0, #0]
 80084fe:	2201      	movmi	r2, #1
 8008500:	bf5c      	itt	pl
 8008502:	6003      	strpl	r3, [r0, #0]
 8008504:	2202      	movpl	r2, #2
 8008506:	4610      	mov	r0, r2
 8008508:	4770      	bx	lr
 800850a:	b299      	uxth	r1, r3
 800850c:	b909      	cbnz	r1, 8008512 <__lo0bits+0x2a>
 800850e:	0c1b      	lsrs	r3, r3, #16
 8008510:	2210      	movs	r2, #16
 8008512:	b2d9      	uxtb	r1, r3
 8008514:	b909      	cbnz	r1, 800851a <__lo0bits+0x32>
 8008516:	3208      	adds	r2, #8
 8008518:	0a1b      	lsrs	r3, r3, #8
 800851a:	0719      	lsls	r1, r3, #28
 800851c:	bf04      	itt	eq
 800851e:	091b      	lsreq	r3, r3, #4
 8008520:	3204      	addeq	r2, #4
 8008522:	0799      	lsls	r1, r3, #30
 8008524:	bf04      	itt	eq
 8008526:	089b      	lsreq	r3, r3, #2
 8008528:	3202      	addeq	r2, #2
 800852a:	07d9      	lsls	r1, r3, #31
 800852c:	d403      	bmi.n	8008536 <__lo0bits+0x4e>
 800852e:	085b      	lsrs	r3, r3, #1
 8008530:	f102 0201 	add.w	r2, r2, #1
 8008534:	d003      	beq.n	800853e <__lo0bits+0x56>
 8008536:	6003      	str	r3, [r0, #0]
 8008538:	e7e5      	b.n	8008506 <__lo0bits+0x1e>
 800853a:	2200      	movs	r2, #0
 800853c:	e7e3      	b.n	8008506 <__lo0bits+0x1e>
 800853e:	2220      	movs	r2, #32
 8008540:	e7e1      	b.n	8008506 <__lo0bits+0x1e>
	...

08008544 <__i2b>:
 8008544:	b510      	push	{r4, lr}
 8008546:	460c      	mov	r4, r1
 8008548:	2101      	movs	r1, #1
 800854a:	f7ff febb 	bl	80082c4 <_Balloc>
 800854e:	4602      	mov	r2, r0
 8008550:	b928      	cbnz	r0, 800855e <__i2b+0x1a>
 8008552:	4b05      	ldr	r3, [pc, #20]	; (8008568 <__i2b+0x24>)
 8008554:	4805      	ldr	r0, [pc, #20]	; (800856c <__i2b+0x28>)
 8008556:	f240 1145 	movw	r1, #325	; 0x145
 800855a:	f000 fc2b 	bl	8008db4 <__assert_func>
 800855e:	2301      	movs	r3, #1
 8008560:	6144      	str	r4, [r0, #20]
 8008562:	6103      	str	r3, [r0, #16]
 8008564:	bd10      	pop	{r4, pc}
 8008566:	bf00      	nop
 8008568:	0800a650 	.word	0x0800a650
 800856c:	0800a6d8 	.word	0x0800a6d8

08008570 <__multiply>:
 8008570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008574:	4691      	mov	r9, r2
 8008576:	690a      	ldr	r2, [r1, #16]
 8008578:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800857c:	429a      	cmp	r2, r3
 800857e:	bfb8      	it	lt
 8008580:	460b      	movlt	r3, r1
 8008582:	460c      	mov	r4, r1
 8008584:	bfbc      	itt	lt
 8008586:	464c      	movlt	r4, r9
 8008588:	4699      	movlt	r9, r3
 800858a:	6927      	ldr	r7, [r4, #16]
 800858c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008590:	68a3      	ldr	r3, [r4, #8]
 8008592:	6861      	ldr	r1, [r4, #4]
 8008594:	eb07 060a 	add.w	r6, r7, sl
 8008598:	42b3      	cmp	r3, r6
 800859a:	b085      	sub	sp, #20
 800859c:	bfb8      	it	lt
 800859e:	3101      	addlt	r1, #1
 80085a0:	f7ff fe90 	bl	80082c4 <_Balloc>
 80085a4:	b930      	cbnz	r0, 80085b4 <__multiply+0x44>
 80085a6:	4602      	mov	r2, r0
 80085a8:	4b44      	ldr	r3, [pc, #272]	; (80086bc <__multiply+0x14c>)
 80085aa:	4845      	ldr	r0, [pc, #276]	; (80086c0 <__multiply+0x150>)
 80085ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80085b0:	f000 fc00 	bl	8008db4 <__assert_func>
 80085b4:	f100 0514 	add.w	r5, r0, #20
 80085b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80085bc:	462b      	mov	r3, r5
 80085be:	2200      	movs	r2, #0
 80085c0:	4543      	cmp	r3, r8
 80085c2:	d321      	bcc.n	8008608 <__multiply+0x98>
 80085c4:	f104 0314 	add.w	r3, r4, #20
 80085c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80085cc:	f109 0314 	add.w	r3, r9, #20
 80085d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80085d4:	9202      	str	r2, [sp, #8]
 80085d6:	1b3a      	subs	r2, r7, r4
 80085d8:	3a15      	subs	r2, #21
 80085da:	f022 0203 	bic.w	r2, r2, #3
 80085de:	3204      	adds	r2, #4
 80085e0:	f104 0115 	add.w	r1, r4, #21
 80085e4:	428f      	cmp	r7, r1
 80085e6:	bf38      	it	cc
 80085e8:	2204      	movcc	r2, #4
 80085ea:	9201      	str	r2, [sp, #4]
 80085ec:	9a02      	ldr	r2, [sp, #8]
 80085ee:	9303      	str	r3, [sp, #12]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d80c      	bhi.n	800860e <__multiply+0x9e>
 80085f4:	2e00      	cmp	r6, #0
 80085f6:	dd03      	ble.n	8008600 <__multiply+0x90>
 80085f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d05b      	beq.n	80086b8 <__multiply+0x148>
 8008600:	6106      	str	r6, [r0, #16]
 8008602:	b005      	add	sp, #20
 8008604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008608:	f843 2b04 	str.w	r2, [r3], #4
 800860c:	e7d8      	b.n	80085c0 <__multiply+0x50>
 800860e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008612:	f1ba 0f00 	cmp.w	sl, #0
 8008616:	d024      	beq.n	8008662 <__multiply+0xf2>
 8008618:	f104 0e14 	add.w	lr, r4, #20
 800861c:	46a9      	mov	r9, r5
 800861e:	f04f 0c00 	mov.w	ip, #0
 8008622:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008626:	f8d9 1000 	ldr.w	r1, [r9]
 800862a:	fa1f fb82 	uxth.w	fp, r2
 800862e:	b289      	uxth	r1, r1
 8008630:	fb0a 110b 	mla	r1, sl, fp, r1
 8008634:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008638:	f8d9 2000 	ldr.w	r2, [r9]
 800863c:	4461      	add	r1, ip
 800863e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008642:	fb0a c20b 	mla	r2, sl, fp, ip
 8008646:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800864a:	b289      	uxth	r1, r1
 800864c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008650:	4577      	cmp	r7, lr
 8008652:	f849 1b04 	str.w	r1, [r9], #4
 8008656:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800865a:	d8e2      	bhi.n	8008622 <__multiply+0xb2>
 800865c:	9a01      	ldr	r2, [sp, #4]
 800865e:	f845 c002 	str.w	ip, [r5, r2]
 8008662:	9a03      	ldr	r2, [sp, #12]
 8008664:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008668:	3304      	adds	r3, #4
 800866a:	f1b9 0f00 	cmp.w	r9, #0
 800866e:	d021      	beq.n	80086b4 <__multiply+0x144>
 8008670:	6829      	ldr	r1, [r5, #0]
 8008672:	f104 0c14 	add.w	ip, r4, #20
 8008676:	46ae      	mov	lr, r5
 8008678:	f04f 0a00 	mov.w	sl, #0
 800867c:	f8bc b000 	ldrh.w	fp, [ip]
 8008680:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008684:	fb09 220b 	mla	r2, r9, fp, r2
 8008688:	4452      	add	r2, sl
 800868a:	b289      	uxth	r1, r1
 800868c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008690:	f84e 1b04 	str.w	r1, [lr], #4
 8008694:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008698:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800869c:	f8be 1000 	ldrh.w	r1, [lr]
 80086a0:	fb09 110a 	mla	r1, r9, sl, r1
 80086a4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80086a8:	4567      	cmp	r7, ip
 80086aa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80086ae:	d8e5      	bhi.n	800867c <__multiply+0x10c>
 80086b0:	9a01      	ldr	r2, [sp, #4]
 80086b2:	50a9      	str	r1, [r5, r2]
 80086b4:	3504      	adds	r5, #4
 80086b6:	e799      	b.n	80085ec <__multiply+0x7c>
 80086b8:	3e01      	subs	r6, #1
 80086ba:	e79b      	b.n	80085f4 <__multiply+0x84>
 80086bc:	0800a650 	.word	0x0800a650
 80086c0:	0800a6d8 	.word	0x0800a6d8

080086c4 <__pow5mult>:
 80086c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c8:	4615      	mov	r5, r2
 80086ca:	f012 0203 	ands.w	r2, r2, #3
 80086ce:	4606      	mov	r6, r0
 80086d0:	460f      	mov	r7, r1
 80086d2:	d007      	beq.n	80086e4 <__pow5mult+0x20>
 80086d4:	4c25      	ldr	r4, [pc, #148]	; (800876c <__pow5mult+0xa8>)
 80086d6:	3a01      	subs	r2, #1
 80086d8:	2300      	movs	r3, #0
 80086da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80086de:	f7ff fe53 	bl	8008388 <__multadd>
 80086e2:	4607      	mov	r7, r0
 80086e4:	10ad      	asrs	r5, r5, #2
 80086e6:	d03d      	beq.n	8008764 <__pow5mult+0xa0>
 80086e8:	69f4      	ldr	r4, [r6, #28]
 80086ea:	b97c      	cbnz	r4, 800870c <__pow5mult+0x48>
 80086ec:	2010      	movs	r0, #16
 80086ee:	f000 fb95 	bl	8008e1c <malloc>
 80086f2:	4602      	mov	r2, r0
 80086f4:	61f0      	str	r0, [r6, #28]
 80086f6:	b928      	cbnz	r0, 8008704 <__pow5mult+0x40>
 80086f8:	4b1d      	ldr	r3, [pc, #116]	; (8008770 <__pow5mult+0xac>)
 80086fa:	481e      	ldr	r0, [pc, #120]	; (8008774 <__pow5mult+0xb0>)
 80086fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008700:	f000 fb58 	bl	8008db4 <__assert_func>
 8008704:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008708:	6004      	str	r4, [r0, #0]
 800870a:	60c4      	str	r4, [r0, #12]
 800870c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008710:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008714:	b94c      	cbnz	r4, 800872a <__pow5mult+0x66>
 8008716:	f240 2171 	movw	r1, #625	; 0x271
 800871a:	4630      	mov	r0, r6
 800871c:	f7ff ff12 	bl	8008544 <__i2b>
 8008720:	2300      	movs	r3, #0
 8008722:	f8c8 0008 	str.w	r0, [r8, #8]
 8008726:	4604      	mov	r4, r0
 8008728:	6003      	str	r3, [r0, #0]
 800872a:	f04f 0900 	mov.w	r9, #0
 800872e:	07eb      	lsls	r3, r5, #31
 8008730:	d50a      	bpl.n	8008748 <__pow5mult+0x84>
 8008732:	4639      	mov	r1, r7
 8008734:	4622      	mov	r2, r4
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff ff1a 	bl	8008570 <__multiply>
 800873c:	4639      	mov	r1, r7
 800873e:	4680      	mov	r8, r0
 8008740:	4630      	mov	r0, r6
 8008742:	f7ff fdff 	bl	8008344 <_Bfree>
 8008746:	4647      	mov	r7, r8
 8008748:	106d      	asrs	r5, r5, #1
 800874a:	d00b      	beq.n	8008764 <__pow5mult+0xa0>
 800874c:	6820      	ldr	r0, [r4, #0]
 800874e:	b938      	cbnz	r0, 8008760 <__pow5mult+0x9c>
 8008750:	4622      	mov	r2, r4
 8008752:	4621      	mov	r1, r4
 8008754:	4630      	mov	r0, r6
 8008756:	f7ff ff0b 	bl	8008570 <__multiply>
 800875a:	6020      	str	r0, [r4, #0]
 800875c:	f8c0 9000 	str.w	r9, [r0]
 8008760:	4604      	mov	r4, r0
 8008762:	e7e4      	b.n	800872e <__pow5mult+0x6a>
 8008764:	4638      	mov	r0, r7
 8008766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800876a:	bf00      	nop
 800876c:	0800a828 	.word	0x0800a828
 8008770:	0800a6c1 	.word	0x0800a6c1
 8008774:	0800a6d8 	.word	0x0800a6d8

08008778 <__lshift>:
 8008778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800877c:	460c      	mov	r4, r1
 800877e:	6849      	ldr	r1, [r1, #4]
 8008780:	6923      	ldr	r3, [r4, #16]
 8008782:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008786:	68a3      	ldr	r3, [r4, #8]
 8008788:	4607      	mov	r7, r0
 800878a:	4691      	mov	r9, r2
 800878c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008790:	f108 0601 	add.w	r6, r8, #1
 8008794:	42b3      	cmp	r3, r6
 8008796:	db0b      	blt.n	80087b0 <__lshift+0x38>
 8008798:	4638      	mov	r0, r7
 800879a:	f7ff fd93 	bl	80082c4 <_Balloc>
 800879e:	4605      	mov	r5, r0
 80087a0:	b948      	cbnz	r0, 80087b6 <__lshift+0x3e>
 80087a2:	4602      	mov	r2, r0
 80087a4:	4b28      	ldr	r3, [pc, #160]	; (8008848 <__lshift+0xd0>)
 80087a6:	4829      	ldr	r0, [pc, #164]	; (800884c <__lshift+0xd4>)
 80087a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80087ac:	f000 fb02 	bl	8008db4 <__assert_func>
 80087b0:	3101      	adds	r1, #1
 80087b2:	005b      	lsls	r3, r3, #1
 80087b4:	e7ee      	b.n	8008794 <__lshift+0x1c>
 80087b6:	2300      	movs	r3, #0
 80087b8:	f100 0114 	add.w	r1, r0, #20
 80087bc:	f100 0210 	add.w	r2, r0, #16
 80087c0:	4618      	mov	r0, r3
 80087c2:	4553      	cmp	r3, sl
 80087c4:	db33      	blt.n	800882e <__lshift+0xb6>
 80087c6:	6920      	ldr	r0, [r4, #16]
 80087c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80087cc:	f104 0314 	add.w	r3, r4, #20
 80087d0:	f019 091f 	ands.w	r9, r9, #31
 80087d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80087d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80087dc:	d02b      	beq.n	8008836 <__lshift+0xbe>
 80087de:	f1c9 0e20 	rsb	lr, r9, #32
 80087e2:	468a      	mov	sl, r1
 80087e4:	2200      	movs	r2, #0
 80087e6:	6818      	ldr	r0, [r3, #0]
 80087e8:	fa00 f009 	lsl.w	r0, r0, r9
 80087ec:	4310      	orrs	r0, r2
 80087ee:	f84a 0b04 	str.w	r0, [sl], #4
 80087f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80087f6:	459c      	cmp	ip, r3
 80087f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80087fc:	d8f3      	bhi.n	80087e6 <__lshift+0x6e>
 80087fe:	ebac 0304 	sub.w	r3, ip, r4
 8008802:	3b15      	subs	r3, #21
 8008804:	f023 0303 	bic.w	r3, r3, #3
 8008808:	3304      	adds	r3, #4
 800880a:	f104 0015 	add.w	r0, r4, #21
 800880e:	4584      	cmp	ip, r0
 8008810:	bf38      	it	cc
 8008812:	2304      	movcc	r3, #4
 8008814:	50ca      	str	r2, [r1, r3]
 8008816:	b10a      	cbz	r2, 800881c <__lshift+0xa4>
 8008818:	f108 0602 	add.w	r6, r8, #2
 800881c:	3e01      	subs	r6, #1
 800881e:	4638      	mov	r0, r7
 8008820:	612e      	str	r6, [r5, #16]
 8008822:	4621      	mov	r1, r4
 8008824:	f7ff fd8e 	bl	8008344 <_Bfree>
 8008828:	4628      	mov	r0, r5
 800882a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008832:	3301      	adds	r3, #1
 8008834:	e7c5      	b.n	80087c2 <__lshift+0x4a>
 8008836:	3904      	subs	r1, #4
 8008838:	f853 2b04 	ldr.w	r2, [r3], #4
 800883c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008840:	459c      	cmp	ip, r3
 8008842:	d8f9      	bhi.n	8008838 <__lshift+0xc0>
 8008844:	e7ea      	b.n	800881c <__lshift+0xa4>
 8008846:	bf00      	nop
 8008848:	0800a650 	.word	0x0800a650
 800884c:	0800a6d8 	.word	0x0800a6d8

08008850 <__mcmp>:
 8008850:	b530      	push	{r4, r5, lr}
 8008852:	6902      	ldr	r2, [r0, #16]
 8008854:	690c      	ldr	r4, [r1, #16]
 8008856:	1b12      	subs	r2, r2, r4
 8008858:	d10e      	bne.n	8008878 <__mcmp+0x28>
 800885a:	f100 0314 	add.w	r3, r0, #20
 800885e:	3114      	adds	r1, #20
 8008860:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008864:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008868:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800886c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008870:	42a5      	cmp	r5, r4
 8008872:	d003      	beq.n	800887c <__mcmp+0x2c>
 8008874:	d305      	bcc.n	8008882 <__mcmp+0x32>
 8008876:	2201      	movs	r2, #1
 8008878:	4610      	mov	r0, r2
 800887a:	bd30      	pop	{r4, r5, pc}
 800887c:	4283      	cmp	r3, r0
 800887e:	d3f3      	bcc.n	8008868 <__mcmp+0x18>
 8008880:	e7fa      	b.n	8008878 <__mcmp+0x28>
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
 8008886:	e7f7      	b.n	8008878 <__mcmp+0x28>

08008888 <__mdiff>:
 8008888:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	460c      	mov	r4, r1
 800888e:	4606      	mov	r6, r0
 8008890:	4611      	mov	r1, r2
 8008892:	4620      	mov	r0, r4
 8008894:	4690      	mov	r8, r2
 8008896:	f7ff ffdb 	bl	8008850 <__mcmp>
 800889a:	1e05      	subs	r5, r0, #0
 800889c:	d110      	bne.n	80088c0 <__mdiff+0x38>
 800889e:	4629      	mov	r1, r5
 80088a0:	4630      	mov	r0, r6
 80088a2:	f7ff fd0f 	bl	80082c4 <_Balloc>
 80088a6:	b930      	cbnz	r0, 80088b6 <__mdiff+0x2e>
 80088a8:	4b3a      	ldr	r3, [pc, #232]	; (8008994 <__mdiff+0x10c>)
 80088aa:	4602      	mov	r2, r0
 80088ac:	f240 2137 	movw	r1, #567	; 0x237
 80088b0:	4839      	ldr	r0, [pc, #228]	; (8008998 <__mdiff+0x110>)
 80088b2:	f000 fa7f 	bl	8008db4 <__assert_func>
 80088b6:	2301      	movs	r3, #1
 80088b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80088bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c0:	bfa4      	itt	ge
 80088c2:	4643      	movge	r3, r8
 80088c4:	46a0      	movge	r8, r4
 80088c6:	4630      	mov	r0, r6
 80088c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80088cc:	bfa6      	itte	ge
 80088ce:	461c      	movge	r4, r3
 80088d0:	2500      	movge	r5, #0
 80088d2:	2501      	movlt	r5, #1
 80088d4:	f7ff fcf6 	bl	80082c4 <_Balloc>
 80088d8:	b920      	cbnz	r0, 80088e4 <__mdiff+0x5c>
 80088da:	4b2e      	ldr	r3, [pc, #184]	; (8008994 <__mdiff+0x10c>)
 80088dc:	4602      	mov	r2, r0
 80088de:	f240 2145 	movw	r1, #581	; 0x245
 80088e2:	e7e5      	b.n	80088b0 <__mdiff+0x28>
 80088e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80088e8:	6926      	ldr	r6, [r4, #16]
 80088ea:	60c5      	str	r5, [r0, #12]
 80088ec:	f104 0914 	add.w	r9, r4, #20
 80088f0:	f108 0514 	add.w	r5, r8, #20
 80088f4:	f100 0e14 	add.w	lr, r0, #20
 80088f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80088fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008900:	f108 0210 	add.w	r2, r8, #16
 8008904:	46f2      	mov	sl, lr
 8008906:	2100      	movs	r1, #0
 8008908:	f859 3b04 	ldr.w	r3, [r9], #4
 800890c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008910:	fa11 f88b 	uxtah	r8, r1, fp
 8008914:	b299      	uxth	r1, r3
 8008916:	0c1b      	lsrs	r3, r3, #16
 8008918:	eba8 0801 	sub.w	r8, r8, r1
 800891c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008920:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008924:	fa1f f888 	uxth.w	r8, r8
 8008928:	1419      	asrs	r1, r3, #16
 800892a:	454e      	cmp	r6, r9
 800892c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008930:	f84a 3b04 	str.w	r3, [sl], #4
 8008934:	d8e8      	bhi.n	8008908 <__mdiff+0x80>
 8008936:	1b33      	subs	r3, r6, r4
 8008938:	3b15      	subs	r3, #21
 800893a:	f023 0303 	bic.w	r3, r3, #3
 800893e:	3304      	adds	r3, #4
 8008940:	3415      	adds	r4, #21
 8008942:	42a6      	cmp	r6, r4
 8008944:	bf38      	it	cc
 8008946:	2304      	movcc	r3, #4
 8008948:	441d      	add	r5, r3
 800894a:	4473      	add	r3, lr
 800894c:	469e      	mov	lr, r3
 800894e:	462e      	mov	r6, r5
 8008950:	4566      	cmp	r6, ip
 8008952:	d30e      	bcc.n	8008972 <__mdiff+0xea>
 8008954:	f10c 0203 	add.w	r2, ip, #3
 8008958:	1b52      	subs	r2, r2, r5
 800895a:	f022 0203 	bic.w	r2, r2, #3
 800895e:	3d03      	subs	r5, #3
 8008960:	45ac      	cmp	ip, r5
 8008962:	bf38      	it	cc
 8008964:	2200      	movcc	r2, #0
 8008966:	4413      	add	r3, r2
 8008968:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800896c:	b17a      	cbz	r2, 800898e <__mdiff+0x106>
 800896e:	6107      	str	r7, [r0, #16]
 8008970:	e7a4      	b.n	80088bc <__mdiff+0x34>
 8008972:	f856 8b04 	ldr.w	r8, [r6], #4
 8008976:	fa11 f288 	uxtah	r2, r1, r8
 800897a:	1414      	asrs	r4, r2, #16
 800897c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008980:	b292      	uxth	r2, r2
 8008982:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008986:	f84e 2b04 	str.w	r2, [lr], #4
 800898a:	1421      	asrs	r1, r4, #16
 800898c:	e7e0      	b.n	8008950 <__mdiff+0xc8>
 800898e:	3f01      	subs	r7, #1
 8008990:	e7ea      	b.n	8008968 <__mdiff+0xe0>
 8008992:	bf00      	nop
 8008994:	0800a650 	.word	0x0800a650
 8008998:	0800a6d8 	.word	0x0800a6d8

0800899c <__ulp>:
 800899c:	b082      	sub	sp, #8
 800899e:	ed8d 0b00 	vstr	d0, [sp]
 80089a2:	9a01      	ldr	r2, [sp, #4]
 80089a4:	4b0f      	ldr	r3, [pc, #60]	; (80089e4 <__ulp+0x48>)
 80089a6:	4013      	ands	r3, r2
 80089a8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	dc08      	bgt.n	80089c2 <__ulp+0x26>
 80089b0:	425b      	negs	r3, r3
 80089b2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80089b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80089ba:	da04      	bge.n	80089c6 <__ulp+0x2a>
 80089bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80089c0:	4113      	asrs	r3, r2
 80089c2:	2200      	movs	r2, #0
 80089c4:	e008      	b.n	80089d8 <__ulp+0x3c>
 80089c6:	f1a2 0314 	sub.w	r3, r2, #20
 80089ca:	2b1e      	cmp	r3, #30
 80089cc:	bfda      	itte	le
 80089ce:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80089d2:	40da      	lsrle	r2, r3
 80089d4:	2201      	movgt	r2, #1
 80089d6:	2300      	movs	r3, #0
 80089d8:	4619      	mov	r1, r3
 80089da:	4610      	mov	r0, r2
 80089dc:	ec41 0b10 	vmov	d0, r0, r1
 80089e0:	b002      	add	sp, #8
 80089e2:	4770      	bx	lr
 80089e4:	7ff00000 	.word	0x7ff00000

080089e8 <__b2d>:
 80089e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089ec:	6906      	ldr	r6, [r0, #16]
 80089ee:	f100 0814 	add.w	r8, r0, #20
 80089f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80089f6:	1f37      	subs	r7, r6, #4
 80089f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80089fc:	4610      	mov	r0, r2
 80089fe:	f7ff fd53 	bl	80084a8 <__hi0bits>
 8008a02:	f1c0 0320 	rsb	r3, r0, #32
 8008a06:	280a      	cmp	r0, #10
 8008a08:	600b      	str	r3, [r1, #0]
 8008a0a:	491b      	ldr	r1, [pc, #108]	; (8008a78 <__b2d+0x90>)
 8008a0c:	dc15      	bgt.n	8008a3a <__b2d+0x52>
 8008a0e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a12:	fa22 f30c 	lsr.w	r3, r2, ip
 8008a16:	45b8      	cmp	r8, r7
 8008a18:	ea43 0501 	orr.w	r5, r3, r1
 8008a1c:	bf34      	ite	cc
 8008a1e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a22:	2300      	movcs	r3, #0
 8008a24:	3015      	adds	r0, #21
 8008a26:	fa02 f000 	lsl.w	r0, r2, r0
 8008a2a:	fa23 f30c 	lsr.w	r3, r3, ip
 8008a2e:	4303      	orrs	r3, r0
 8008a30:	461c      	mov	r4, r3
 8008a32:	ec45 4b10 	vmov	d0, r4, r5
 8008a36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3a:	45b8      	cmp	r8, r7
 8008a3c:	bf3a      	itte	cc
 8008a3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a42:	f1a6 0708 	subcc.w	r7, r6, #8
 8008a46:	2300      	movcs	r3, #0
 8008a48:	380b      	subs	r0, #11
 8008a4a:	d012      	beq.n	8008a72 <__b2d+0x8a>
 8008a4c:	f1c0 0120 	rsb	r1, r0, #32
 8008a50:	fa23 f401 	lsr.w	r4, r3, r1
 8008a54:	4082      	lsls	r2, r0
 8008a56:	4322      	orrs	r2, r4
 8008a58:	4547      	cmp	r7, r8
 8008a5a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008a5e:	bf8c      	ite	hi
 8008a60:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008a64:	2200      	movls	r2, #0
 8008a66:	4083      	lsls	r3, r0
 8008a68:	40ca      	lsrs	r2, r1
 8008a6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	e7de      	b.n	8008a30 <__b2d+0x48>
 8008a72:	ea42 0501 	orr.w	r5, r2, r1
 8008a76:	e7db      	b.n	8008a30 <__b2d+0x48>
 8008a78:	3ff00000 	.word	0x3ff00000

08008a7c <__d2b>:
 8008a7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008a80:	460f      	mov	r7, r1
 8008a82:	2101      	movs	r1, #1
 8008a84:	ec59 8b10 	vmov	r8, r9, d0
 8008a88:	4616      	mov	r6, r2
 8008a8a:	f7ff fc1b 	bl	80082c4 <_Balloc>
 8008a8e:	4604      	mov	r4, r0
 8008a90:	b930      	cbnz	r0, 8008aa0 <__d2b+0x24>
 8008a92:	4602      	mov	r2, r0
 8008a94:	4b24      	ldr	r3, [pc, #144]	; (8008b28 <__d2b+0xac>)
 8008a96:	4825      	ldr	r0, [pc, #148]	; (8008b2c <__d2b+0xb0>)
 8008a98:	f240 310f 	movw	r1, #783	; 0x30f
 8008a9c:	f000 f98a 	bl	8008db4 <__assert_func>
 8008aa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008aa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008aa8:	bb2d      	cbnz	r5, 8008af6 <__d2b+0x7a>
 8008aaa:	9301      	str	r3, [sp, #4]
 8008aac:	f1b8 0300 	subs.w	r3, r8, #0
 8008ab0:	d026      	beq.n	8008b00 <__d2b+0x84>
 8008ab2:	4668      	mov	r0, sp
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	f7ff fd17 	bl	80084e8 <__lo0bits>
 8008aba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008abe:	b1e8      	cbz	r0, 8008afc <__d2b+0x80>
 8008ac0:	f1c0 0320 	rsb	r3, r0, #32
 8008ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac8:	430b      	orrs	r3, r1
 8008aca:	40c2      	lsrs	r2, r0
 8008acc:	6163      	str	r3, [r4, #20]
 8008ace:	9201      	str	r2, [sp, #4]
 8008ad0:	9b01      	ldr	r3, [sp, #4]
 8008ad2:	61a3      	str	r3, [r4, #24]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bf14      	ite	ne
 8008ad8:	2202      	movne	r2, #2
 8008ada:	2201      	moveq	r2, #1
 8008adc:	6122      	str	r2, [r4, #16]
 8008ade:	b1bd      	cbz	r5, 8008b10 <__d2b+0x94>
 8008ae0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008ae4:	4405      	add	r5, r0
 8008ae6:	603d      	str	r5, [r7, #0]
 8008ae8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008aec:	6030      	str	r0, [r6, #0]
 8008aee:	4620      	mov	r0, r4
 8008af0:	b003      	add	sp, #12
 8008af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008afa:	e7d6      	b.n	8008aaa <__d2b+0x2e>
 8008afc:	6161      	str	r1, [r4, #20]
 8008afe:	e7e7      	b.n	8008ad0 <__d2b+0x54>
 8008b00:	a801      	add	r0, sp, #4
 8008b02:	f7ff fcf1 	bl	80084e8 <__lo0bits>
 8008b06:	9b01      	ldr	r3, [sp, #4]
 8008b08:	6163      	str	r3, [r4, #20]
 8008b0a:	3020      	adds	r0, #32
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	e7e5      	b.n	8008adc <__d2b+0x60>
 8008b10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b18:	6038      	str	r0, [r7, #0]
 8008b1a:	6918      	ldr	r0, [r3, #16]
 8008b1c:	f7ff fcc4 	bl	80084a8 <__hi0bits>
 8008b20:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b24:	e7e2      	b.n	8008aec <__d2b+0x70>
 8008b26:	bf00      	nop
 8008b28:	0800a650 	.word	0x0800a650
 8008b2c:	0800a6d8 	.word	0x0800a6d8

08008b30 <__ratio>:
 8008b30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b34:	4688      	mov	r8, r1
 8008b36:	4669      	mov	r1, sp
 8008b38:	4681      	mov	r9, r0
 8008b3a:	f7ff ff55 	bl	80089e8 <__b2d>
 8008b3e:	a901      	add	r1, sp, #4
 8008b40:	4640      	mov	r0, r8
 8008b42:	ec55 4b10 	vmov	r4, r5, d0
 8008b46:	f7ff ff4f 	bl	80089e8 <__b2d>
 8008b4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008b52:	eba3 0c02 	sub.w	ip, r3, r2
 8008b56:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008b5a:	1a9b      	subs	r3, r3, r2
 8008b5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008b60:	ec51 0b10 	vmov	r0, r1, d0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	bfd6      	itet	le
 8008b68:	460a      	movle	r2, r1
 8008b6a:	462a      	movgt	r2, r5
 8008b6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008b70:	468b      	mov	fp, r1
 8008b72:	462f      	mov	r7, r5
 8008b74:	bfd4      	ite	le
 8008b76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008b7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008b7e:	4620      	mov	r0, r4
 8008b80:	ee10 2a10 	vmov	r2, s0
 8008b84:	465b      	mov	r3, fp
 8008b86:	4639      	mov	r1, r7
 8008b88:	f7f7 fe78 	bl	800087c <__aeabi_ddiv>
 8008b8c:	ec41 0b10 	vmov	d0, r0, r1
 8008b90:	b003      	add	sp, #12
 8008b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008b96 <__copybits>:
 8008b96:	3901      	subs	r1, #1
 8008b98:	b570      	push	{r4, r5, r6, lr}
 8008b9a:	1149      	asrs	r1, r1, #5
 8008b9c:	6914      	ldr	r4, [r2, #16]
 8008b9e:	3101      	adds	r1, #1
 8008ba0:	f102 0314 	add.w	r3, r2, #20
 8008ba4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ba8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008bac:	1f05      	subs	r5, r0, #4
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	d30c      	bcc.n	8008bcc <__copybits+0x36>
 8008bb2:	1aa3      	subs	r3, r4, r2
 8008bb4:	3b11      	subs	r3, #17
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	3211      	adds	r2, #17
 8008bbc:	42a2      	cmp	r2, r4
 8008bbe:	bf88      	it	hi
 8008bc0:	2300      	movhi	r3, #0
 8008bc2:	4418      	add	r0, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4288      	cmp	r0, r1
 8008bc8:	d305      	bcc.n	8008bd6 <__copybits+0x40>
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	f853 6b04 	ldr.w	r6, [r3], #4
 8008bd0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008bd4:	e7eb      	b.n	8008bae <__copybits+0x18>
 8008bd6:	f840 3b04 	str.w	r3, [r0], #4
 8008bda:	e7f4      	b.n	8008bc6 <__copybits+0x30>

08008bdc <__any_on>:
 8008bdc:	f100 0214 	add.w	r2, r0, #20
 8008be0:	6900      	ldr	r0, [r0, #16]
 8008be2:	114b      	asrs	r3, r1, #5
 8008be4:	4298      	cmp	r0, r3
 8008be6:	b510      	push	{r4, lr}
 8008be8:	db11      	blt.n	8008c0e <__any_on+0x32>
 8008bea:	dd0a      	ble.n	8008c02 <__any_on+0x26>
 8008bec:	f011 011f 	ands.w	r1, r1, #31
 8008bf0:	d007      	beq.n	8008c02 <__any_on+0x26>
 8008bf2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008bf6:	fa24 f001 	lsr.w	r0, r4, r1
 8008bfa:	fa00 f101 	lsl.w	r1, r0, r1
 8008bfe:	428c      	cmp	r4, r1
 8008c00:	d10b      	bne.n	8008c1a <__any_on+0x3e>
 8008c02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d803      	bhi.n	8008c12 <__any_on+0x36>
 8008c0a:	2000      	movs	r0, #0
 8008c0c:	bd10      	pop	{r4, pc}
 8008c0e:	4603      	mov	r3, r0
 8008c10:	e7f7      	b.n	8008c02 <__any_on+0x26>
 8008c12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c16:	2900      	cmp	r1, #0
 8008c18:	d0f5      	beq.n	8008c06 <__any_on+0x2a>
 8008c1a:	2001      	movs	r0, #1
 8008c1c:	e7f6      	b.n	8008c0c <__any_on+0x30>

08008c1e <__ascii_wctomb>:
 8008c1e:	b149      	cbz	r1, 8008c34 <__ascii_wctomb+0x16>
 8008c20:	2aff      	cmp	r2, #255	; 0xff
 8008c22:	bf85      	ittet	hi
 8008c24:	238a      	movhi	r3, #138	; 0x8a
 8008c26:	6003      	strhi	r3, [r0, #0]
 8008c28:	700a      	strbls	r2, [r1, #0]
 8008c2a:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c2e:	bf98      	it	ls
 8008c30:	2001      	movls	r0, #1
 8008c32:	4770      	bx	lr
 8008c34:	4608      	mov	r0, r1
 8008c36:	4770      	bx	lr

08008c38 <__sflush_r>:
 8008c38:	898a      	ldrh	r2, [r1, #12]
 8008c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	4605      	mov	r5, r0
 8008c40:	0710      	lsls	r0, r2, #28
 8008c42:	460c      	mov	r4, r1
 8008c44:	d458      	bmi.n	8008cf8 <__sflush_r+0xc0>
 8008c46:	684b      	ldr	r3, [r1, #4]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	dc05      	bgt.n	8008c58 <__sflush_r+0x20>
 8008c4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	dc02      	bgt.n	8008c58 <__sflush_r+0x20>
 8008c52:	2000      	movs	r0, #0
 8008c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c5a:	2e00      	cmp	r6, #0
 8008c5c:	d0f9      	beq.n	8008c52 <__sflush_r+0x1a>
 8008c5e:	2300      	movs	r3, #0
 8008c60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c64:	682f      	ldr	r7, [r5, #0]
 8008c66:	6a21      	ldr	r1, [r4, #32]
 8008c68:	602b      	str	r3, [r5, #0]
 8008c6a:	d032      	beq.n	8008cd2 <__sflush_r+0x9a>
 8008c6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c6e:	89a3      	ldrh	r3, [r4, #12]
 8008c70:	075a      	lsls	r2, r3, #29
 8008c72:	d505      	bpl.n	8008c80 <__sflush_r+0x48>
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	1ac0      	subs	r0, r0, r3
 8008c78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c7a:	b10b      	cbz	r3, 8008c80 <__sflush_r+0x48>
 8008c7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c7e:	1ac0      	subs	r0, r0, r3
 8008c80:	2300      	movs	r3, #0
 8008c82:	4602      	mov	r2, r0
 8008c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c86:	6a21      	ldr	r1, [r4, #32]
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b0      	blx	r6
 8008c8c:	1c43      	adds	r3, r0, #1
 8008c8e:	89a3      	ldrh	r3, [r4, #12]
 8008c90:	d106      	bne.n	8008ca0 <__sflush_r+0x68>
 8008c92:	6829      	ldr	r1, [r5, #0]
 8008c94:	291d      	cmp	r1, #29
 8008c96:	d82b      	bhi.n	8008cf0 <__sflush_r+0xb8>
 8008c98:	4a29      	ldr	r2, [pc, #164]	; (8008d40 <__sflush_r+0x108>)
 8008c9a:	410a      	asrs	r2, r1
 8008c9c:	07d6      	lsls	r6, r2, #31
 8008c9e:	d427      	bmi.n	8008cf0 <__sflush_r+0xb8>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	6062      	str	r2, [r4, #4]
 8008ca4:	04d9      	lsls	r1, r3, #19
 8008ca6:	6922      	ldr	r2, [r4, #16]
 8008ca8:	6022      	str	r2, [r4, #0]
 8008caa:	d504      	bpl.n	8008cb6 <__sflush_r+0x7e>
 8008cac:	1c42      	adds	r2, r0, #1
 8008cae:	d101      	bne.n	8008cb4 <__sflush_r+0x7c>
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	b903      	cbnz	r3, 8008cb6 <__sflush_r+0x7e>
 8008cb4:	6560      	str	r0, [r4, #84]	; 0x54
 8008cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008cb8:	602f      	str	r7, [r5, #0]
 8008cba:	2900      	cmp	r1, #0
 8008cbc:	d0c9      	beq.n	8008c52 <__sflush_r+0x1a>
 8008cbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cc2:	4299      	cmp	r1, r3
 8008cc4:	d002      	beq.n	8008ccc <__sflush_r+0x94>
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	f7fe fe9a 	bl	8007a00 <_free_r>
 8008ccc:	2000      	movs	r0, #0
 8008cce:	6360      	str	r0, [r4, #52]	; 0x34
 8008cd0:	e7c0      	b.n	8008c54 <__sflush_r+0x1c>
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	47b0      	blx	r6
 8008cd8:	1c41      	adds	r1, r0, #1
 8008cda:	d1c8      	bne.n	8008c6e <__sflush_r+0x36>
 8008cdc:	682b      	ldr	r3, [r5, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0c5      	beq.n	8008c6e <__sflush_r+0x36>
 8008ce2:	2b1d      	cmp	r3, #29
 8008ce4:	d001      	beq.n	8008cea <__sflush_r+0xb2>
 8008ce6:	2b16      	cmp	r3, #22
 8008ce8:	d101      	bne.n	8008cee <__sflush_r+0xb6>
 8008cea:	602f      	str	r7, [r5, #0]
 8008cec:	e7b1      	b.n	8008c52 <__sflush_r+0x1a>
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cf4:	81a3      	strh	r3, [r4, #12]
 8008cf6:	e7ad      	b.n	8008c54 <__sflush_r+0x1c>
 8008cf8:	690f      	ldr	r7, [r1, #16]
 8008cfa:	2f00      	cmp	r7, #0
 8008cfc:	d0a9      	beq.n	8008c52 <__sflush_r+0x1a>
 8008cfe:	0793      	lsls	r3, r2, #30
 8008d00:	680e      	ldr	r6, [r1, #0]
 8008d02:	bf08      	it	eq
 8008d04:	694b      	ldreq	r3, [r1, #20]
 8008d06:	600f      	str	r7, [r1, #0]
 8008d08:	bf18      	it	ne
 8008d0a:	2300      	movne	r3, #0
 8008d0c:	eba6 0807 	sub.w	r8, r6, r7
 8008d10:	608b      	str	r3, [r1, #8]
 8008d12:	f1b8 0f00 	cmp.w	r8, #0
 8008d16:	dd9c      	ble.n	8008c52 <__sflush_r+0x1a>
 8008d18:	6a21      	ldr	r1, [r4, #32]
 8008d1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d1c:	4643      	mov	r3, r8
 8008d1e:	463a      	mov	r2, r7
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b0      	blx	r6
 8008d24:	2800      	cmp	r0, #0
 8008d26:	dc06      	bgt.n	8008d36 <__sflush_r+0xfe>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d2e:	81a3      	strh	r3, [r4, #12]
 8008d30:	f04f 30ff 	mov.w	r0, #4294967295
 8008d34:	e78e      	b.n	8008c54 <__sflush_r+0x1c>
 8008d36:	4407      	add	r7, r0
 8008d38:	eba8 0800 	sub.w	r8, r8, r0
 8008d3c:	e7e9      	b.n	8008d12 <__sflush_r+0xda>
 8008d3e:	bf00      	nop
 8008d40:	dfbffffe 	.word	0xdfbffffe

08008d44 <_fflush_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	690b      	ldr	r3, [r1, #16]
 8008d48:	4605      	mov	r5, r0
 8008d4a:	460c      	mov	r4, r1
 8008d4c:	b913      	cbnz	r3, 8008d54 <_fflush_r+0x10>
 8008d4e:	2500      	movs	r5, #0
 8008d50:	4628      	mov	r0, r5
 8008d52:	bd38      	pop	{r3, r4, r5, pc}
 8008d54:	b118      	cbz	r0, 8008d5e <_fflush_r+0x1a>
 8008d56:	6a03      	ldr	r3, [r0, #32]
 8008d58:	b90b      	cbnz	r3, 8008d5e <_fflush_r+0x1a>
 8008d5a:	f7fe fd31 	bl	80077c0 <__sinit>
 8008d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d0f3      	beq.n	8008d4e <_fflush_r+0xa>
 8008d66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d68:	07d0      	lsls	r0, r2, #31
 8008d6a:	d404      	bmi.n	8008d76 <_fflush_r+0x32>
 8008d6c:	0599      	lsls	r1, r3, #22
 8008d6e:	d402      	bmi.n	8008d76 <_fflush_r+0x32>
 8008d70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d72:	f7fe fe2a 	bl	80079ca <__retarget_lock_acquire_recursive>
 8008d76:	4628      	mov	r0, r5
 8008d78:	4621      	mov	r1, r4
 8008d7a:	f7ff ff5d 	bl	8008c38 <__sflush_r>
 8008d7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d80:	07da      	lsls	r2, r3, #31
 8008d82:	4605      	mov	r5, r0
 8008d84:	d4e4      	bmi.n	8008d50 <_fflush_r+0xc>
 8008d86:	89a3      	ldrh	r3, [r4, #12]
 8008d88:	059b      	lsls	r3, r3, #22
 8008d8a:	d4e1      	bmi.n	8008d50 <_fflush_r+0xc>
 8008d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d8e:	f7fe fe1d 	bl	80079cc <__retarget_lock_release_recursive>
 8008d92:	e7dd      	b.n	8008d50 <_fflush_r+0xc>

08008d94 <_sbrk_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d06      	ldr	r5, [pc, #24]	; (8008db0 <_sbrk_r+0x1c>)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	f7fa fc4e 	bl	8003640 <_sbrk>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_sbrk_r+0x1a>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_sbrk_r+0x1a>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	200006b0 	.word	0x200006b0

08008db4 <__assert_func>:
 8008db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008db6:	4614      	mov	r4, r2
 8008db8:	461a      	mov	r2, r3
 8008dba:	4b09      	ldr	r3, [pc, #36]	; (8008de0 <__assert_func+0x2c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	68d8      	ldr	r0, [r3, #12]
 8008dc2:	b14c      	cbz	r4, 8008dd8 <__assert_func+0x24>
 8008dc4:	4b07      	ldr	r3, [pc, #28]	; (8008de4 <__assert_func+0x30>)
 8008dc6:	9100      	str	r1, [sp, #0]
 8008dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dcc:	4906      	ldr	r1, [pc, #24]	; (8008de8 <__assert_func+0x34>)
 8008dce:	462b      	mov	r3, r5
 8008dd0:	f000 f82c 	bl	8008e2c <fiprintf>
 8008dd4:	f000 f83c 	bl	8008e50 <abort>
 8008dd8:	4b04      	ldr	r3, [pc, #16]	; (8008dec <__assert_func+0x38>)
 8008dda:	461c      	mov	r4, r3
 8008ddc:	e7f3      	b.n	8008dc6 <__assert_func+0x12>
 8008dde:	bf00      	nop
 8008de0:	20000210 	.word	0x20000210
 8008de4:	0800a935 	.word	0x0800a935
 8008de8:	0800a942 	.word	0x0800a942
 8008dec:	0800a970 	.word	0x0800a970

08008df0 <_calloc_r>:
 8008df0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df2:	fba1 2402 	umull	r2, r4, r1, r2
 8008df6:	b94c      	cbnz	r4, 8008e0c <_calloc_r+0x1c>
 8008df8:	4611      	mov	r1, r2
 8008dfa:	9201      	str	r2, [sp, #4]
 8008dfc:	f7ff f9c4 	bl	8008188 <_malloc_r>
 8008e00:	9a01      	ldr	r2, [sp, #4]
 8008e02:	4605      	mov	r5, r0
 8008e04:	b930      	cbnz	r0, 8008e14 <_calloc_r+0x24>
 8008e06:	4628      	mov	r0, r5
 8008e08:	b003      	add	sp, #12
 8008e0a:	bd30      	pop	{r4, r5, pc}
 8008e0c:	220c      	movs	r2, #12
 8008e0e:	6002      	str	r2, [r0, #0]
 8008e10:	2500      	movs	r5, #0
 8008e12:	e7f8      	b.n	8008e06 <_calloc_r+0x16>
 8008e14:	4621      	mov	r1, r4
 8008e16:	f7fe fd4c 	bl	80078b2 <memset>
 8008e1a:	e7f4      	b.n	8008e06 <_calloc_r+0x16>

08008e1c <malloc>:
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <malloc+0xc>)
 8008e1e:	4601      	mov	r1, r0
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f7ff b9b1 	b.w	8008188 <_malloc_r>
 8008e26:	bf00      	nop
 8008e28:	20000210 	.word	0x20000210

08008e2c <fiprintf>:
 8008e2c:	b40e      	push	{r1, r2, r3}
 8008e2e:	b503      	push	{r0, r1, lr}
 8008e30:	4601      	mov	r1, r0
 8008e32:	ab03      	add	r3, sp, #12
 8008e34:	4805      	ldr	r0, [pc, #20]	; (8008e4c <fiprintf+0x20>)
 8008e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	f000 f837 	bl	8008eb0 <_vfiprintf_r>
 8008e42:	b002      	add	sp, #8
 8008e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e48:	b003      	add	sp, #12
 8008e4a:	4770      	bx	lr
 8008e4c:	20000210 	.word	0x20000210

08008e50 <abort>:
 8008e50:	b508      	push	{r3, lr}
 8008e52:	2006      	movs	r0, #6
 8008e54:	f000 fb94 	bl	8009580 <raise>
 8008e58:	2001      	movs	r0, #1
 8008e5a:	f7fa fb79 	bl	8003550 <_exit>

08008e5e <__sfputc_r>:
 8008e5e:	6893      	ldr	r3, [r2, #8]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	b410      	push	{r4}
 8008e66:	6093      	str	r3, [r2, #8]
 8008e68:	da08      	bge.n	8008e7c <__sfputc_r+0x1e>
 8008e6a:	6994      	ldr	r4, [r2, #24]
 8008e6c:	42a3      	cmp	r3, r4
 8008e6e:	db01      	blt.n	8008e74 <__sfputc_r+0x16>
 8008e70:	290a      	cmp	r1, #10
 8008e72:	d103      	bne.n	8008e7c <__sfputc_r+0x1e>
 8008e74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e78:	f000 bac4 	b.w	8009404 <__swbuf_r>
 8008e7c:	6813      	ldr	r3, [r2, #0]
 8008e7e:	1c58      	adds	r0, r3, #1
 8008e80:	6010      	str	r0, [r2, #0]
 8008e82:	7019      	strb	r1, [r3, #0]
 8008e84:	4608      	mov	r0, r1
 8008e86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <__sfputs_r>:
 8008e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8e:	4606      	mov	r6, r0
 8008e90:	460f      	mov	r7, r1
 8008e92:	4614      	mov	r4, r2
 8008e94:	18d5      	adds	r5, r2, r3
 8008e96:	42ac      	cmp	r4, r5
 8008e98:	d101      	bne.n	8008e9e <__sfputs_r+0x12>
 8008e9a:	2000      	movs	r0, #0
 8008e9c:	e007      	b.n	8008eae <__sfputs_r+0x22>
 8008e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ea2:	463a      	mov	r2, r7
 8008ea4:	4630      	mov	r0, r6
 8008ea6:	f7ff ffda 	bl	8008e5e <__sfputc_r>
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	d1f3      	bne.n	8008e96 <__sfputs_r+0xa>
 8008eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008eb0 <_vfiprintf_r>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	460d      	mov	r5, r1
 8008eb6:	b09d      	sub	sp, #116	; 0x74
 8008eb8:	4614      	mov	r4, r2
 8008eba:	4698      	mov	r8, r3
 8008ebc:	4606      	mov	r6, r0
 8008ebe:	b118      	cbz	r0, 8008ec8 <_vfiprintf_r+0x18>
 8008ec0:	6a03      	ldr	r3, [r0, #32]
 8008ec2:	b90b      	cbnz	r3, 8008ec8 <_vfiprintf_r+0x18>
 8008ec4:	f7fe fc7c 	bl	80077c0 <__sinit>
 8008ec8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eca:	07d9      	lsls	r1, r3, #31
 8008ecc:	d405      	bmi.n	8008eda <_vfiprintf_r+0x2a>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	059a      	lsls	r2, r3, #22
 8008ed2:	d402      	bmi.n	8008eda <_vfiprintf_r+0x2a>
 8008ed4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed6:	f7fe fd78 	bl	80079ca <__retarget_lock_acquire_recursive>
 8008eda:	89ab      	ldrh	r3, [r5, #12]
 8008edc:	071b      	lsls	r3, r3, #28
 8008ede:	d501      	bpl.n	8008ee4 <_vfiprintf_r+0x34>
 8008ee0:	692b      	ldr	r3, [r5, #16]
 8008ee2:	b99b      	cbnz	r3, 8008f0c <_vfiprintf_r+0x5c>
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4630      	mov	r0, r6
 8008ee8:	f000 faca 	bl	8009480 <__swsetup_r>
 8008eec:	b170      	cbz	r0, 8008f0c <_vfiprintf_r+0x5c>
 8008eee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ef0:	07dc      	lsls	r4, r3, #31
 8008ef2:	d504      	bpl.n	8008efe <_vfiprintf_r+0x4e>
 8008ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef8:	b01d      	add	sp, #116	; 0x74
 8008efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efe:	89ab      	ldrh	r3, [r5, #12]
 8008f00:	0598      	lsls	r0, r3, #22
 8008f02:	d4f7      	bmi.n	8008ef4 <_vfiprintf_r+0x44>
 8008f04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f06:	f7fe fd61 	bl	80079cc <__retarget_lock_release_recursive>
 8008f0a:	e7f3      	b.n	8008ef4 <_vfiprintf_r+0x44>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f10:	2320      	movs	r3, #32
 8008f12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f16:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f1a:	2330      	movs	r3, #48	; 0x30
 8008f1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090d0 <_vfiprintf_r+0x220>
 8008f20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f24:	f04f 0901 	mov.w	r9, #1
 8008f28:	4623      	mov	r3, r4
 8008f2a:	469a      	mov	sl, r3
 8008f2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f30:	b10a      	cbz	r2, 8008f36 <_vfiprintf_r+0x86>
 8008f32:	2a25      	cmp	r2, #37	; 0x25
 8008f34:	d1f9      	bne.n	8008f2a <_vfiprintf_r+0x7a>
 8008f36:	ebba 0b04 	subs.w	fp, sl, r4
 8008f3a:	d00b      	beq.n	8008f54 <_vfiprintf_r+0xa4>
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	4622      	mov	r2, r4
 8008f40:	4629      	mov	r1, r5
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff ffa2 	bl	8008e8c <__sfputs_r>
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f000 80a9 	beq.w	80090a0 <_vfiprintf_r+0x1f0>
 8008f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f50:	445a      	add	r2, fp
 8008f52:	9209      	str	r2, [sp, #36]	; 0x24
 8008f54:	f89a 3000 	ldrb.w	r3, [sl]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 80a1 	beq.w	80090a0 <_vfiprintf_r+0x1f0>
 8008f5e:	2300      	movs	r3, #0
 8008f60:	f04f 32ff 	mov.w	r2, #4294967295
 8008f64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f68:	f10a 0a01 	add.w	sl, sl, #1
 8008f6c:	9304      	str	r3, [sp, #16]
 8008f6e:	9307      	str	r3, [sp, #28]
 8008f70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f74:	931a      	str	r3, [sp, #104]	; 0x68
 8008f76:	4654      	mov	r4, sl
 8008f78:	2205      	movs	r2, #5
 8008f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f7e:	4854      	ldr	r0, [pc, #336]	; (80090d0 <_vfiprintf_r+0x220>)
 8008f80:	f7f7 f946 	bl	8000210 <memchr>
 8008f84:	9a04      	ldr	r2, [sp, #16]
 8008f86:	b9d8      	cbnz	r0, 8008fc0 <_vfiprintf_r+0x110>
 8008f88:	06d1      	lsls	r1, r2, #27
 8008f8a:	bf44      	itt	mi
 8008f8c:	2320      	movmi	r3, #32
 8008f8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f92:	0713      	lsls	r3, r2, #28
 8008f94:	bf44      	itt	mi
 8008f96:	232b      	movmi	r3, #43	; 0x2b
 8008f98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fa2:	d015      	beq.n	8008fd0 <_vfiprintf_r+0x120>
 8008fa4:	9a07      	ldr	r2, [sp, #28]
 8008fa6:	4654      	mov	r4, sl
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f04f 0c0a 	mov.w	ip, #10
 8008fae:	4621      	mov	r1, r4
 8008fb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fb4:	3b30      	subs	r3, #48	; 0x30
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d94d      	bls.n	8009056 <_vfiprintf_r+0x1a6>
 8008fba:	b1b0      	cbz	r0, 8008fea <_vfiprintf_r+0x13a>
 8008fbc:	9207      	str	r2, [sp, #28]
 8008fbe:	e014      	b.n	8008fea <_vfiprintf_r+0x13a>
 8008fc0:	eba0 0308 	sub.w	r3, r0, r8
 8008fc4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	9304      	str	r3, [sp, #16]
 8008fcc:	46a2      	mov	sl, r4
 8008fce:	e7d2      	b.n	8008f76 <_vfiprintf_r+0xc6>
 8008fd0:	9b03      	ldr	r3, [sp, #12]
 8008fd2:	1d19      	adds	r1, r3, #4
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	9103      	str	r1, [sp, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	bfbb      	ittet	lt
 8008fdc:	425b      	neglt	r3, r3
 8008fde:	f042 0202 	orrlt.w	r2, r2, #2
 8008fe2:	9307      	strge	r3, [sp, #28]
 8008fe4:	9307      	strlt	r3, [sp, #28]
 8008fe6:	bfb8      	it	lt
 8008fe8:	9204      	strlt	r2, [sp, #16]
 8008fea:	7823      	ldrb	r3, [r4, #0]
 8008fec:	2b2e      	cmp	r3, #46	; 0x2e
 8008fee:	d10c      	bne.n	800900a <_vfiprintf_r+0x15a>
 8008ff0:	7863      	ldrb	r3, [r4, #1]
 8008ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8008ff4:	d134      	bne.n	8009060 <_vfiprintf_r+0x1b0>
 8008ff6:	9b03      	ldr	r3, [sp, #12]
 8008ff8:	1d1a      	adds	r2, r3, #4
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	9203      	str	r2, [sp, #12]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bfb8      	it	lt
 8009002:	f04f 33ff 	movlt.w	r3, #4294967295
 8009006:	3402      	adds	r4, #2
 8009008:	9305      	str	r3, [sp, #20]
 800900a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090e0 <_vfiprintf_r+0x230>
 800900e:	7821      	ldrb	r1, [r4, #0]
 8009010:	2203      	movs	r2, #3
 8009012:	4650      	mov	r0, sl
 8009014:	f7f7 f8fc 	bl	8000210 <memchr>
 8009018:	b138      	cbz	r0, 800902a <_vfiprintf_r+0x17a>
 800901a:	9b04      	ldr	r3, [sp, #16]
 800901c:	eba0 000a 	sub.w	r0, r0, sl
 8009020:	2240      	movs	r2, #64	; 0x40
 8009022:	4082      	lsls	r2, r0
 8009024:	4313      	orrs	r3, r2
 8009026:	3401      	adds	r4, #1
 8009028:	9304      	str	r3, [sp, #16]
 800902a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800902e:	4829      	ldr	r0, [pc, #164]	; (80090d4 <_vfiprintf_r+0x224>)
 8009030:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009034:	2206      	movs	r2, #6
 8009036:	f7f7 f8eb 	bl	8000210 <memchr>
 800903a:	2800      	cmp	r0, #0
 800903c:	d03f      	beq.n	80090be <_vfiprintf_r+0x20e>
 800903e:	4b26      	ldr	r3, [pc, #152]	; (80090d8 <_vfiprintf_r+0x228>)
 8009040:	bb1b      	cbnz	r3, 800908a <_vfiprintf_r+0x1da>
 8009042:	9b03      	ldr	r3, [sp, #12]
 8009044:	3307      	adds	r3, #7
 8009046:	f023 0307 	bic.w	r3, r3, #7
 800904a:	3308      	adds	r3, #8
 800904c:	9303      	str	r3, [sp, #12]
 800904e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009050:	443b      	add	r3, r7
 8009052:	9309      	str	r3, [sp, #36]	; 0x24
 8009054:	e768      	b.n	8008f28 <_vfiprintf_r+0x78>
 8009056:	fb0c 3202 	mla	r2, ip, r2, r3
 800905a:	460c      	mov	r4, r1
 800905c:	2001      	movs	r0, #1
 800905e:	e7a6      	b.n	8008fae <_vfiprintf_r+0xfe>
 8009060:	2300      	movs	r3, #0
 8009062:	3401      	adds	r4, #1
 8009064:	9305      	str	r3, [sp, #20]
 8009066:	4619      	mov	r1, r3
 8009068:	f04f 0c0a 	mov.w	ip, #10
 800906c:	4620      	mov	r0, r4
 800906e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009072:	3a30      	subs	r2, #48	; 0x30
 8009074:	2a09      	cmp	r2, #9
 8009076:	d903      	bls.n	8009080 <_vfiprintf_r+0x1d0>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d0c6      	beq.n	800900a <_vfiprintf_r+0x15a>
 800907c:	9105      	str	r1, [sp, #20]
 800907e:	e7c4      	b.n	800900a <_vfiprintf_r+0x15a>
 8009080:	fb0c 2101 	mla	r1, ip, r1, r2
 8009084:	4604      	mov	r4, r0
 8009086:	2301      	movs	r3, #1
 8009088:	e7f0      	b.n	800906c <_vfiprintf_r+0x1bc>
 800908a:	ab03      	add	r3, sp, #12
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	462a      	mov	r2, r5
 8009090:	4b12      	ldr	r3, [pc, #72]	; (80090dc <_vfiprintf_r+0x22c>)
 8009092:	a904      	add	r1, sp, #16
 8009094:	4630      	mov	r0, r6
 8009096:	f3af 8000 	nop.w
 800909a:	4607      	mov	r7, r0
 800909c:	1c78      	adds	r0, r7, #1
 800909e:	d1d6      	bne.n	800904e <_vfiprintf_r+0x19e>
 80090a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090a2:	07d9      	lsls	r1, r3, #31
 80090a4:	d405      	bmi.n	80090b2 <_vfiprintf_r+0x202>
 80090a6:	89ab      	ldrh	r3, [r5, #12]
 80090a8:	059a      	lsls	r2, r3, #22
 80090aa:	d402      	bmi.n	80090b2 <_vfiprintf_r+0x202>
 80090ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ae:	f7fe fc8d 	bl	80079cc <__retarget_lock_release_recursive>
 80090b2:	89ab      	ldrh	r3, [r5, #12]
 80090b4:	065b      	lsls	r3, r3, #25
 80090b6:	f53f af1d 	bmi.w	8008ef4 <_vfiprintf_r+0x44>
 80090ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090bc:	e71c      	b.n	8008ef8 <_vfiprintf_r+0x48>
 80090be:	ab03      	add	r3, sp, #12
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	462a      	mov	r2, r5
 80090c4:	4b05      	ldr	r3, [pc, #20]	; (80090dc <_vfiprintf_r+0x22c>)
 80090c6:	a904      	add	r1, sp, #16
 80090c8:	4630      	mov	r0, r6
 80090ca:	f000 f879 	bl	80091c0 <_printf_i>
 80090ce:	e7e4      	b.n	800909a <_vfiprintf_r+0x1ea>
 80090d0:	0800a971 	.word	0x0800a971
 80090d4:	0800a97b 	.word	0x0800a97b
 80090d8:	00000000 	.word	0x00000000
 80090dc:	08008e8d 	.word	0x08008e8d
 80090e0:	0800a977 	.word	0x0800a977

080090e4 <_printf_common>:
 80090e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	4616      	mov	r6, r2
 80090ea:	4699      	mov	r9, r3
 80090ec:	688a      	ldr	r2, [r1, #8]
 80090ee:	690b      	ldr	r3, [r1, #16]
 80090f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090f4:	4293      	cmp	r3, r2
 80090f6:	bfb8      	it	lt
 80090f8:	4613      	movlt	r3, r2
 80090fa:	6033      	str	r3, [r6, #0]
 80090fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009100:	4607      	mov	r7, r0
 8009102:	460c      	mov	r4, r1
 8009104:	b10a      	cbz	r2, 800910a <_printf_common+0x26>
 8009106:	3301      	adds	r3, #1
 8009108:	6033      	str	r3, [r6, #0]
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	0699      	lsls	r1, r3, #26
 800910e:	bf42      	ittt	mi
 8009110:	6833      	ldrmi	r3, [r6, #0]
 8009112:	3302      	addmi	r3, #2
 8009114:	6033      	strmi	r3, [r6, #0]
 8009116:	6825      	ldr	r5, [r4, #0]
 8009118:	f015 0506 	ands.w	r5, r5, #6
 800911c:	d106      	bne.n	800912c <_printf_common+0x48>
 800911e:	f104 0a19 	add.w	sl, r4, #25
 8009122:	68e3      	ldr	r3, [r4, #12]
 8009124:	6832      	ldr	r2, [r6, #0]
 8009126:	1a9b      	subs	r3, r3, r2
 8009128:	42ab      	cmp	r3, r5
 800912a:	dc26      	bgt.n	800917a <_printf_common+0x96>
 800912c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009130:	1e13      	subs	r3, r2, #0
 8009132:	6822      	ldr	r2, [r4, #0]
 8009134:	bf18      	it	ne
 8009136:	2301      	movne	r3, #1
 8009138:	0692      	lsls	r2, r2, #26
 800913a:	d42b      	bmi.n	8009194 <_printf_common+0xb0>
 800913c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009140:	4649      	mov	r1, r9
 8009142:	4638      	mov	r0, r7
 8009144:	47c0      	blx	r8
 8009146:	3001      	adds	r0, #1
 8009148:	d01e      	beq.n	8009188 <_printf_common+0xa4>
 800914a:	6823      	ldr	r3, [r4, #0]
 800914c:	6922      	ldr	r2, [r4, #16]
 800914e:	f003 0306 	and.w	r3, r3, #6
 8009152:	2b04      	cmp	r3, #4
 8009154:	bf02      	ittt	eq
 8009156:	68e5      	ldreq	r5, [r4, #12]
 8009158:	6833      	ldreq	r3, [r6, #0]
 800915a:	1aed      	subeq	r5, r5, r3
 800915c:	68a3      	ldr	r3, [r4, #8]
 800915e:	bf0c      	ite	eq
 8009160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009164:	2500      	movne	r5, #0
 8009166:	4293      	cmp	r3, r2
 8009168:	bfc4      	itt	gt
 800916a:	1a9b      	subgt	r3, r3, r2
 800916c:	18ed      	addgt	r5, r5, r3
 800916e:	2600      	movs	r6, #0
 8009170:	341a      	adds	r4, #26
 8009172:	42b5      	cmp	r5, r6
 8009174:	d11a      	bne.n	80091ac <_printf_common+0xc8>
 8009176:	2000      	movs	r0, #0
 8009178:	e008      	b.n	800918c <_printf_common+0xa8>
 800917a:	2301      	movs	r3, #1
 800917c:	4652      	mov	r2, sl
 800917e:	4649      	mov	r1, r9
 8009180:	4638      	mov	r0, r7
 8009182:	47c0      	blx	r8
 8009184:	3001      	adds	r0, #1
 8009186:	d103      	bne.n	8009190 <_printf_common+0xac>
 8009188:	f04f 30ff 	mov.w	r0, #4294967295
 800918c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009190:	3501      	adds	r5, #1
 8009192:	e7c6      	b.n	8009122 <_printf_common+0x3e>
 8009194:	18e1      	adds	r1, r4, r3
 8009196:	1c5a      	adds	r2, r3, #1
 8009198:	2030      	movs	r0, #48	; 0x30
 800919a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800919e:	4422      	add	r2, r4
 80091a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091a8:	3302      	adds	r3, #2
 80091aa:	e7c7      	b.n	800913c <_printf_common+0x58>
 80091ac:	2301      	movs	r3, #1
 80091ae:	4622      	mov	r2, r4
 80091b0:	4649      	mov	r1, r9
 80091b2:	4638      	mov	r0, r7
 80091b4:	47c0      	blx	r8
 80091b6:	3001      	adds	r0, #1
 80091b8:	d0e6      	beq.n	8009188 <_printf_common+0xa4>
 80091ba:	3601      	adds	r6, #1
 80091bc:	e7d9      	b.n	8009172 <_printf_common+0x8e>
	...

080091c0 <_printf_i>:
 80091c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091c4:	7e0f      	ldrb	r7, [r1, #24]
 80091c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091c8:	2f78      	cmp	r7, #120	; 0x78
 80091ca:	4691      	mov	r9, r2
 80091cc:	4680      	mov	r8, r0
 80091ce:	460c      	mov	r4, r1
 80091d0:	469a      	mov	sl, r3
 80091d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091d6:	d807      	bhi.n	80091e8 <_printf_i+0x28>
 80091d8:	2f62      	cmp	r7, #98	; 0x62
 80091da:	d80a      	bhi.n	80091f2 <_printf_i+0x32>
 80091dc:	2f00      	cmp	r7, #0
 80091de:	f000 80d4 	beq.w	800938a <_printf_i+0x1ca>
 80091e2:	2f58      	cmp	r7, #88	; 0x58
 80091e4:	f000 80c0 	beq.w	8009368 <_printf_i+0x1a8>
 80091e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091f0:	e03a      	b.n	8009268 <_printf_i+0xa8>
 80091f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091f6:	2b15      	cmp	r3, #21
 80091f8:	d8f6      	bhi.n	80091e8 <_printf_i+0x28>
 80091fa:	a101      	add	r1, pc, #4	; (adr r1, 8009200 <_printf_i+0x40>)
 80091fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009200:	08009259 	.word	0x08009259
 8009204:	0800926d 	.word	0x0800926d
 8009208:	080091e9 	.word	0x080091e9
 800920c:	080091e9 	.word	0x080091e9
 8009210:	080091e9 	.word	0x080091e9
 8009214:	080091e9 	.word	0x080091e9
 8009218:	0800926d 	.word	0x0800926d
 800921c:	080091e9 	.word	0x080091e9
 8009220:	080091e9 	.word	0x080091e9
 8009224:	080091e9 	.word	0x080091e9
 8009228:	080091e9 	.word	0x080091e9
 800922c:	08009371 	.word	0x08009371
 8009230:	08009299 	.word	0x08009299
 8009234:	0800932b 	.word	0x0800932b
 8009238:	080091e9 	.word	0x080091e9
 800923c:	080091e9 	.word	0x080091e9
 8009240:	08009393 	.word	0x08009393
 8009244:	080091e9 	.word	0x080091e9
 8009248:	08009299 	.word	0x08009299
 800924c:	080091e9 	.word	0x080091e9
 8009250:	080091e9 	.word	0x080091e9
 8009254:	08009333 	.word	0x08009333
 8009258:	682b      	ldr	r3, [r5, #0]
 800925a:	1d1a      	adds	r2, r3, #4
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	602a      	str	r2, [r5, #0]
 8009260:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009268:	2301      	movs	r3, #1
 800926a:	e09f      	b.n	80093ac <_printf_i+0x1ec>
 800926c:	6820      	ldr	r0, [r4, #0]
 800926e:	682b      	ldr	r3, [r5, #0]
 8009270:	0607      	lsls	r7, r0, #24
 8009272:	f103 0104 	add.w	r1, r3, #4
 8009276:	6029      	str	r1, [r5, #0]
 8009278:	d501      	bpl.n	800927e <_printf_i+0xbe>
 800927a:	681e      	ldr	r6, [r3, #0]
 800927c:	e003      	b.n	8009286 <_printf_i+0xc6>
 800927e:	0646      	lsls	r6, r0, #25
 8009280:	d5fb      	bpl.n	800927a <_printf_i+0xba>
 8009282:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009286:	2e00      	cmp	r6, #0
 8009288:	da03      	bge.n	8009292 <_printf_i+0xd2>
 800928a:	232d      	movs	r3, #45	; 0x2d
 800928c:	4276      	negs	r6, r6
 800928e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009292:	485a      	ldr	r0, [pc, #360]	; (80093fc <_printf_i+0x23c>)
 8009294:	230a      	movs	r3, #10
 8009296:	e012      	b.n	80092be <_printf_i+0xfe>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	6820      	ldr	r0, [r4, #0]
 800929c:	1d19      	adds	r1, r3, #4
 800929e:	6029      	str	r1, [r5, #0]
 80092a0:	0605      	lsls	r5, r0, #24
 80092a2:	d501      	bpl.n	80092a8 <_printf_i+0xe8>
 80092a4:	681e      	ldr	r6, [r3, #0]
 80092a6:	e002      	b.n	80092ae <_printf_i+0xee>
 80092a8:	0641      	lsls	r1, r0, #25
 80092aa:	d5fb      	bpl.n	80092a4 <_printf_i+0xe4>
 80092ac:	881e      	ldrh	r6, [r3, #0]
 80092ae:	4853      	ldr	r0, [pc, #332]	; (80093fc <_printf_i+0x23c>)
 80092b0:	2f6f      	cmp	r7, #111	; 0x6f
 80092b2:	bf0c      	ite	eq
 80092b4:	2308      	moveq	r3, #8
 80092b6:	230a      	movne	r3, #10
 80092b8:	2100      	movs	r1, #0
 80092ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092be:	6865      	ldr	r5, [r4, #4]
 80092c0:	60a5      	str	r5, [r4, #8]
 80092c2:	2d00      	cmp	r5, #0
 80092c4:	bfa2      	ittt	ge
 80092c6:	6821      	ldrge	r1, [r4, #0]
 80092c8:	f021 0104 	bicge.w	r1, r1, #4
 80092cc:	6021      	strge	r1, [r4, #0]
 80092ce:	b90e      	cbnz	r6, 80092d4 <_printf_i+0x114>
 80092d0:	2d00      	cmp	r5, #0
 80092d2:	d04b      	beq.n	800936c <_printf_i+0x1ac>
 80092d4:	4615      	mov	r5, r2
 80092d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80092da:	fb03 6711 	mls	r7, r3, r1, r6
 80092de:	5dc7      	ldrb	r7, [r0, r7]
 80092e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092e4:	4637      	mov	r7, r6
 80092e6:	42bb      	cmp	r3, r7
 80092e8:	460e      	mov	r6, r1
 80092ea:	d9f4      	bls.n	80092d6 <_printf_i+0x116>
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d10b      	bne.n	8009308 <_printf_i+0x148>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	07de      	lsls	r6, r3, #31
 80092f4:	d508      	bpl.n	8009308 <_printf_i+0x148>
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	6861      	ldr	r1, [r4, #4]
 80092fa:	4299      	cmp	r1, r3
 80092fc:	bfde      	ittt	le
 80092fe:	2330      	movle	r3, #48	; 0x30
 8009300:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009304:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009308:	1b52      	subs	r2, r2, r5
 800930a:	6122      	str	r2, [r4, #16]
 800930c:	f8cd a000 	str.w	sl, [sp]
 8009310:	464b      	mov	r3, r9
 8009312:	aa03      	add	r2, sp, #12
 8009314:	4621      	mov	r1, r4
 8009316:	4640      	mov	r0, r8
 8009318:	f7ff fee4 	bl	80090e4 <_printf_common>
 800931c:	3001      	adds	r0, #1
 800931e:	d14a      	bne.n	80093b6 <_printf_i+0x1f6>
 8009320:	f04f 30ff 	mov.w	r0, #4294967295
 8009324:	b004      	add	sp, #16
 8009326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800932a:	6823      	ldr	r3, [r4, #0]
 800932c:	f043 0320 	orr.w	r3, r3, #32
 8009330:	6023      	str	r3, [r4, #0]
 8009332:	4833      	ldr	r0, [pc, #204]	; (8009400 <_printf_i+0x240>)
 8009334:	2778      	movs	r7, #120	; 0x78
 8009336:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800933a:	6823      	ldr	r3, [r4, #0]
 800933c:	6829      	ldr	r1, [r5, #0]
 800933e:	061f      	lsls	r7, r3, #24
 8009340:	f851 6b04 	ldr.w	r6, [r1], #4
 8009344:	d402      	bmi.n	800934c <_printf_i+0x18c>
 8009346:	065f      	lsls	r7, r3, #25
 8009348:	bf48      	it	mi
 800934a:	b2b6      	uxthmi	r6, r6
 800934c:	07df      	lsls	r7, r3, #31
 800934e:	bf48      	it	mi
 8009350:	f043 0320 	orrmi.w	r3, r3, #32
 8009354:	6029      	str	r1, [r5, #0]
 8009356:	bf48      	it	mi
 8009358:	6023      	strmi	r3, [r4, #0]
 800935a:	b91e      	cbnz	r6, 8009364 <_printf_i+0x1a4>
 800935c:	6823      	ldr	r3, [r4, #0]
 800935e:	f023 0320 	bic.w	r3, r3, #32
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	2310      	movs	r3, #16
 8009366:	e7a7      	b.n	80092b8 <_printf_i+0xf8>
 8009368:	4824      	ldr	r0, [pc, #144]	; (80093fc <_printf_i+0x23c>)
 800936a:	e7e4      	b.n	8009336 <_printf_i+0x176>
 800936c:	4615      	mov	r5, r2
 800936e:	e7bd      	b.n	80092ec <_printf_i+0x12c>
 8009370:	682b      	ldr	r3, [r5, #0]
 8009372:	6826      	ldr	r6, [r4, #0]
 8009374:	6961      	ldr	r1, [r4, #20]
 8009376:	1d18      	adds	r0, r3, #4
 8009378:	6028      	str	r0, [r5, #0]
 800937a:	0635      	lsls	r5, r6, #24
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	d501      	bpl.n	8009384 <_printf_i+0x1c4>
 8009380:	6019      	str	r1, [r3, #0]
 8009382:	e002      	b.n	800938a <_printf_i+0x1ca>
 8009384:	0670      	lsls	r0, r6, #25
 8009386:	d5fb      	bpl.n	8009380 <_printf_i+0x1c0>
 8009388:	8019      	strh	r1, [r3, #0]
 800938a:	2300      	movs	r3, #0
 800938c:	6123      	str	r3, [r4, #16]
 800938e:	4615      	mov	r5, r2
 8009390:	e7bc      	b.n	800930c <_printf_i+0x14c>
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	1d1a      	adds	r2, r3, #4
 8009396:	602a      	str	r2, [r5, #0]
 8009398:	681d      	ldr	r5, [r3, #0]
 800939a:	6862      	ldr	r2, [r4, #4]
 800939c:	2100      	movs	r1, #0
 800939e:	4628      	mov	r0, r5
 80093a0:	f7f6 ff36 	bl	8000210 <memchr>
 80093a4:	b108      	cbz	r0, 80093aa <_printf_i+0x1ea>
 80093a6:	1b40      	subs	r0, r0, r5
 80093a8:	6060      	str	r0, [r4, #4]
 80093aa:	6863      	ldr	r3, [r4, #4]
 80093ac:	6123      	str	r3, [r4, #16]
 80093ae:	2300      	movs	r3, #0
 80093b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093b4:	e7aa      	b.n	800930c <_printf_i+0x14c>
 80093b6:	6923      	ldr	r3, [r4, #16]
 80093b8:	462a      	mov	r2, r5
 80093ba:	4649      	mov	r1, r9
 80093bc:	4640      	mov	r0, r8
 80093be:	47d0      	blx	sl
 80093c0:	3001      	adds	r0, #1
 80093c2:	d0ad      	beq.n	8009320 <_printf_i+0x160>
 80093c4:	6823      	ldr	r3, [r4, #0]
 80093c6:	079b      	lsls	r3, r3, #30
 80093c8:	d413      	bmi.n	80093f2 <_printf_i+0x232>
 80093ca:	68e0      	ldr	r0, [r4, #12]
 80093cc:	9b03      	ldr	r3, [sp, #12]
 80093ce:	4298      	cmp	r0, r3
 80093d0:	bfb8      	it	lt
 80093d2:	4618      	movlt	r0, r3
 80093d4:	e7a6      	b.n	8009324 <_printf_i+0x164>
 80093d6:	2301      	movs	r3, #1
 80093d8:	4632      	mov	r2, r6
 80093da:	4649      	mov	r1, r9
 80093dc:	4640      	mov	r0, r8
 80093de:	47d0      	blx	sl
 80093e0:	3001      	adds	r0, #1
 80093e2:	d09d      	beq.n	8009320 <_printf_i+0x160>
 80093e4:	3501      	adds	r5, #1
 80093e6:	68e3      	ldr	r3, [r4, #12]
 80093e8:	9903      	ldr	r1, [sp, #12]
 80093ea:	1a5b      	subs	r3, r3, r1
 80093ec:	42ab      	cmp	r3, r5
 80093ee:	dcf2      	bgt.n	80093d6 <_printf_i+0x216>
 80093f0:	e7eb      	b.n	80093ca <_printf_i+0x20a>
 80093f2:	2500      	movs	r5, #0
 80093f4:	f104 0619 	add.w	r6, r4, #25
 80093f8:	e7f5      	b.n	80093e6 <_printf_i+0x226>
 80093fa:	bf00      	nop
 80093fc:	0800a982 	.word	0x0800a982
 8009400:	0800a993 	.word	0x0800a993

08009404 <__swbuf_r>:
 8009404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009406:	460e      	mov	r6, r1
 8009408:	4614      	mov	r4, r2
 800940a:	4605      	mov	r5, r0
 800940c:	b118      	cbz	r0, 8009416 <__swbuf_r+0x12>
 800940e:	6a03      	ldr	r3, [r0, #32]
 8009410:	b90b      	cbnz	r3, 8009416 <__swbuf_r+0x12>
 8009412:	f7fe f9d5 	bl	80077c0 <__sinit>
 8009416:	69a3      	ldr	r3, [r4, #24]
 8009418:	60a3      	str	r3, [r4, #8]
 800941a:	89a3      	ldrh	r3, [r4, #12]
 800941c:	071a      	lsls	r2, r3, #28
 800941e:	d525      	bpl.n	800946c <__swbuf_r+0x68>
 8009420:	6923      	ldr	r3, [r4, #16]
 8009422:	b31b      	cbz	r3, 800946c <__swbuf_r+0x68>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	6922      	ldr	r2, [r4, #16]
 8009428:	1a98      	subs	r0, r3, r2
 800942a:	6963      	ldr	r3, [r4, #20]
 800942c:	b2f6      	uxtb	r6, r6
 800942e:	4283      	cmp	r3, r0
 8009430:	4637      	mov	r7, r6
 8009432:	dc04      	bgt.n	800943e <__swbuf_r+0x3a>
 8009434:	4621      	mov	r1, r4
 8009436:	4628      	mov	r0, r5
 8009438:	f7ff fc84 	bl	8008d44 <_fflush_r>
 800943c:	b9e0      	cbnz	r0, 8009478 <__swbuf_r+0x74>
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	3b01      	subs	r3, #1
 8009442:	60a3      	str	r3, [r4, #8]
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	6022      	str	r2, [r4, #0]
 800944a:	701e      	strb	r6, [r3, #0]
 800944c:	6962      	ldr	r2, [r4, #20]
 800944e:	1c43      	adds	r3, r0, #1
 8009450:	429a      	cmp	r2, r3
 8009452:	d004      	beq.n	800945e <__swbuf_r+0x5a>
 8009454:	89a3      	ldrh	r3, [r4, #12]
 8009456:	07db      	lsls	r3, r3, #31
 8009458:	d506      	bpl.n	8009468 <__swbuf_r+0x64>
 800945a:	2e0a      	cmp	r6, #10
 800945c:	d104      	bne.n	8009468 <__swbuf_r+0x64>
 800945e:	4621      	mov	r1, r4
 8009460:	4628      	mov	r0, r5
 8009462:	f7ff fc6f 	bl	8008d44 <_fflush_r>
 8009466:	b938      	cbnz	r0, 8009478 <__swbuf_r+0x74>
 8009468:	4638      	mov	r0, r7
 800946a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800946c:	4621      	mov	r1, r4
 800946e:	4628      	mov	r0, r5
 8009470:	f000 f806 	bl	8009480 <__swsetup_r>
 8009474:	2800      	cmp	r0, #0
 8009476:	d0d5      	beq.n	8009424 <__swbuf_r+0x20>
 8009478:	f04f 37ff 	mov.w	r7, #4294967295
 800947c:	e7f4      	b.n	8009468 <__swbuf_r+0x64>
	...

08009480 <__swsetup_r>:
 8009480:	b538      	push	{r3, r4, r5, lr}
 8009482:	4b2a      	ldr	r3, [pc, #168]	; (800952c <__swsetup_r+0xac>)
 8009484:	4605      	mov	r5, r0
 8009486:	6818      	ldr	r0, [r3, #0]
 8009488:	460c      	mov	r4, r1
 800948a:	b118      	cbz	r0, 8009494 <__swsetup_r+0x14>
 800948c:	6a03      	ldr	r3, [r0, #32]
 800948e:	b90b      	cbnz	r3, 8009494 <__swsetup_r+0x14>
 8009490:	f7fe f996 	bl	80077c0 <__sinit>
 8009494:	89a3      	ldrh	r3, [r4, #12]
 8009496:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800949a:	0718      	lsls	r0, r3, #28
 800949c:	d422      	bmi.n	80094e4 <__swsetup_r+0x64>
 800949e:	06d9      	lsls	r1, r3, #27
 80094a0:	d407      	bmi.n	80094b2 <__swsetup_r+0x32>
 80094a2:	2309      	movs	r3, #9
 80094a4:	602b      	str	r3, [r5, #0]
 80094a6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80094aa:	81a3      	strh	r3, [r4, #12]
 80094ac:	f04f 30ff 	mov.w	r0, #4294967295
 80094b0:	e034      	b.n	800951c <__swsetup_r+0x9c>
 80094b2:	0758      	lsls	r0, r3, #29
 80094b4:	d512      	bpl.n	80094dc <__swsetup_r+0x5c>
 80094b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094b8:	b141      	cbz	r1, 80094cc <__swsetup_r+0x4c>
 80094ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094be:	4299      	cmp	r1, r3
 80094c0:	d002      	beq.n	80094c8 <__swsetup_r+0x48>
 80094c2:	4628      	mov	r0, r5
 80094c4:	f7fe fa9c 	bl	8007a00 <_free_r>
 80094c8:	2300      	movs	r3, #0
 80094ca:	6363      	str	r3, [r4, #52]	; 0x34
 80094cc:	89a3      	ldrh	r3, [r4, #12]
 80094ce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	2300      	movs	r3, #0
 80094d6:	6063      	str	r3, [r4, #4]
 80094d8:	6923      	ldr	r3, [r4, #16]
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	f043 0308 	orr.w	r3, r3, #8
 80094e2:	81a3      	strh	r3, [r4, #12]
 80094e4:	6923      	ldr	r3, [r4, #16]
 80094e6:	b94b      	cbnz	r3, 80094fc <__swsetup_r+0x7c>
 80094e8:	89a3      	ldrh	r3, [r4, #12]
 80094ea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094f2:	d003      	beq.n	80094fc <__swsetup_r+0x7c>
 80094f4:	4621      	mov	r1, r4
 80094f6:	4628      	mov	r0, r5
 80094f8:	f000 f884 	bl	8009604 <__smakebuf_r>
 80094fc:	89a0      	ldrh	r0, [r4, #12]
 80094fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009502:	f010 0301 	ands.w	r3, r0, #1
 8009506:	d00a      	beq.n	800951e <__swsetup_r+0x9e>
 8009508:	2300      	movs	r3, #0
 800950a:	60a3      	str	r3, [r4, #8]
 800950c:	6963      	ldr	r3, [r4, #20]
 800950e:	425b      	negs	r3, r3
 8009510:	61a3      	str	r3, [r4, #24]
 8009512:	6923      	ldr	r3, [r4, #16]
 8009514:	b943      	cbnz	r3, 8009528 <__swsetup_r+0xa8>
 8009516:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800951a:	d1c4      	bne.n	80094a6 <__swsetup_r+0x26>
 800951c:	bd38      	pop	{r3, r4, r5, pc}
 800951e:	0781      	lsls	r1, r0, #30
 8009520:	bf58      	it	pl
 8009522:	6963      	ldrpl	r3, [r4, #20]
 8009524:	60a3      	str	r3, [r4, #8]
 8009526:	e7f4      	b.n	8009512 <__swsetup_r+0x92>
 8009528:	2000      	movs	r0, #0
 800952a:	e7f7      	b.n	800951c <__swsetup_r+0x9c>
 800952c:	20000210 	.word	0x20000210

08009530 <_raise_r>:
 8009530:	291f      	cmp	r1, #31
 8009532:	b538      	push	{r3, r4, r5, lr}
 8009534:	4604      	mov	r4, r0
 8009536:	460d      	mov	r5, r1
 8009538:	d904      	bls.n	8009544 <_raise_r+0x14>
 800953a:	2316      	movs	r3, #22
 800953c:	6003      	str	r3, [r0, #0]
 800953e:	f04f 30ff 	mov.w	r0, #4294967295
 8009542:	bd38      	pop	{r3, r4, r5, pc}
 8009544:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009546:	b112      	cbz	r2, 800954e <_raise_r+0x1e>
 8009548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800954c:	b94b      	cbnz	r3, 8009562 <_raise_r+0x32>
 800954e:	4620      	mov	r0, r4
 8009550:	f000 f830 	bl	80095b4 <_getpid_r>
 8009554:	462a      	mov	r2, r5
 8009556:	4601      	mov	r1, r0
 8009558:	4620      	mov	r0, r4
 800955a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800955e:	f000 b817 	b.w	8009590 <_kill_r>
 8009562:	2b01      	cmp	r3, #1
 8009564:	d00a      	beq.n	800957c <_raise_r+0x4c>
 8009566:	1c59      	adds	r1, r3, #1
 8009568:	d103      	bne.n	8009572 <_raise_r+0x42>
 800956a:	2316      	movs	r3, #22
 800956c:	6003      	str	r3, [r0, #0]
 800956e:	2001      	movs	r0, #1
 8009570:	e7e7      	b.n	8009542 <_raise_r+0x12>
 8009572:	2400      	movs	r4, #0
 8009574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009578:	4628      	mov	r0, r5
 800957a:	4798      	blx	r3
 800957c:	2000      	movs	r0, #0
 800957e:	e7e0      	b.n	8009542 <_raise_r+0x12>

08009580 <raise>:
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <raise+0xc>)
 8009582:	4601      	mov	r1, r0
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f7ff bfd3 	b.w	8009530 <_raise_r>
 800958a:	bf00      	nop
 800958c:	20000210 	.word	0x20000210

08009590 <_kill_r>:
 8009590:	b538      	push	{r3, r4, r5, lr}
 8009592:	4d07      	ldr	r5, [pc, #28]	; (80095b0 <_kill_r+0x20>)
 8009594:	2300      	movs	r3, #0
 8009596:	4604      	mov	r4, r0
 8009598:	4608      	mov	r0, r1
 800959a:	4611      	mov	r1, r2
 800959c:	602b      	str	r3, [r5, #0]
 800959e:	f7f9 ffc7 	bl	8003530 <_kill>
 80095a2:	1c43      	adds	r3, r0, #1
 80095a4:	d102      	bne.n	80095ac <_kill_r+0x1c>
 80095a6:	682b      	ldr	r3, [r5, #0]
 80095a8:	b103      	cbz	r3, 80095ac <_kill_r+0x1c>
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	bd38      	pop	{r3, r4, r5, pc}
 80095ae:	bf00      	nop
 80095b0:	200006b0 	.word	0x200006b0

080095b4 <_getpid_r>:
 80095b4:	f7f9 bfb4 	b.w	8003520 <_getpid>

080095b8 <__swhatbuf_r>:
 80095b8:	b570      	push	{r4, r5, r6, lr}
 80095ba:	460c      	mov	r4, r1
 80095bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095c0:	2900      	cmp	r1, #0
 80095c2:	b096      	sub	sp, #88	; 0x58
 80095c4:	4615      	mov	r5, r2
 80095c6:	461e      	mov	r6, r3
 80095c8:	da0d      	bge.n	80095e6 <__swhatbuf_r+0x2e>
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80095d0:	f04f 0100 	mov.w	r1, #0
 80095d4:	bf0c      	ite	eq
 80095d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80095da:	2340      	movne	r3, #64	; 0x40
 80095dc:	2000      	movs	r0, #0
 80095de:	6031      	str	r1, [r6, #0]
 80095e0:	602b      	str	r3, [r5, #0]
 80095e2:	b016      	add	sp, #88	; 0x58
 80095e4:	bd70      	pop	{r4, r5, r6, pc}
 80095e6:	466a      	mov	r2, sp
 80095e8:	f000 f848 	bl	800967c <_fstat_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	dbec      	blt.n	80095ca <__swhatbuf_r+0x12>
 80095f0:	9901      	ldr	r1, [sp, #4]
 80095f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80095f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80095fa:	4259      	negs	r1, r3
 80095fc:	4159      	adcs	r1, r3
 80095fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009602:	e7eb      	b.n	80095dc <__swhatbuf_r+0x24>

08009604 <__smakebuf_r>:
 8009604:	898b      	ldrh	r3, [r1, #12]
 8009606:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009608:	079d      	lsls	r5, r3, #30
 800960a:	4606      	mov	r6, r0
 800960c:	460c      	mov	r4, r1
 800960e:	d507      	bpl.n	8009620 <__smakebuf_r+0x1c>
 8009610:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009614:	6023      	str	r3, [r4, #0]
 8009616:	6123      	str	r3, [r4, #16]
 8009618:	2301      	movs	r3, #1
 800961a:	6163      	str	r3, [r4, #20]
 800961c:	b002      	add	sp, #8
 800961e:	bd70      	pop	{r4, r5, r6, pc}
 8009620:	ab01      	add	r3, sp, #4
 8009622:	466a      	mov	r2, sp
 8009624:	f7ff ffc8 	bl	80095b8 <__swhatbuf_r>
 8009628:	9900      	ldr	r1, [sp, #0]
 800962a:	4605      	mov	r5, r0
 800962c:	4630      	mov	r0, r6
 800962e:	f7fe fdab 	bl	8008188 <_malloc_r>
 8009632:	b948      	cbnz	r0, 8009648 <__smakebuf_r+0x44>
 8009634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009638:	059a      	lsls	r2, r3, #22
 800963a:	d4ef      	bmi.n	800961c <__smakebuf_r+0x18>
 800963c:	f023 0303 	bic.w	r3, r3, #3
 8009640:	f043 0302 	orr.w	r3, r3, #2
 8009644:	81a3      	strh	r3, [r4, #12]
 8009646:	e7e3      	b.n	8009610 <__smakebuf_r+0xc>
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	6020      	str	r0, [r4, #0]
 800964c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009650:	81a3      	strh	r3, [r4, #12]
 8009652:	9b00      	ldr	r3, [sp, #0]
 8009654:	6163      	str	r3, [r4, #20]
 8009656:	9b01      	ldr	r3, [sp, #4]
 8009658:	6120      	str	r0, [r4, #16]
 800965a:	b15b      	cbz	r3, 8009674 <__smakebuf_r+0x70>
 800965c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009660:	4630      	mov	r0, r6
 8009662:	f000 f81d 	bl	80096a0 <_isatty_r>
 8009666:	b128      	cbz	r0, 8009674 <__smakebuf_r+0x70>
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f023 0303 	bic.w	r3, r3, #3
 800966e:	f043 0301 	orr.w	r3, r3, #1
 8009672:	81a3      	strh	r3, [r4, #12]
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	431d      	orrs	r5, r3
 8009678:	81a5      	strh	r5, [r4, #12]
 800967a:	e7cf      	b.n	800961c <__smakebuf_r+0x18>

0800967c <_fstat_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d07      	ldr	r5, [pc, #28]	; (800969c <_fstat_r+0x20>)
 8009680:	2300      	movs	r3, #0
 8009682:	4604      	mov	r4, r0
 8009684:	4608      	mov	r0, r1
 8009686:	4611      	mov	r1, r2
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f7f9 ffb0 	bl	80035ee <_fstat>
 800968e:	1c43      	adds	r3, r0, #1
 8009690:	d102      	bne.n	8009698 <_fstat_r+0x1c>
 8009692:	682b      	ldr	r3, [r5, #0]
 8009694:	b103      	cbz	r3, 8009698 <_fstat_r+0x1c>
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	bd38      	pop	{r3, r4, r5, pc}
 800969a:	bf00      	nop
 800969c:	200006b0 	.word	0x200006b0

080096a0 <_isatty_r>:
 80096a0:	b538      	push	{r3, r4, r5, lr}
 80096a2:	4d06      	ldr	r5, [pc, #24]	; (80096bc <_isatty_r+0x1c>)
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	602b      	str	r3, [r5, #0]
 80096ac:	f7f9 ffaf 	bl	800360e <_isatty>
 80096b0:	1c43      	adds	r3, r0, #1
 80096b2:	d102      	bne.n	80096ba <_isatty_r+0x1a>
 80096b4:	682b      	ldr	r3, [r5, #0]
 80096b6:	b103      	cbz	r3, 80096ba <_isatty_r+0x1a>
 80096b8:	6023      	str	r3, [r4, #0]
 80096ba:	bd38      	pop	{r3, r4, r5, pc}
 80096bc:	200006b0 	.word	0x200006b0

080096c0 <pow>:
 80096c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096c2:	ed2d 8b02 	vpush	{d8}
 80096c6:	eeb0 8a40 	vmov.f32	s16, s0
 80096ca:	eef0 8a60 	vmov.f32	s17, s1
 80096ce:	ec55 4b11 	vmov	r4, r5, d1
 80096d2:	f000 f94d 	bl	8009970 <__ieee754_pow>
 80096d6:	4622      	mov	r2, r4
 80096d8:	462b      	mov	r3, r5
 80096da:	4620      	mov	r0, r4
 80096dc:	4629      	mov	r1, r5
 80096de:	ec57 6b10 	vmov	r6, r7, d0
 80096e2:	f7f7 fa3b 	bl	8000b5c <__aeabi_dcmpun>
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d13b      	bne.n	8009762 <pow+0xa2>
 80096ea:	ec51 0b18 	vmov	r0, r1, d8
 80096ee:	2200      	movs	r2, #0
 80096f0:	2300      	movs	r3, #0
 80096f2:	f7f7 fa01 	bl	8000af8 <__aeabi_dcmpeq>
 80096f6:	b1b8      	cbz	r0, 8009728 <pow+0x68>
 80096f8:	2200      	movs	r2, #0
 80096fa:	2300      	movs	r3, #0
 80096fc:	4620      	mov	r0, r4
 80096fe:	4629      	mov	r1, r5
 8009700:	f7f7 f9fa 	bl	8000af8 <__aeabi_dcmpeq>
 8009704:	2800      	cmp	r0, #0
 8009706:	d146      	bne.n	8009796 <pow+0xd6>
 8009708:	ec45 4b10 	vmov	d0, r4, r5
 800970c:	f000 f848 	bl	80097a0 <finite>
 8009710:	b338      	cbz	r0, 8009762 <pow+0xa2>
 8009712:	2200      	movs	r2, #0
 8009714:	2300      	movs	r3, #0
 8009716:	4620      	mov	r0, r4
 8009718:	4629      	mov	r1, r5
 800971a:	f7f7 f9f7 	bl	8000b0c <__aeabi_dcmplt>
 800971e:	b300      	cbz	r0, 8009762 <pow+0xa2>
 8009720:	f7fe f928 	bl	8007974 <__errno>
 8009724:	2322      	movs	r3, #34	; 0x22
 8009726:	e01b      	b.n	8009760 <pow+0xa0>
 8009728:	ec47 6b10 	vmov	d0, r6, r7
 800972c:	f000 f838 	bl	80097a0 <finite>
 8009730:	b9e0      	cbnz	r0, 800976c <pow+0xac>
 8009732:	eeb0 0a48 	vmov.f32	s0, s16
 8009736:	eef0 0a68 	vmov.f32	s1, s17
 800973a:	f000 f831 	bl	80097a0 <finite>
 800973e:	b1a8      	cbz	r0, 800976c <pow+0xac>
 8009740:	ec45 4b10 	vmov	d0, r4, r5
 8009744:	f000 f82c 	bl	80097a0 <finite>
 8009748:	b180      	cbz	r0, 800976c <pow+0xac>
 800974a:	4632      	mov	r2, r6
 800974c:	463b      	mov	r3, r7
 800974e:	4630      	mov	r0, r6
 8009750:	4639      	mov	r1, r7
 8009752:	f7f7 fa03 	bl	8000b5c <__aeabi_dcmpun>
 8009756:	2800      	cmp	r0, #0
 8009758:	d0e2      	beq.n	8009720 <pow+0x60>
 800975a:	f7fe f90b 	bl	8007974 <__errno>
 800975e:	2321      	movs	r3, #33	; 0x21
 8009760:	6003      	str	r3, [r0, #0]
 8009762:	ecbd 8b02 	vpop	{d8}
 8009766:	ec47 6b10 	vmov	d0, r6, r7
 800976a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800976c:	2200      	movs	r2, #0
 800976e:	2300      	movs	r3, #0
 8009770:	4630      	mov	r0, r6
 8009772:	4639      	mov	r1, r7
 8009774:	f7f7 f9c0 	bl	8000af8 <__aeabi_dcmpeq>
 8009778:	2800      	cmp	r0, #0
 800977a:	d0f2      	beq.n	8009762 <pow+0xa2>
 800977c:	eeb0 0a48 	vmov.f32	s0, s16
 8009780:	eef0 0a68 	vmov.f32	s1, s17
 8009784:	f000 f80c 	bl	80097a0 <finite>
 8009788:	2800      	cmp	r0, #0
 800978a:	d0ea      	beq.n	8009762 <pow+0xa2>
 800978c:	ec45 4b10 	vmov	d0, r4, r5
 8009790:	f000 f806 	bl	80097a0 <finite>
 8009794:	e7c3      	b.n	800971e <pow+0x5e>
 8009796:	4f01      	ldr	r7, [pc, #4]	; (800979c <pow+0xdc>)
 8009798:	2600      	movs	r6, #0
 800979a:	e7e2      	b.n	8009762 <pow+0xa2>
 800979c:	3ff00000 	.word	0x3ff00000

080097a0 <finite>:
 80097a0:	b082      	sub	sp, #8
 80097a2:	ed8d 0b00 	vstr	d0, [sp]
 80097a6:	9801      	ldr	r0, [sp, #4]
 80097a8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80097ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80097b0:	0fc0      	lsrs	r0, r0, #31
 80097b2:	b002      	add	sp, #8
 80097b4:	4770      	bx	lr
	...

080097b8 <__ieee754_sqrt>:
 80097b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097bc:	ec55 4b10 	vmov	r4, r5, d0
 80097c0:	4e67      	ldr	r6, [pc, #412]	; (8009960 <__ieee754_sqrt+0x1a8>)
 80097c2:	43ae      	bics	r6, r5
 80097c4:	ee10 0a10 	vmov	r0, s0
 80097c8:	ee10 2a10 	vmov	r2, s0
 80097cc:	4629      	mov	r1, r5
 80097ce:	462b      	mov	r3, r5
 80097d0:	d10d      	bne.n	80097ee <__ieee754_sqrt+0x36>
 80097d2:	f7f6 ff29 	bl	8000628 <__aeabi_dmul>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4620      	mov	r0, r4
 80097dc:	4629      	mov	r1, r5
 80097de:	f7f6 fd6d 	bl	80002bc <__adddf3>
 80097e2:	4604      	mov	r4, r0
 80097e4:	460d      	mov	r5, r1
 80097e6:	ec45 4b10 	vmov	d0, r4, r5
 80097ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ee:	2d00      	cmp	r5, #0
 80097f0:	dc0b      	bgt.n	800980a <__ieee754_sqrt+0x52>
 80097f2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80097f6:	4326      	orrs	r6, r4
 80097f8:	d0f5      	beq.n	80097e6 <__ieee754_sqrt+0x2e>
 80097fa:	b135      	cbz	r5, 800980a <__ieee754_sqrt+0x52>
 80097fc:	f7f6 fd5c 	bl	80002b8 <__aeabi_dsub>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	f7f7 f83a 	bl	800087c <__aeabi_ddiv>
 8009808:	e7eb      	b.n	80097e2 <__ieee754_sqrt+0x2a>
 800980a:	1509      	asrs	r1, r1, #20
 800980c:	f000 808d 	beq.w	800992a <__ieee754_sqrt+0x172>
 8009810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009814:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8009818:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800981c:	07c9      	lsls	r1, r1, #31
 800981e:	bf5c      	itt	pl
 8009820:	005b      	lslpl	r3, r3, #1
 8009822:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009826:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800982a:	bf58      	it	pl
 800982c:	0052      	lslpl	r2, r2, #1
 800982e:	2500      	movs	r5, #0
 8009830:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009834:	1076      	asrs	r6, r6, #1
 8009836:	0052      	lsls	r2, r2, #1
 8009838:	f04f 0e16 	mov.w	lr, #22
 800983c:	46ac      	mov	ip, r5
 800983e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009842:	eb0c 0001 	add.w	r0, ip, r1
 8009846:	4298      	cmp	r0, r3
 8009848:	bfde      	ittt	le
 800984a:	1a1b      	suble	r3, r3, r0
 800984c:	eb00 0c01 	addle.w	ip, r0, r1
 8009850:	186d      	addle	r5, r5, r1
 8009852:	005b      	lsls	r3, r3, #1
 8009854:	f1be 0e01 	subs.w	lr, lr, #1
 8009858:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800985c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009860:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009864:	d1ed      	bne.n	8009842 <__ieee754_sqrt+0x8a>
 8009866:	4674      	mov	r4, lr
 8009868:	2720      	movs	r7, #32
 800986a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800986e:	4563      	cmp	r3, ip
 8009870:	eb01 000e 	add.w	r0, r1, lr
 8009874:	dc02      	bgt.n	800987c <__ieee754_sqrt+0xc4>
 8009876:	d113      	bne.n	80098a0 <__ieee754_sqrt+0xe8>
 8009878:	4290      	cmp	r0, r2
 800987a:	d811      	bhi.n	80098a0 <__ieee754_sqrt+0xe8>
 800987c:	2800      	cmp	r0, #0
 800987e:	eb00 0e01 	add.w	lr, r0, r1
 8009882:	da57      	bge.n	8009934 <__ieee754_sqrt+0x17c>
 8009884:	f1be 0f00 	cmp.w	lr, #0
 8009888:	db54      	blt.n	8009934 <__ieee754_sqrt+0x17c>
 800988a:	f10c 0801 	add.w	r8, ip, #1
 800988e:	eba3 030c 	sub.w	r3, r3, ip
 8009892:	4290      	cmp	r0, r2
 8009894:	bf88      	it	hi
 8009896:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800989a:	1a12      	subs	r2, r2, r0
 800989c:	440c      	add	r4, r1
 800989e:	46c4      	mov	ip, r8
 80098a0:	005b      	lsls	r3, r3, #1
 80098a2:	3f01      	subs	r7, #1
 80098a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80098a8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80098ac:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80098b0:	d1dd      	bne.n	800986e <__ieee754_sqrt+0xb6>
 80098b2:	4313      	orrs	r3, r2
 80098b4:	d01b      	beq.n	80098ee <__ieee754_sqrt+0x136>
 80098b6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009964 <__ieee754_sqrt+0x1ac>
 80098ba:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009968 <__ieee754_sqrt+0x1b0>
 80098be:	e9da 0100 	ldrd	r0, r1, [sl]
 80098c2:	e9db 2300 	ldrd	r2, r3, [fp]
 80098c6:	f7f6 fcf7 	bl	80002b8 <__aeabi_dsub>
 80098ca:	e9da 8900 	ldrd	r8, r9, [sl]
 80098ce:	4602      	mov	r2, r0
 80098d0:	460b      	mov	r3, r1
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	f7f7 f923 	bl	8000b20 <__aeabi_dcmple>
 80098da:	b140      	cbz	r0, 80098ee <__ieee754_sqrt+0x136>
 80098dc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80098e0:	e9da 0100 	ldrd	r0, r1, [sl]
 80098e4:	e9db 2300 	ldrd	r2, r3, [fp]
 80098e8:	d126      	bne.n	8009938 <__ieee754_sqrt+0x180>
 80098ea:	3501      	adds	r5, #1
 80098ec:	463c      	mov	r4, r7
 80098ee:	106a      	asrs	r2, r5, #1
 80098f0:	0863      	lsrs	r3, r4, #1
 80098f2:	07e9      	lsls	r1, r5, #31
 80098f4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80098f8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80098fc:	bf48      	it	mi
 80098fe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009902:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8009906:	461c      	mov	r4, r3
 8009908:	e76d      	b.n	80097e6 <__ieee754_sqrt+0x2e>
 800990a:	0ad3      	lsrs	r3, r2, #11
 800990c:	3815      	subs	r0, #21
 800990e:	0552      	lsls	r2, r2, #21
 8009910:	2b00      	cmp	r3, #0
 8009912:	d0fa      	beq.n	800990a <__ieee754_sqrt+0x152>
 8009914:	02dc      	lsls	r4, r3, #11
 8009916:	d50a      	bpl.n	800992e <__ieee754_sqrt+0x176>
 8009918:	f1c1 0420 	rsb	r4, r1, #32
 800991c:	fa22 f404 	lsr.w	r4, r2, r4
 8009920:	1e4d      	subs	r5, r1, #1
 8009922:	408a      	lsls	r2, r1
 8009924:	4323      	orrs	r3, r4
 8009926:	1b41      	subs	r1, r0, r5
 8009928:	e772      	b.n	8009810 <__ieee754_sqrt+0x58>
 800992a:	4608      	mov	r0, r1
 800992c:	e7f0      	b.n	8009910 <__ieee754_sqrt+0x158>
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	3101      	adds	r1, #1
 8009932:	e7ef      	b.n	8009914 <__ieee754_sqrt+0x15c>
 8009934:	46e0      	mov	r8, ip
 8009936:	e7aa      	b.n	800988e <__ieee754_sqrt+0xd6>
 8009938:	f7f6 fcc0 	bl	80002bc <__adddf3>
 800993c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f7 f8e0 	bl	8000b0c <__aeabi_dcmplt>
 800994c:	b120      	cbz	r0, 8009958 <__ieee754_sqrt+0x1a0>
 800994e:	1ca0      	adds	r0, r4, #2
 8009950:	bf08      	it	eq
 8009952:	3501      	addeq	r5, #1
 8009954:	3402      	adds	r4, #2
 8009956:	e7ca      	b.n	80098ee <__ieee754_sqrt+0x136>
 8009958:	3401      	adds	r4, #1
 800995a:	f024 0401 	bic.w	r4, r4, #1
 800995e:	e7c6      	b.n	80098ee <__ieee754_sqrt+0x136>
 8009960:	7ff00000 	.word	0x7ff00000
 8009964:	20000218 	.word	0x20000218
 8009968:	20000220 	.word	0x20000220
 800996c:	00000000 	.word	0x00000000

08009970 <__ieee754_pow>:
 8009970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009974:	ed2d 8b06 	vpush	{d8-d10}
 8009978:	b089      	sub	sp, #36	; 0x24
 800997a:	ed8d 1b00 	vstr	d1, [sp]
 800997e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009982:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009986:	ea58 0102 	orrs.w	r1, r8, r2
 800998a:	ec57 6b10 	vmov	r6, r7, d0
 800998e:	d115      	bne.n	80099bc <__ieee754_pow+0x4c>
 8009990:	19b3      	adds	r3, r6, r6
 8009992:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009996:	4152      	adcs	r2, r2
 8009998:	4299      	cmp	r1, r3
 800999a:	4b89      	ldr	r3, [pc, #548]	; (8009bc0 <__ieee754_pow+0x250>)
 800999c:	4193      	sbcs	r3, r2
 800999e:	f080 84d1 	bcs.w	800a344 <__ieee754_pow+0x9d4>
 80099a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099a6:	4630      	mov	r0, r6
 80099a8:	4639      	mov	r1, r7
 80099aa:	f7f6 fc87 	bl	80002bc <__adddf3>
 80099ae:	ec41 0b10 	vmov	d0, r0, r1
 80099b2:	b009      	add	sp, #36	; 0x24
 80099b4:	ecbd 8b06 	vpop	{d8-d10}
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	4b81      	ldr	r3, [pc, #516]	; (8009bc4 <__ieee754_pow+0x254>)
 80099be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80099c2:	429c      	cmp	r4, r3
 80099c4:	ee10 aa10 	vmov	sl, s0
 80099c8:	463d      	mov	r5, r7
 80099ca:	dc06      	bgt.n	80099da <__ieee754_pow+0x6a>
 80099cc:	d101      	bne.n	80099d2 <__ieee754_pow+0x62>
 80099ce:	2e00      	cmp	r6, #0
 80099d0:	d1e7      	bne.n	80099a2 <__ieee754_pow+0x32>
 80099d2:	4598      	cmp	r8, r3
 80099d4:	dc01      	bgt.n	80099da <__ieee754_pow+0x6a>
 80099d6:	d10f      	bne.n	80099f8 <__ieee754_pow+0x88>
 80099d8:	b172      	cbz	r2, 80099f8 <__ieee754_pow+0x88>
 80099da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80099de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80099e2:	ea55 050a 	orrs.w	r5, r5, sl
 80099e6:	d1dc      	bne.n	80099a2 <__ieee754_pow+0x32>
 80099e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80099ec:	18db      	adds	r3, r3, r3
 80099ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80099f2:	4152      	adcs	r2, r2
 80099f4:	429d      	cmp	r5, r3
 80099f6:	e7d0      	b.n	800999a <__ieee754_pow+0x2a>
 80099f8:	2d00      	cmp	r5, #0
 80099fa:	da3b      	bge.n	8009a74 <__ieee754_pow+0x104>
 80099fc:	4b72      	ldr	r3, [pc, #456]	; (8009bc8 <__ieee754_pow+0x258>)
 80099fe:	4598      	cmp	r8, r3
 8009a00:	dc51      	bgt.n	8009aa6 <__ieee754_pow+0x136>
 8009a02:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009a06:	4598      	cmp	r8, r3
 8009a08:	f340 84ab 	ble.w	800a362 <__ieee754_pow+0x9f2>
 8009a0c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009a10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009a14:	2b14      	cmp	r3, #20
 8009a16:	dd0f      	ble.n	8009a38 <__ieee754_pow+0xc8>
 8009a18:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009a1c:	fa22 f103 	lsr.w	r1, r2, r3
 8009a20:	fa01 f303 	lsl.w	r3, r1, r3
 8009a24:	4293      	cmp	r3, r2
 8009a26:	f040 849c 	bne.w	800a362 <__ieee754_pow+0x9f2>
 8009a2a:	f001 0101 	and.w	r1, r1, #1
 8009a2e:	f1c1 0302 	rsb	r3, r1, #2
 8009a32:	9304      	str	r3, [sp, #16]
 8009a34:	b182      	cbz	r2, 8009a58 <__ieee754_pow+0xe8>
 8009a36:	e05f      	b.n	8009af8 <__ieee754_pow+0x188>
 8009a38:	2a00      	cmp	r2, #0
 8009a3a:	d15b      	bne.n	8009af4 <__ieee754_pow+0x184>
 8009a3c:	f1c3 0314 	rsb	r3, r3, #20
 8009a40:	fa48 f103 	asr.w	r1, r8, r3
 8009a44:	fa01 f303 	lsl.w	r3, r1, r3
 8009a48:	4543      	cmp	r3, r8
 8009a4a:	f040 8487 	bne.w	800a35c <__ieee754_pow+0x9ec>
 8009a4e:	f001 0101 	and.w	r1, r1, #1
 8009a52:	f1c1 0302 	rsb	r3, r1, #2
 8009a56:	9304      	str	r3, [sp, #16]
 8009a58:	4b5c      	ldr	r3, [pc, #368]	; (8009bcc <__ieee754_pow+0x25c>)
 8009a5a:	4598      	cmp	r8, r3
 8009a5c:	d132      	bne.n	8009ac4 <__ieee754_pow+0x154>
 8009a5e:	f1b9 0f00 	cmp.w	r9, #0
 8009a62:	f280 8477 	bge.w	800a354 <__ieee754_pow+0x9e4>
 8009a66:	4959      	ldr	r1, [pc, #356]	; (8009bcc <__ieee754_pow+0x25c>)
 8009a68:	4632      	mov	r2, r6
 8009a6a:	463b      	mov	r3, r7
 8009a6c:	2000      	movs	r0, #0
 8009a6e:	f7f6 ff05 	bl	800087c <__aeabi_ddiv>
 8009a72:	e79c      	b.n	80099ae <__ieee754_pow+0x3e>
 8009a74:	2300      	movs	r3, #0
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	2a00      	cmp	r2, #0
 8009a7a:	d13d      	bne.n	8009af8 <__ieee754_pow+0x188>
 8009a7c:	4b51      	ldr	r3, [pc, #324]	; (8009bc4 <__ieee754_pow+0x254>)
 8009a7e:	4598      	cmp	r8, r3
 8009a80:	d1ea      	bne.n	8009a58 <__ieee754_pow+0xe8>
 8009a82:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009a86:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009a8a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a8e:	f000 8459 	beq.w	800a344 <__ieee754_pow+0x9d4>
 8009a92:	4b4f      	ldr	r3, [pc, #316]	; (8009bd0 <__ieee754_pow+0x260>)
 8009a94:	429c      	cmp	r4, r3
 8009a96:	dd08      	ble.n	8009aaa <__ieee754_pow+0x13a>
 8009a98:	f1b9 0f00 	cmp.w	r9, #0
 8009a9c:	f2c0 8456 	blt.w	800a34c <__ieee754_pow+0x9dc>
 8009aa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aa4:	e783      	b.n	80099ae <__ieee754_pow+0x3e>
 8009aa6:	2302      	movs	r3, #2
 8009aa8:	e7e5      	b.n	8009a76 <__ieee754_pow+0x106>
 8009aaa:	f1b9 0f00 	cmp.w	r9, #0
 8009aae:	f04f 0000 	mov.w	r0, #0
 8009ab2:	f04f 0100 	mov.w	r1, #0
 8009ab6:	f6bf af7a 	bge.w	80099ae <__ieee754_pow+0x3e>
 8009aba:	e9dd 0300 	ldrd	r0, r3, [sp]
 8009abe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009ac2:	e774      	b.n	80099ae <__ieee754_pow+0x3e>
 8009ac4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8009ac8:	d106      	bne.n	8009ad8 <__ieee754_pow+0x168>
 8009aca:	4632      	mov	r2, r6
 8009acc:	463b      	mov	r3, r7
 8009ace:	4630      	mov	r0, r6
 8009ad0:	4639      	mov	r1, r7
 8009ad2:	f7f6 fda9 	bl	8000628 <__aeabi_dmul>
 8009ad6:	e76a      	b.n	80099ae <__ieee754_pow+0x3e>
 8009ad8:	4b3e      	ldr	r3, [pc, #248]	; (8009bd4 <__ieee754_pow+0x264>)
 8009ada:	4599      	cmp	r9, r3
 8009adc:	d10c      	bne.n	8009af8 <__ieee754_pow+0x188>
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	db0a      	blt.n	8009af8 <__ieee754_pow+0x188>
 8009ae2:	ec47 6b10 	vmov	d0, r6, r7
 8009ae6:	b009      	add	sp, #36	; 0x24
 8009ae8:	ecbd 8b06 	vpop	{d8-d10}
 8009aec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	f7ff be62 	b.w	80097b8 <__ieee754_sqrt>
 8009af4:	2300      	movs	r3, #0
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	ec47 6b10 	vmov	d0, r6, r7
 8009afc:	f000 fc62 	bl	800a3c4 <fabs>
 8009b00:	ec51 0b10 	vmov	r0, r1, d0
 8009b04:	f1ba 0f00 	cmp.w	sl, #0
 8009b08:	d129      	bne.n	8009b5e <__ieee754_pow+0x1ee>
 8009b0a:	b124      	cbz	r4, 8009b16 <__ieee754_pow+0x1a6>
 8009b0c:	4b2f      	ldr	r3, [pc, #188]	; (8009bcc <__ieee754_pow+0x25c>)
 8009b0e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d123      	bne.n	8009b5e <__ieee754_pow+0x1ee>
 8009b16:	f1b9 0f00 	cmp.w	r9, #0
 8009b1a:	da05      	bge.n	8009b28 <__ieee754_pow+0x1b8>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	2000      	movs	r0, #0
 8009b22:	492a      	ldr	r1, [pc, #168]	; (8009bcc <__ieee754_pow+0x25c>)
 8009b24:	f7f6 feaa 	bl	800087c <__aeabi_ddiv>
 8009b28:	2d00      	cmp	r5, #0
 8009b2a:	f6bf af40 	bge.w	80099ae <__ieee754_pow+0x3e>
 8009b2e:	9b04      	ldr	r3, [sp, #16]
 8009b30:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009b34:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009b38:	431c      	orrs	r4, r3
 8009b3a:	d108      	bne.n	8009b4e <__ieee754_pow+0x1de>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4610      	mov	r0, r2
 8009b42:	4619      	mov	r1, r3
 8009b44:	f7f6 fbb8 	bl	80002b8 <__aeabi_dsub>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	e78f      	b.n	8009a6e <__ieee754_pow+0xfe>
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	f47f af2c 	bne.w	80099ae <__ieee754_pow+0x3e>
 8009b56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	e727      	b.n	80099ae <__ieee754_pow+0x3e>
 8009b5e:	0feb      	lsrs	r3, r5, #31
 8009b60:	3b01      	subs	r3, #1
 8009b62:	9306      	str	r3, [sp, #24]
 8009b64:	9a06      	ldr	r2, [sp, #24]
 8009b66:	9b04      	ldr	r3, [sp, #16]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	d102      	bne.n	8009b72 <__ieee754_pow+0x202>
 8009b6c:	4632      	mov	r2, r6
 8009b6e:	463b      	mov	r3, r7
 8009b70:	e7e6      	b.n	8009b40 <__ieee754_pow+0x1d0>
 8009b72:	4b19      	ldr	r3, [pc, #100]	; (8009bd8 <__ieee754_pow+0x268>)
 8009b74:	4598      	cmp	r8, r3
 8009b76:	f340 80fb 	ble.w	8009d70 <__ieee754_pow+0x400>
 8009b7a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009b7e:	4598      	cmp	r8, r3
 8009b80:	4b13      	ldr	r3, [pc, #76]	; (8009bd0 <__ieee754_pow+0x260>)
 8009b82:	dd0c      	ble.n	8009b9e <__ieee754_pow+0x22e>
 8009b84:	429c      	cmp	r4, r3
 8009b86:	dc0f      	bgt.n	8009ba8 <__ieee754_pow+0x238>
 8009b88:	f1b9 0f00 	cmp.w	r9, #0
 8009b8c:	da0f      	bge.n	8009bae <__ieee754_pow+0x23e>
 8009b8e:	2000      	movs	r0, #0
 8009b90:	b009      	add	sp, #36	; 0x24
 8009b92:	ecbd 8b06 	vpop	{d8-d10}
 8009b96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b9a:	f000 bcc2 	b.w	800a522 <__math_oflow>
 8009b9e:	429c      	cmp	r4, r3
 8009ba0:	dbf2      	blt.n	8009b88 <__ieee754_pow+0x218>
 8009ba2:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <__ieee754_pow+0x25c>)
 8009ba4:	429c      	cmp	r4, r3
 8009ba6:	dd19      	ble.n	8009bdc <__ieee754_pow+0x26c>
 8009ba8:	f1b9 0f00 	cmp.w	r9, #0
 8009bac:	dcef      	bgt.n	8009b8e <__ieee754_pow+0x21e>
 8009bae:	2000      	movs	r0, #0
 8009bb0:	b009      	add	sp, #36	; 0x24
 8009bb2:	ecbd 8b06 	vpop	{d8-d10}
 8009bb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bba:	f000 bca9 	b.w	800a510 <__math_uflow>
 8009bbe:	bf00      	nop
 8009bc0:	fff00000 	.word	0xfff00000
 8009bc4:	7ff00000 	.word	0x7ff00000
 8009bc8:	433fffff 	.word	0x433fffff
 8009bcc:	3ff00000 	.word	0x3ff00000
 8009bd0:	3fefffff 	.word	0x3fefffff
 8009bd4:	3fe00000 	.word	0x3fe00000
 8009bd8:	41e00000 	.word	0x41e00000
 8009bdc:	4b60      	ldr	r3, [pc, #384]	; (8009d60 <__ieee754_pow+0x3f0>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	f7f6 fb6a 	bl	80002b8 <__aeabi_dsub>
 8009be4:	a354      	add	r3, pc, #336	; (adr r3, 8009d38 <__ieee754_pow+0x3c8>)
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	4604      	mov	r4, r0
 8009bec:	460d      	mov	r5, r1
 8009bee:	f7f6 fd1b 	bl	8000628 <__aeabi_dmul>
 8009bf2:	a353      	add	r3, pc, #332	; (adr r3, 8009d40 <__ieee754_pow+0x3d0>)
 8009bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf8:	4606      	mov	r6, r0
 8009bfa:	460f      	mov	r7, r1
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	4629      	mov	r1, r5
 8009c00:	f7f6 fd12 	bl	8000628 <__aeabi_dmul>
 8009c04:	4b57      	ldr	r3, [pc, #348]	; (8009d64 <__ieee754_pow+0x3f4>)
 8009c06:	4682      	mov	sl, r0
 8009c08:	468b      	mov	fp, r1
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	4629      	mov	r1, r5
 8009c10:	f7f6 fd0a 	bl	8000628 <__aeabi_dmul>
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	a14b      	add	r1, pc, #300	; (adr r1, 8009d48 <__ieee754_pow+0x3d8>)
 8009c1a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c1e:	f7f6 fb4b 	bl	80002b8 <__aeabi_dsub>
 8009c22:	4622      	mov	r2, r4
 8009c24:	462b      	mov	r3, r5
 8009c26:	f7f6 fcff 	bl	8000628 <__aeabi_dmul>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	2000      	movs	r0, #0
 8009c30:	494d      	ldr	r1, [pc, #308]	; (8009d68 <__ieee754_pow+0x3f8>)
 8009c32:	f7f6 fb41 	bl	80002b8 <__aeabi_dsub>
 8009c36:	4622      	mov	r2, r4
 8009c38:	4680      	mov	r8, r0
 8009c3a:	4689      	mov	r9, r1
 8009c3c:	462b      	mov	r3, r5
 8009c3e:	4620      	mov	r0, r4
 8009c40:	4629      	mov	r1, r5
 8009c42:	f7f6 fcf1 	bl	8000628 <__aeabi_dmul>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	4649      	mov	r1, r9
 8009c4e:	f7f6 fceb 	bl	8000628 <__aeabi_dmul>
 8009c52:	a33f      	add	r3, pc, #252	; (adr r3, 8009d50 <__ieee754_pow+0x3e0>)
 8009c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c58:	f7f6 fce6 	bl	8000628 <__aeabi_dmul>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	460b      	mov	r3, r1
 8009c60:	4650      	mov	r0, sl
 8009c62:	4659      	mov	r1, fp
 8009c64:	f7f6 fb28 	bl	80002b8 <__aeabi_dsub>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	4689      	mov	r9, r1
 8009c70:	4630      	mov	r0, r6
 8009c72:	4639      	mov	r1, r7
 8009c74:	f7f6 fb22 	bl	80002bc <__adddf3>
 8009c78:	2000      	movs	r0, #0
 8009c7a:	4632      	mov	r2, r6
 8009c7c:	463b      	mov	r3, r7
 8009c7e:	4604      	mov	r4, r0
 8009c80:	460d      	mov	r5, r1
 8009c82:	f7f6 fb19 	bl	80002b8 <__aeabi_dsub>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4640      	mov	r0, r8
 8009c8c:	4649      	mov	r1, r9
 8009c8e:	f7f6 fb13 	bl	80002b8 <__aeabi_dsub>
 8009c92:	9b04      	ldr	r3, [sp, #16]
 8009c94:	9a06      	ldr	r2, [sp, #24]
 8009c96:	3b01      	subs	r3, #1
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	4682      	mov	sl, r0
 8009c9c:	468b      	mov	fp, r1
 8009c9e:	f040 81e7 	bne.w	800a070 <__ieee754_pow+0x700>
 8009ca2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009d58 <__ieee754_pow+0x3e8>
 8009ca6:	eeb0 8a47 	vmov.f32	s16, s14
 8009caa:	eef0 8a67 	vmov.f32	s17, s15
 8009cae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009cb2:	2600      	movs	r6, #0
 8009cb4:	4632      	mov	r2, r6
 8009cb6:	463b      	mov	r3, r7
 8009cb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cbc:	f7f6 fafc 	bl	80002b8 <__aeabi_dsub>
 8009cc0:	4622      	mov	r2, r4
 8009cc2:	462b      	mov	r3, r5
 8009cc4:	f7f6 fcb0 	bl	8000628 <__aeabi_dmul>
 8009cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ccc:	4680      	mov	r8, r0
 8009cce:	4689      	mov	r9, r1
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	4659      	mov	r1, fp
 8009cd4:	f7f6 fca8 	bl	8000628 <__aeabi_dmul>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	460b      	mov	r3, r1
 8009cdc:	4640      	mov	r0, r8
 8009cde:	4649      	mov	r1, r9
 8009ce0:	f7f6 faec 	bl	80002bc <__adddf3>
 8009ce4:	4632      	mov	r2, r6
 8009ce6:	463b      	mov	r3, r7
 8009ce8:	4680      	mov	r8, r0
 8009cea:	4689      	mov	r9, r1
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f7f6 fc9a 	bl	8000628 <__aeabi_dmul>
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4604      	mov	r4, r0
 8009cf8:	460d      	mov	r5, r1
 8009cfa:	4602      	mov	r2, r0
 8009cfc:	4649      	mov	r1, r9
 8009cfe:	4640      	mov	r0, r8
 8009d00:	f7f6 fadc 	bl	80002bc <__adddf3>
 8009d04:	4b19      	ldr	r3, [pc, #100]	; (8009d6c <__ieee754_pow+0x3fc>)
 8009d06:	4299      	cmp	r1, r3
 8009d08:	ec45 4b19 	vmov	d9, r4, r5
 8009d0c:	4606      	mov	r6, r0
 8009d0e:	460f      	mov	r7, r1
 8009d10:	468b      	mov	fp, r1
 8009d12:	f340 82f0 	ble.w	800a2f6 <__ieee754_pow+0x986>
 8009d16:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009d1a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009d1e:	4303      	orrs	r3, r0
 8009d20:	f000 81e4 	beq.w	800a0ec <__ieee754_pow+0x77c>
 8009d24:	ec51 0b18 	vmov	r0, r1, d8
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	f7f6 feee 	bl	8000b0c <__aeabi_dcmplt>
 8009d30:	3800      	subs	r0, #0
 8009d32:	bf18      	it	ne
 8009d34:	2001      	movne	r0, #1
 8009d36:	e72b      	b.n	8009b90 <__ieee754_pow+0x220>
 8009d38:	60000000 	.word	0x60000000
 8009d3c:	3ff71547 	.word	0x3ff71547
 8009d40:	f85ddf44 	.word	0xf85ddf44
 8009d44:	3e54ae0b 	.word	0x3e54ae0b
 8009d48:	55555555 	.word	0x55555555
 8009d4c:	3fd55555 	.word	0x3fd55555
 8009d50:	652b82fe 	.word	0x652b82fe
 8009d54:	3ff71547 	.word	0x3ff71547
 8009d58:	00000000 	.word	0x00000000
 8009d5c:	bff00000 	.word	0xbff00000
 8009d60:	3ff00000 	.word	0x3ff00000
 8009d64:	3fd00000 	.word	0x3fd00000
 8009d68:	3fe00000 	.word	0x3fe00000
 8009d6c:	408fffff 	.word	0x408fffff
 8009d70:	4bd5      	ldr	r3, [pc, #852]	; (800a0c8 <__ieee754_pow+0x758>)
 8009d72:	402b      	ands	r3, r5
 8009d74:	2200      	movs	r2, #0
 8009d76:	b92b      	cbnz	r3, 8009d84 <__ieee754_pow+0x414>
 8009d78:	4bd4      	ldr	r3, [pc, #848]	; (800a0cc <__ieee754_pow+0x75c>)
 8009d7a:	f7f6 fc55 	bl	8000628 <__aeabi_dmul>
 8009d7e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009d82:	460c      	mov	r4, r1
 8009d84:	1523      	asrs	r3, r4, #20
 8009d86:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009d8a:	4413      	add	r3, r2
 8009d8c:	9305      	str	r3, [sp, #20]
 8009d8e:	4bd0      	ldr	r3, [pc, #832]	; (800a0d0 <__ieee754_pow+0x760>)
 8009d90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d94:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009d98:	429c      	cmp	r4, r3
 8009d9a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009d9e:	dd08      	ble.n	8009db2 <__ieee754_pow+0x442>
 8009da0:	4bcc      	ldr	r3, [pc, #816]	; (800a0d4 <__ieee754_pow+0x764>)
 8009da2:	429c      	cmp	r4, r3
 8009da4:	f340 8162 	ble.w	800a06c <__ieee754_pow+0x6fc>
 8009da8:	9b05      	ldr	r3, [sp, #20]
 8009daa:	3301      	adds	r3, #1
 8009dac:	9305      	str	r3, [sp, #20]
 8009dae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009db2:	2400      	movs	r4, #0
 8009db4:	00e3      	lsls	r3, r4, #3
 8009db6:	9307      	str	r3, [sp, #28]
 8009db8:	4bc7      	ldr	r3, [pc, #796]	; (800a0d8 <__ieee754_pow+0x768>)
 8009dba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dbe:	ed93 7b00 	vldr	d7, [r3]
 8009dc2:	4629      	mov	r1, r5
 8009dc4:	ec53 2b17 	vmov	r2, r3, d7
 8009dc8:	eeb0 9a47 	vmov.f32	s18, s14
 8009dcc:	eef0 9a67 	vmov.f32	s19, s15
 8009dd0:	4682      	mov	sl, r0
 8009dd2:	f7f6 fa71 	bl	80002b8 <__aeabi_dsub>
 8009dd6:	4652      	mov	r2, sl
 8009dd8:	4606      	mov	r6, r0
 8009dda:	460f      	mov	r7, r1
 8009ddc:	462b      	mov	r3, r5
 8009dde:	ec51 0b19 	vmov	r0, r1, d9
 8009de2:	f7f6 fa6b 	bl	80002bc <__adddf3>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	2000      	movs	r0, #0
 8009dec:	49bb      	ldr	r1, [pc, #748]	; (800a0dc <__ieee754_pow+0x76c>)
 8009dee:	f7f6 fd45 	bl	800087c <__aeabi_ddiv>
 8009df2:	ec41 0b1a 	vmov	d10, r0, r1
 8009df6:	4602      	mov	r2, r0
 8009df8:	460b      	mov	r3, r1
 8009dfa:	4630      	mov	r0, r6
 8009dfc:	4639      	mov	r1, r7
 8009dfe:	f7f6 fc13 	bl	8000628 <__aeabi_dmul>
 8009e02:	2300      	movs	r3, #0
 8009e04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e08:	9302      	str	r3, [sp, #8]
 8009e0a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009e0e:	46ab      	mov	fp, r5
 8009e10:	106d      	asrs	r5, r5, #1
 8009e12:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009e16:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009e1a:	ec41 0b18 	vmov	d8, r0, r1
 8009e1e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009e22:	2200      	movs	r2, #0
 8009e24:	4640      	mov	r0, r8
 8009e26:	4649      	mov	r1, r9
 8009e28:	4614      	mov	r4, r2
 8009e2a:	461d      	mov	r5, r3
 8009e2c:	f7f6 fbfc 	bl	8000628 <__aeabi_dmul>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4630      	mov	r0, r6
 8009e36:	4639      	mov	r1, r7
 8009e38:	f7f6 fa3e 	bl	80002b8 <__aeabi_dsub>
 8009e3c:	ec53 2b19 	vmov	r2, r3, d9
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	4620      	mov	r0, r4
 8009e46:	4629      	mov	r1, r5
 8009e48:	f7f6 fa36 	bl	80002b8 <__aeabi_dsub>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	4650      	mov	r0, sl
 8009e52:	4659      	mov	r1, fp
 8009e54:	f7f6 fa30 	bl	80002b8 <__aeabi_dsub>
 8009e58:	4642      	mov	r2, r8
 8009e5a:	464b      	mov	r3, r9
 8009e5c:	f7f6 fbe4 	bl	8000628 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4630      	mov	r0, r6
 8009e66:	4639      	mov	r1, r7
 8009e68:	f7f6 fa26 	bl	80002b8 <__aeabi_dsub>
 8009e6c:	ec53 2b1a 	vmov	r2, r3, d10
 8009e70:	f7f6 fbda 	bl	8000628 <__aeabi_dmul>
 8009e74:	ec53 2b18 	vmov	r2, r3, d8
 8009e78:	ec41 0b19 	vmov	d9, r0, r1
 8009e7c:	ec51 0b18 	vmov	r0, r1, d8
 8009e80:	f7f6 fbd2 	bl	8000628 <__aeabi_dmul>
 8009e84:	a37c      	add	r3, pc, #496	; (adr r3, 800a078 <__ieee754_pow+0x708>)
 8009e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	460d      	mov	r5, r1
 8009e8e:	f7f6 fbcb 	bl	8000628 <__aeabi_dmul>
 8009e92:	a37b      	add	r3, pc, #492	; (adr r3, 800a080 <__ieee754_pow+0x710>)
 8009e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e98:	f7f6 fa10 	bl	80002bc <__adddf3>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	462b      	mov	r3, r5
 8009ea0:	f7f6 fbc2 	bl	8000628 <__aeabi_dmul>
 8009ea4:	a378      	add	r3, pc, #480	; (adr r3, 800a088 <__ieee754_pow+0x718>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	f7f6 fa07 	bl	80002bc <__adddf3>
 8009eae:	4622      	mov	r2, r4
 8009eb0:	462b      	mov	r3, r5
 8009eb2:	f7f6 fbb9 	bl	8000628 <__aeabi_dmul>
 8009eb6:	a376      	add	r3, pc, #472	; (adr r3, 800a090 <__ieee754_pow+0x720>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	f7f6 f9fe 	bl	80002bc <__adddf3>
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	462b      	mov	r3, r5
 8009ec4:	f7f6 fbb0 	bl	8000628 <__aeabi_dmul>
 8009ec8:	a373      	add	r3, pc, #460	; (adr r3, 800a098 <__ieee754_pow+0x728>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 f9f5 	bl	80002bc <__adddf3>
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	f7f6 fba7 	bl	8000628 <__aeabi_dmul>
 8009eda:	a371      	add	r3, pc, #452	; (adr r3, 800a0a0 <__ieee754_pow+0x730>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f7f6 f9ec 	bl	80002bc <__adddf3>
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4606      	mov	r6, r0
 8009ee8:	460f      	mov	r7, r1
 8009eea:	462b      	mov	r3, r5
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7f6 fb9a 	bl	8000628 <__aeabi_dmul>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	4630      	mov	r0, r6
 8009efa:	4639      	mov	r1, r7
 8009efc:	f7f6 fb94 	bl	8000628 <__aeabi_dmul>
 8009f00:	4642      	mov	r2, r8
 8009f02:	4604      	mov	r4, r0
 8009f04:	460d      	mov	r5, r1
 8009f06:	464b      	mov	r3, r9
 8009f08:	ec51 0b18 	vmov	r0, r1, d8
 8009f0c:	f7f6 f9d6 	bl	80002bc <__adddf3>
 8009f10:	ec53 2b19 	vmov	r2, r3, d9
 8009f14:	f7f6 fb88 	bl	8000628 <__aeabi_dmul>
 8009f18:	4622      	mov	r2, r4
 8009f1a:	462b      	mov	r3, r5
 8009f1c:	f7f6 f9ce 	bl	80002bc <__adddf3>
 8009f20:	4642      	mov	r2, r8
 8009f22:	4682      	mov	sl, r0
 8009f24:	468b      	mov	fp, r1
 8009f26:	464b      	mov	r3, r9
 8009f28:	4640      	mov	r0, r8
 8009f2a:	4649      	mov	r1, r9
 8009f2c:	f7f6 fb7c 	bl	8000628 <__aeabi_dmul>
 8009f30:	4b6b      	ldr	r3, [pc, #428]	; (800a0e0 <__ieee754_pow+0x770>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	4606      	mov	r6, r0
 8009f36:	460f      	mov	r7, r1
 8009f38:	f7f6 f9c0 	bl	80002bc <__adddf3>
 8009f3c:	4652      	mov	r2, sl
 8009f3e:	465b      	mov	r3, fp
 8009f40:	f7f6 f9bc 	bl	80002bc <__adddf3>
 8009f44:	2000      	movs	r0, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	460d      	mov	r5, r1
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	460b      	mov	r3, r1
 8009f4e:	4640      	mov	r0, r8
 8009f50:	4649      	mov	r1, r9
 8009f52:	f7f6 fb69 	bl	8000628 <__aeabi_dmul>
 8009f56:	4b62      	ldr	r3, [pc, #392]	; (800a0e0 <__ieee754_pow+0x770>)
 8009f58:	4680      	mov	r8, r0
 8009f5a:	4689      	mov	r9, r1
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	4620      	mov	r0, r4
 8009f60:	4629      	mov	r1, r5
 8009f62:	f7f6 f9a9 	bl	80002b8 <__aeabi_dsub>
 8009f66:	4632      	mov	r2, r6
 8009f68:	463b      	mov	r3, r7
 8009f6a:	f7f6 f9a5 	bl	80002b8 <__aeabi_dsub>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4650      	mov	r0, sl
 8009f74:	4659      	mov	r1, fp
 8009f76:	f7f6 f99f 	bl	80002b8 <__aeabi_dsub>
 8009f7a:	ec53 2b18 	vmov	r2, r3, d8
 8009f7e:	f7f6 fb53 	bl	8000628 <__aeabi_dmul>
 8009f82:	4622      	mov	r2, r4
 8009f84:	4606      	mov	r6, r0
 8009f86:	460f      	mov	r7, r1
 8009f88:	462b      	mov	r3, r5
 8009f8a:	ec51 0b19 	vmov	r0, r1, d9
 8009f8e:	f7f6 fb4b 	bl	8000628 <__aeabi_dmul>
 8009f92:	4602      	mov	r2, r0
 8009f94:	460b      	mov	r3, r1
 8009f96:	4630      	mov	r0, r6
 8009f98:	4639      	mov	r1, r7
 8009f9a:	f7f6 f98f 	bl	80002bc <__adddf3>
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	4602      	mov	r2, r0
 8009fa4:	460b      	mov	r3, r1
 8009fa6:	4640      	mov	r0, r8
 8009fa8:	4649      	mov	r1, r9
 8009faa:	f7f6 f987 	bl	80002bc <__adddf3>
 8009fae:	a33e      	add	r3, pc, #248	; (adr r3, 800a0a8 <__ieee754_pow+0x738>)
 8009fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	460d      	mov	r5, r1
 8009fba:	f7f6 fb35 	bl	8000628 <__aeabi_dmul>
 8009fbe:	4642      	mov	r2, r8
 8009fc0:	ec41 0b18 	vmov	d8, r0, r1
 8009fc4:	464b      	mov	r3, r9
 8009fc6:	4620      	mov	r0, r4
 8009fc8:	4629      	mov	r1, r5
 8009fca:	f7f6 f975 	bl	80002b8 <__aeabi_dsub>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	4639      	mov	r1, r7
 8009fd6:	f7f6 f96f 	bl	80002b8 <__aeabi_dsub>
 8009fda:	a335      	add	r3, pc, #212	; (adr r3, 800a0b0 <__ieee754_pow+0x740>)
 8009fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe0:	f7f6 fb22 	bl	8000628 <__aeabi_dmul>
 8009fe4:	a334      	add	r3, pc, #208	; (adr r3, 800a0b8 <__ieee754_pow+0x748>)
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	4606      	mov	r6, r0
 8009fec:	460f      	mov	r7, r1
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 fb19 	bl	8000628 <__aeabi_dmul>
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4630      	mov	r0, r6
 8009ffc:	4639      	mov	r1, r7
 8009ffe:	f7f6 f95d 	bl	80002bc <__adddf3>
 800a002:	9a07      	ldr	r2, [sp, #28]
 800a004:	4b37      	ldr	r3, [pc, #220]	; (800a0e4 <__ieee754_pow+0x774>)
 800a006:	4413      	add	r3, r2
 800a008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00c:	f7f6 f956 	bl	80002bc <__adddf3>
 800a010:	4682      	mov	sl, r0
 800a012:	9805      	ldr	r0, [sp, #20]
 800a014:	468b      	mov	fp, r1
 800a016:	f7f6 fa9d 	bl	8000554 <__aeabi_i2d>
 800a01a:	9a07      	ldr	r2, [sp, #28]
 800a01c:	4b32      	ldr	r3, [pc, #200]	; (800a0e8 <__ieee754_pow+0x778>)
 800a01e:	4413      	add	r3, r2
 800a020:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a024:	4606      	mov	r6, r0
 800a026:	460f      	mov	r7, r1
 800a028:	4652      	mov	r2, sl
 800a02a:	465b      	mov	r3, fp
 800a02c:	ec51 0b18 	vmov	r0, r1, d8
 800a030:	f7f6 f944 	bl	80002bc <__adddf3>
 800a034:	4642      	mov	r2, r8
 800a036:	464b      	mov	r3, r9
 800a038:	f7f6 f940 	bl	80002bc <__adddf3>
 800a03c:	4632      	mov	r2, r6
 800a03e:	463b      	mov	r3, r7
 800a040:	f7f6 f93c 	bl	80002bc <__adddf3>
 800a044:	2000      	movs	r0, #0
 800a046:	4632      	mov	r2, r6
 800a048:	463b      	mov	r3, r7
 800a04a:	4604      	mov	r4, r0
 800a04c:	460d      	mov	r5, r1
 800a04e:	f7f6 f933 	bl	80002b8 <__aeabi_dsub>
 800a052:	4642      	mov	r2, r8
 800a054:	464b      	mov	r3, r9
 800a056:	f7f6 f92f 	bl	80002b8 <__aeabi_dsub>
 800a05a:	ec53 2b18 	vmov	r2, r3, d8
 800a05e:	f7f6 f92b 	bl	80002b8 <__aeabi_dsub>
 800a062:	4602      	mov	r2, r0
 800a064:	460b      	mov	r3, r1
 800a066:	4650      	mov	r0, sl
 800a068:	4659      	mov	r1, fp
 800a06a:	e610      	b.n	8009c8e <__ieee754_pow+0x31e>
 800a06c:	2401      	movs	r4, #1
 800a06e:	e6a1      	b.n	8009db4 <__ieee754_pow+0x444>
 800a070:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a0c0 <__ieee754_pow+0x750>
 800a074:	e617      	b.n	8009ca6 <__ieee754_pow+0x336>
 800a076:	bf00      	nop
 800a078:	4a454eef 	.word	0x4a454eef
 800a07c:	3fca7e28 	.word	0x3fca7e28
 800a080:	93c9db65 	.word	0x93c9db65
 800a084:	3fcd864a 	.word	0x3fcd864a
 800a088:	a91d4101 	.word	0xa91d4101
 800a08c:	3fd17460 	.word	0x3fd17460
 800a090:	518f264d 	.word	0x518f264d
 800a094:	3fd55555 	.word	0x3fd55555
 800a098:	db6fabff 	.word	0xdb6fabff
 800a09c:	3fdb6db6 	.word	0x3fdb6db6
 800a0a0:	33333303 	.word	0x33333303
 800a0a4:	3fe33333 	.word	0x3fe33333
 800a0a8:	e0000000 	.word	0xe0000000
 800a0ac:	3feec709 	.word	0x3feec709
 800a0b0:	dc3a03fd 	.word	0xdc3a03fd
 800a0b4:	3feec709 	.word	0x3feec709
 800a0b8:	145b01f5 	.word	0x145b01f5
 800a0bc:	be3e2fe0 	.word	0xbe3e2fe0
 800a0c0:	00000000 	.word	0x00000000
 800a0c4:	3ff00000 	.word	0x3ff00000
 800a0c8:	7ff00000 	.word	0x7ff00000
 800a0cc:	43400000 	.word	0x43400000
 800a0d0:	0003988e 	.word	0x0003988e
 800a0d4:	000bb679 	.word	0x000bb679
 800a0d8:	0800a9a8 	.word	0x0800a9a8
 800a0dc:	3ff00000 	.word	0x3ff00000
 800a0e0:	40080000 	.word	0x40080000
 800a0e4:	0800a9c8 	.word	0x0800a9c8
 800a0e8:	0800a9b8 	.word	0x0800a9b8
 800a0ec:	a3b3      	add	r3, pc, #716	; (adr r3, 800a3bc <__ieee754_pow+0xa4c>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	4640      	mov	r0, r8
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	f7f6 f8e1 	bl	80002bc <__adddf3>
 800a0fa:	4622      	mov	r2, r4
 800a0fc:	ec41 0b1a 	vmov	d10, r0, r1
 800a100:	462b      	mov	r3, r5
 800a102:	4630      	mov	r0, r6
 800a104:	4639      	mov	r1, r7
 800a106:	f7f6 f8d7 	bl	80002b8 <__aeabi_dsub>
 800a10a:	4602      	mov	r2, r0
 800a10c:	460b      	mov	r3, r1
 800a10e:	ec51 0b1a 	vmov	r0, r1, d10
 800a112:	f7f6 fd19 	bl	8000b48 <__aeabi_dcmpgt>
 800a116:	2800      	cmp	r0, #0
 800a118:	f47f ae04 	bne.w	8009d24 <__ieee754_pow+0x3b4>
 800a11c:	4aa2      	ldr	r2, [pc, #648]	; (800a3a8 <__ieee754_pow+0xa38>)
 800a11e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a122:	4293      	cmp	r3, r2
 800a124:	f340 8107 	ble.w	800a336 <__ieee754_pow+0x9c6>
 800a128:	151b      	asrs	r3, r3, #20
 800a12a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a12e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a132:	fa4a fa03 	asr.w	sl, sl, r3
 800a136:	44da      	add	sl, fp
 800a138:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a13c:	489b      	ldr	r0, [pc, #620]	; (800a3ac <__ieee754_pow+0xa3c>)
 800a13e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a142:	4108      	asrs	r0, r1
 800a144:	ea00 030a 	and.w	r3, r0, sl
 800a148:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a14c:	f1c1 0114 	rsb	r1, r1, #20
 800a150:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a154:	fa4a fa01 	asr.w	sl, sl, r1
 800a158:	f1bb 0f00 	cmp.w	fp, #0
 800a15c:	f04f 0200 	mov.w	r2, #0
 800a160:	4620      	mov	r0, r4
 800a162:	4629      	mov	r1, r5
 800a164:	bfb8      	it	lt
 800a166:	f1ca 0a00 	rsblt	sl, sl, #0
 800a16a:	f7f6 f8a5 	bl	80002b8 <__aeabi_dsub>
 800a16e:	ec41 0b19 	vmov	d9, r0, r1
 800a172:	4642      	mov	r2, r8
 800a174:	464b      	mov	r3, r9
 800a176:	ec51 0b19 	vmov	r0, r1, d9
 800a17a:	f7f6 f89f 	bl	80002bc <__adddf3>
 800a17e:	a37a      	add	r3, pc, #488	; (adr r3, 800a368 <__ieee754_pow+0x9f8>)
 800a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a184:	2000      	movs	r0, #0
 800a186:	4604      	mov	r4, r0
 800a188:	460d      	mov	r5, r1
 800a18a:	f7f6 fa4d 	bl	8000628 <__aeabi_dmul>
 800a18e:	ec53 2b19 	vmov	r2, r3, d9
 800a192:	4606      	mov	r6, r0
 800a194:	460f      	mov	r7, r1
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f88d 	bl	80002b8 <__aeabi_dsub>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	f7f6 f887 	bl	80002b8 <__aeabi_dsub>
 800a1aa:	a371      	add	r3, pc, #452	; (adr r3, 800a370 <__ieee754_pow+0xa00>)
 800a1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b0:	f7f6 fa3a 	bl	8000628 <__aeabi_dmul>
 800a1b4:	a370      	add	r3, pc, #448	; (adr r3, 800a378 <__ieee754_pow+0xa08>)
 800a1b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ba:	4680      	mov	r8, r0
 800a1bc:	4689      	mov	r9, r1
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 fa31 	bl	8000628 <__aeabi_dmul>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	460b      	mov	r3, r1
 800a1ca:	4640      	mov	r0, r8
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	f7f6 f875 	bl	80002bc <__adddf3>
 800a1d2:	4604      	mov	r4, r0
 800a1d4:	460d      	mov	r5, r1
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4630      	mov	r0, r6
 800a1dc:	4639      	mov	r1, r7
 800a1de:	f7f6 f86d 	bl	80002bc <__adddf3>
 800a1e2:	4632      	mov	r2, r6
 800a1e4:	463b      	mov	r3, r7
 800a1e6:	4680      	mov	r8, r0
 800a1e8:	4689      	mov	r9, r1
 800a1ea:	f7f6 f865 	bl	80002b8 <__aeabi_dsub>
 800a1ee:	4602      	mov	r2, r0
 800a1f0:	460b      	mov	r3, r1
 800a1f2:	4620      	mov	r0, r4
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	f7f6 f85f 	bl	80002b8 <__aeabi_dsub>
 800a1fa:	4642      	mov	r2, r8
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	460f      	mov	r7, r1
 800a200:	464b      	mov	r3, r9
 800a202:	4640      	mov	r0, r8
 800a204:	4649      	mov	r1, r9
 800a206:	f7f6 fa0f 	bl	8000628 <__aeabi_dmul>
 800a20a:	a35d      	add	r3, pc, #372	; (adr r3, 800a380 <__ieee754_pow+0xa10>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	4604      	mov	r4, r0
 800a212:	460d      	mov	r5, r1
 800a214:	f7f6 fa08 	bl	8000628 <__aeabi_dmul>
 800a218:	a35b      	add	r3, pc, #364	; (adr r3, 800a388 <__ieee754_pow+0xa18>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 f84b 	bl	80002b8 <__aeabi_dsub>
 800a222:	4622      	mov	r2, r4
 800a224:	462b      	mov	r3, r5
 800a226:	f7f6 f9ff 	bl	8000628 <__aeabi_dmul>
 800a22a:	a359      	add	r3, pc, #356	; (adr r3, 800a390 <__ieee754_pow+0xa20>)
 800a22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a230:	f7f6 f844 	bl	80002bc <__adddf3>
 800a234:	4622      	mov	r2, r4
 800a236:	462b      	mov	r3, r5
 800a238:	f7f6 f9f6 	bl	8000628 <__aeabi_dmul>
 800a23c:	a356      	add	r3, pc, #344	; (adr r3, 800a398 <__ieee754_pow+0xa28>)
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	f7f6 f839 	bl	80002b8 <__aeabi_dsub>
 800a246:	4622      	mov	r2, r4
 800a248:	462b      	mov	r3, r5
 800a24a:	f7f6 f9ed 	bl	8000628 <__aeabi_dmul>
 800a24e:	a354      	add	r3, pc, #336	; (adr r3, 800a3a0 <__ieee754_pow+0xa30>)
 800a250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a254:	f7f6 f832 	bl	80002bc <__adddf3>
 800a258:	4622      	mov	r2, r4
 800a25a:	462b      	mov	r3, r5
 800a25c:	f7f6 f9e4 	bl	8000628 <__aeabi_dmul>
 800a260:	4602      	mov	r2, r0
 800a262:	460b      	mov	r3, r1
 800a264:	4640      	mov	r0, r8
 800a266:	4649      	mov	r1, r9
 800a268:	f7f6 f826 	bl	80002b8 <__aeabi_dsub>
 800a26c:	4604      	mov	r4, r0
 800a26e:	460d      	mov	r5, r1
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4640      	mov	r0, r8
 800a276:	4649      	mov	r1, r9
 800a278:	f7f6 f9d6 	bl	8000628 <__aeabi_dmul>
 800a27c:	2200      	movs	r2, #0
 800a27e:	ec41 0b19 	vmov	d9, r0, r1
 800a282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a286:	4620      	mov	r0, r4
 800a288:	4629      	mov	r1, r5
 800a28a:	f7f6 f815 	bl	80002b8 <__aeabi_dsub>
 800a28e:	4602      	mov	r2, r0
 800a290:	460b      	mov	r3, r1
 800a292:	ec51 0b19 	vmov	r0, r1, d9
 800a296:	f7f6 faf1 	bl	800087c <__aeabi_ddiv>
 800a29a:	4632      	mov	r2, r6
 800a29c:	4604      	mov	r4, r0
 800a29e:	460d      	mov	r5, r1
 800a2a0:	463b      	mov	r3, r7
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	4649      	mov	r1, r9
 800a2a6:	f7f6 f9bf 	bl	8000628 <__aeabi_dmul>
 800a2aa:	4632      	mov	r2, r6
 800a2ac:	463b      	mov	r3, r7
 800a2ae:	f7f6 f805 	bl	80002bc <__adddf3>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	4629      	mov	r1, r5
 800a2ba:	f7f5 fffd 	bl	80002b8 <__aeabi_dsub>
 800a2be:	4642      	mov	r2, r8
 800a2c0:	464b      	mov	r3, r9
 800a2c2:	f7f5 fff9 	bl	80002b8 <__aeabi_dsub>
 800a2c6:	460b      	mov	r3, r1
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	4939      	ldr	r1, [pc, #228]	; (800a3b0 <__ieee754_pow+0xa40>)
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	f7f5 fff3 	bl	80002b8 <__aeabi_dsub>
 800a2d2:	ec41 0b10 	vmov	d0, r0, r1
 800a2d6:	ee10 3a90 	vmov	r3, s1
 800a2da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a2de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2e2:	da2b      	bge.n	800a33c <__ieee754_pow+0x9cc>
 800a2e4:	4650      	mov	r0, sl
 800a2e6:	f000 f877 	bl	800a3d8 <scalbn>
 800a2ea:	ec51 0b10 	vmov	r0, r1, d0
 800a2ee:	ec53 2b18 	vmov	r2, r3, d8
 800a2f2:	f7ff bbee 	b.w	8009ad2 <__ieee754_pow+0x162>
 800a2f6:	4b2f      	ldr	r3, [pc, #188]	; (800a3b4 <__ieee754_pow+0xa44>)
 800a2f8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a2fc:	429e      	cmp	r6, r3
 800a2fe:	f77f af0d 	ble.w	800a11c <__ieee754_pow+0x7ac>
 800a302:	4b2d      	ldr	r3, [pc, #180]	; (800a3b8 <__ieee754_pow+0xa48>)
 800a304:	440b      	add	r3, r1
 800a306:	4303      	orrs	r3, r0
 800a308:	d009      	beq.n	800a31e <__ieee754_pow+0x9ae>
 800a30a:	ec51 0b18 	vmov	r0, r1, d8
 800a30e:	2200      	movs	r2, #0
 800a310:	2300      	movs	r3, #0
 800a312:	f7f6 fbfb 	bl	8000b0c <__aeabi_dcmplt>
 800a316:	3800      	subs	r0, #0
 800a318:	bf18      	it	ne
 800a31a:	2001      	movne	r0, #1
 800a31c:	e448      	b.n	8009bb0 <__ieee754_pow+0x240>
 800a31e:	4622      	mov	r2, r4
 800a320:	462b      	mov	r3, r5
 800a322:	f7f5 ffc9 	bl	80002b8 <__aeabi_dsub>
 800a326:	4642      	mov	r2, r8
 800a328:	464b      	mov	r3, r9
 800a32a:	f7f6 fc03 	bl	8000b34 <__aeabi_dcmpge>
 800a32e:	2800      	cmp	r0, #0
 800a330:	f43f aef4 	beq.w	800a11c <__ieee754_pow+0x7ac>
 800a334:	e7e9      	b.n	800a30a <__ieee754_pow+0x99a>
 800a336:	f04f 0a00 	mov.w	sl, #0
 800a33a:	e71a      	b.n	800a172 <__ieee754_pow+0x802>
 800a33c:	ec51 0b10 	vmov	r0, r1, d0
 800a340:	4619      	mov	r1, r3
 800a342:	e7d4      	b.n	800a2ee <__ieee754_pow+0x97e>
 800a344:	491a      	ldr	r1, [pc, #104]	; (800a3b0 <__ieee754_pow+0xa40>)
 800a346:	2000      	movs	r0, #0
 800a348:	f7ff bb31 	b.w	80099ae <__ieee754_pow+0x3e>
 800a34c:	2000      	movs	r0, #0
 800a34e:	2100      	movs	r1, #0
 800a350:	f7ff bb2d 	b.w	80099ae <__ieee754_pow+0x3e>
 800a354:	4630      	mov	r0, r6
 800a356:	4639      	mov	r1, r7
 800a358:	f7ff bb29 	b.w	80099ae <__ieee754_pow+0x3e>
 800a35c:	9204      	str	r2, [sp, #16]
 800a35e:	f7ff bb7b 	b.w	8009a58 <__ieee754_pow+0xe8>
 800a362:	2300      	movs	r3, #0
 800a364:	f7ff bb65 	b.w	8009a32 <__ieee754_pow+0xc2>
 800a368:	00000000 	.word	0x00000000
 800a36c:	3fe62e43 	.word	0x3fe62e43
 800a370:	fefa39ef 	.word	0xfefa39ef
 800a374:	3fe62e42 	.word	0x3fe62e42
 800a378:	0ca86c39 	.word	0x0ca86c39
 800a37c:	be205c61 	.word	0xbe205c61
 800a380:	72bea4d0 	.word	0x72bea4d0
 800a384:	3e663769 	.word	0x3e663769
 800a388:	c5d26bf1 	.word	0xc5d26bf1
 800a38c:	3ebbbd41 	.word	0x3ebbbd41
 800a390:	af25de2c 	.word	0xaf25de2c
 800a394:	3f11566a 	.word	0x3f11566a
 800a398:	16bebd93 	.word	0x16bebd93
 800a39c:	3f66c16c 	.word	0x3f66c16c
 800a3a0:	5555553e 	.word	0x5555553e
 800a3a4:	3fc55555 	.word	0x3fc55555
 800a3a8:	3fe00000 	.word	0x3fe00000
 800a3ac:	fff00000 	.word	0xfff00000
 800a3b0:	3ff00000 	.word	0x3ff00000
 800a3b4:	4090cbff 	.word	0x4090cbff
 800a3b8:	3f6f3400 	.word	0x3f6f3400
 800a3bc:	652b82fe 	.word	0x652b82fe
 800a3c0:	3c971547 	.word	0x3c971547

0800a3c4 <fabs>:
 800a3c4:	ec51 0b10 	vmov	r0, r1, d0
 800a3c8:	ee10 2a10 	vmov	r2, s0
 800a3cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3d0:	ec43 2b10 	vmov	d0, r2, r3
 800a3d4:	4770      	bx	lr
	...

0800a3d8 <scalbn>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	ec55 4b10 	vmov	r4, r5, d0
 800a3de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a3e2:	4606      	mov	r6, r0
 800a3e4:	462b      	mov	r3, r5
 800a3e6:	b999      	cbnz	r1, 800a410 <scalbn+0x38>
 800a3e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a3ec:	4323      	orrs	r3, r4
 800a3ee:	d03f      	beq.n	800a470 <scalbn+0x98>
 800a3f0:	4b35      	ldr	r3, [pc, #212]	; (800a4c8 <scalbn+0xf0>)
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	ee10 0a10 	vmov	r0, s0
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f7f6 f915 	bl	8000628 <__aeabi_dmul>
 800a3fe:	4b33      	ldr	r3, [pc, #204]	; (800a4cc <scalbn+0xf4>)
 800a400:	429e      	cmp	r6, r3
 800a402:	4604      	mov	r4, r0
 800a404:	460d      	mov	r5, r1
 800a406:	da10      	bge.n	800a42a <scalbn+0x52>
 800a408:	a327      	add	r3, pc, #156	; (adr r3, 800a4a8 <scalbn+0xd0>)
 800a40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40e:	e01f      	b.n	800a450 <scalbn+0x78>
 800a410:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800a414:	4291      	cmp	r1, r2
 800a416:	d10c      	bne.n	800a432 <scalbn+0x5a>
 800a418:	ee10 2a10 	vmov	r2, s0
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f5 ff4c 	bl	80002bc <__adddf3>
 800a424:	4604      	mov	r4, r0
 800a426:	460d      	mov	r5, r1
 800a428:	e022      	b.n	800a470 <scalbn+0x98>
 800a42a:	460b      	mov	r3, r1
 800a42c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a430:	3936      	subs	r1, #54	; 0x36
 800a432:	f24c 3250 	movw	r2, #50000	; 0xc350
 800a436:	4296      	cmp	r6, r2
 800a438:	dd0d      	ble.n	800a456 <scalbn+0x7e>
 800a43a:	2d00      	cmp	r5, #0
 800a43c:	a11c      	add	r1, pc, #112	; (adr r1, 800a4b0 <scalbn+0xd8>)
 800a43e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a442:	da02      	bge.n	800a44a <scalbn+0x72>
 800a444:	a11c      	add	r1, pc, #112	; (adr r1, 800a4b8 <scalbn+0xe0>)
 800a446:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a44a:	a319      	add	r3, pc, #100	; (adr r3, 800a4b0 <scalbn+0xd8>)
 800a44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a450:	f7f6 f8ea 	bl	8000628 <__aeabi_dmul>
 800a454:	e7e6      	b.n	800a424 <scalbn+0x4c>
 800a456:	1872      	adds	r2, r6, r1
 800a458:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a45c:	428a      	cmp	r2, r1
 800a45e:	dcec      	bgt.n	800a43a <scalbn+0x62>
 800a460:	2a00      	cmp	r2, #0
 800a462:	dd08      	ble.n	800a476 <scalbn+0x9e>
 800a464:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a468:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a46c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a470:	ec45 4b10 	vmov	d0, r4, r5
 800a474:	bd70      	pop	{r4, r5, r6, pc}
 800a476:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a47a:	da08      	bge.n	800a48e <scalbn+0xb6>
 800a47c:	2d00      	cmp	r5, #0
 800a47e:	a10a      	add	r1, pc, #40	; (adr r1, 800a4a8 <scalbn+0xd0>)
 800a480:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a484:	dac0      	bge.n	800a408 <scalbn+0x30>
 800a486:	a10e      	add	r1, pc, #56	; (adr r1, 800a4c0 <scalbn+0xe8>)
 800a488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a48c:	e7bc      	b.n	800a408 <scalbn+0x30>
 800a48e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a492:	3236      	adds	r2, #54	; 0x36
 800a494:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a498:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a49c:	4620      	mov	r0, r4
 800a49e:	4b0c      	ldr	r3, [pc, #48]	; (800a4d0 <scalbn+0xf8>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	e7d5      	b.n	800a450 <scalbn+0x78>
 800a4a4:	f3af 8000 	nop.w
 800a4a8:	c2f8f359 	.word	0xc2f8f359
 800a4ac:	01a56e1f 	.word	0x01a56e1f
 800a4b0:	8800759c 	.word	0x8800759c
 800a4b4:	7e37e43c 	.word	0x7e37e43c
 800a4b8:	8800759c 	.word	0x8800759c
 800a4bc:	fe37e43c 	.word	0xfe37e43c
 800a4c0:	c2f8f359 	.word	0xc2f8f359
 800a4c4:	81a56e1f 	.word	0x81a56e1f
 800a4c8:	43500000 	.word	0x43500000
 800a4cc:	ffff3cb0 	.word	0xffff3cb0
 800a4d0:	3c900000 	.word	0x3c900000

0800a4d4 <with_errno>:
 800a4d4:	b570      	push	{r4, r5, r6, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	460d      	mov	r5, r1
 800a4da:	4616      	mov	r6, r2
 800a4dc:	f7fd fa4a 	bl	8007974 <__errno>
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	6006      	str	r6, [r0, #0]
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	bd70      	pop	{r4, r5, r6, pc}

0800a4e8 <xflow>:
 800a4e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ea:	4614      	mov	r4, r2
 800a4ec:	461d      	mov	r5, r3
 800a4ee:	b108      	cbz	r0, 800a4f4 <xflow+0xc>
 800a4f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a4f4:	e9cd 2300 	strd	r2, r3, [sp]
 800a4f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	f7f6 f892 	bl	8000628 <__aeabi_dmul>
 800a504:	2222      	movs	r2, #34	; 0x22
 800a506:	b003      	add	sp, #12
 800a508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a50c:	f7ff bfe2 	b.w	800a4d4 <with_errno>

0800a510 <__math_uflow>:
 800a510:	b508      	push	{r3, lr}
 800a512:	2200      	movs	r2, #0
 800a514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a518:	f7ff ffe6 	bl	800a4e8 <xflow>
 800a51c:	ec41 0b10 	vmov	d0, r0, r1
 800a520:	bd08      	pop	{r3, pc}

0800a522 <__math_oflow>:
 800a522:	b508      	push	{r3, lr}
 800a524:	2200      	movs	r2, #0
 800a526:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800a52a:	f7ff ffdd 	bl	800a4e8 <xflow>
 800a52e:	ec41 0b10 	vmov	d0, r0, r1
 800a532:	bd08      	pop	{r3, pc}

0800a534 <_init>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	bf00      	nop
 800a538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53a:	bc08      	pop	{r3}
 800a53c:	469e      	mov	lr, r3
 800a53e:	4770      	bx	lr

0800a540 <_fini>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	bf00      	nop
 800a544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a546:	bc08      	pop	{r3}
 800a548:	469e      	mov	lr, r3
 800a54a:	4770      	bx	lr
