
rocket_ main_avionics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b98c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f8  0800bb60  0800bb60  0001bb60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c058  0800c058  00020250  2**0
                  CONTENTS
  4 .ARM          00000008  0800c058  0800c058  0001c058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c060  0800c060  00020250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c060  0800c060  0001c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c064  0800c064  0001c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  0800c068  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000594  20000250  0800c2b8  00020250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800c2b8  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020280  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013000  00000000  00000000  000202c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a39  00000000  00000000  000332c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00035d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e03  00000000  00000000  00036eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ffa  00000000  00000000  00037cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000169c2  00000000  00000000  0005bcb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6e1b  00000000  00000000  00072677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000060a0  00000000  00000000  00149494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014f534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000250 	.word	0x20000250
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb44 	.word	0x0800bb44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000254 	.word	0x20000254
 800020c:	0800bb44 	.word	0x0800bb44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_ldivmod>:
 8000cb8:	b97b      	cbnz	r3, 8000cda <__aeabi_ldivmod+0x22>
 8000cba:	b972      	cbnz	r2, 8000cda <__aeabi_ldivmod+0x22>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bfbe      	ittt	lt
 8000cc0:	2000      	movlt	r0, #0
 8000cc2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cc6:	e006      	blt.n	8000cd6 <__aeabi_ldivmod+0x1e>
 8000cc8:	bf08      	it	eq
 8000cca:	2800      	cmpeq	r0, #0
 8000ccc:	bf1c      	itt	ne
 8000cce:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000cd2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cd6:	f000 b9f1 	b.w	80010bc <__aeabi_idiv0>
 8000cda:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cde:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	db09      	blt.n	8000cfa <__aeabi_ldivmod+0x42>
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db1a      	blt.n	8000d20 <__aeabi_ldivmod+0x68>
 8000cea:	f000 f883 	bl	8000df4 <__udivmoddi4>
 8000cee:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf6:	b004      	add	sp, #16
 8000cf8:	4770      	bx	lr
 8000cfa:	4240      	negs	r0, r0
 8000cfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	db1b      	blt.n	8000d3c <__aeabi_ldivmod+0x84>
 8000d04:	f000 f876 	bl	8000df4 <__udivmoddi4>
 8000d08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d10:	b004      	add	sp, #16
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	4252      	negs	r2, r2
 8000d1a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d1e:	4770      	bx	lr
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	f000 f865 	bl	8000df4 <__udivmoddi4>
 8000d2a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d32:	b004      	add	sp, #16
 8000d34:	4240      	negs	r0, r0
 8000d36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d3a:	4770      	bx	lr
 8000d3c:	4252      	negs	r2, r2
 8000d3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d42:	f000 f857 	bl	8000df4 <__udivmoddi4>
 8000d46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d4e:	b004      	add	sp, #16
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a6 	b.w	80010bc <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff febb 	bl	8000b0c <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc31 	bl	8000628 <__aeabi_dmul>
 8000dc6:	f7ff ff07 	bl	8000bd8 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fbb2 	bl	8000534 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc28 	bl	8000628 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff fa6a 	bl	80002b8 <__aeabi_dsub>
 8000de4:	f7ff fef8 	bl	8000bd8 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9e08      	ldr	r6, [sp, #32]
 8000dfa:	460d      	mov	r5, r1
 8000dfc:	4604      	mov	r4, r0
 8000dfe:	460f      	mov	r7, r1
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d14a      	bne.n	8000e9a <__udivmoddi4+0xa6>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4694      	mov	ip, r2
 8000e08:	d965      	bls.n	8000ed6 <__udivmoddi4+0xe2>
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	b143      	cbz	r3, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e14:	f1c3 0220 	rsb	r2, r3, #32
 8000e18:	409f      	lsls	r7, r3
 8000e1a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1e:	4317      	orrs	r7, r2
 8000e20:	409c      	lsls	r4, r3
 8000e22:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e26:	fa1f f58c 	uxth.w	r5, ip
 8000e2a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e2e:	0c22      	lsrs	r2, r4, #16
 8000e30:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e38:	fb01 f005 	mul.w	r0, r1, r5
 8000e3c:	4290      	cmp	r0, r2
 8000e3e:	d90a      	bls.n	8000e56 <__udivmoddi4+0x62>
 8000e40:	eb1c 0202 	adds.w	r2, ip, r2
 8000e44:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e48:	f080 811c 	bcs.w	8001084 <__udivmoddi4+0x290>
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	f240 8119 	bls.w	8001084 <__udivmoddi4+0x290>
 8000e52:	3902      	subs	r1, #2
 8000e54:	4462      	add	r2, ip
 8000e56:	1a12      	subs	r2, r2, r0
 8000e58:	b2a4      	uxth	r4, r4
 8000e5a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e5e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e62:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e66:	fb00 f505 	mul.w	r5, r0, r5
 8000e6a:	42a5      	cmp	r5, r4
 8000e6c:	d90a      	bls.n	8000e84 <__udivmoddi4+0x90>
 8000e6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e72:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e76:	f080 8107 	bcs.w	8001088 <__udivmoddi4+0x294>
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	f240 8104 	bls.w	8001088 <__udivmoddi4+0x294>
 8000e80:	4464      	add	r4, ip
 8000e82:	3802      	subs	r0, #2
 8000e84:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	b11e      	cbz	r6, 8000e96 <__udivmoddi4+0xa2>
 8000e8e:	40dc      	lsrs	r4, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	e9c6 4300 	strd	r4, r3, [r6]
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0xbc>
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	f000 80ed 	beq.w	800107e <__udivmoddi4+0x28a>
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	fab3 f183 	clz	r1, r3
 8000eb4:	2900      	cmp	r1, #0
 8000eb6:	d149      	bne.n	8000f4c <__udivmoddi4+0x158>
 8000eb8:	42ab      	cmp	r3, r5
 8000eba:	d302      	bcc.n	8000ec2 <__udivmoddi4+0xce>
 8000ebc:	4282      	cmp	r2, r0
 8000ebe:	f200 80f8 	bhi.w	80010b2 <__udivmoddi4+0x2be>
 8000ec2:	1a84      	subs	r4, r0, r2
 8000ec4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ec8:	2001      	movs	r0, #1
 8000eca:	4617      	mov	r7, r2
 8000ecc:	2e00      	cmp	r6, #0
 8000ece:	d0e2      	beq.n	8000e96 <__udivmoddi4+0xa2>
 8000ed0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ed4:	e7df      	b.n	8000e96 <__udivmoddi4+0xa2>
 8000ed6:	b902      	cbnz	r2, 8000eda <__udivmoddi4+0xe6>
 8000ed8:	deff      	udf	#255	; 0xff
 8000eda:	fab2 f382 	clz	r3, r2
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f040 8090 	bne.w	8001004 <__udivmoddi4+0x210>
 8000ee4:	1a8a      	subs	r2, r1, r2
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2101      	movs	r1, #1
 8000ef0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ef4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ef8:	0c22      	lsrs	r2, r4, #16
 8000efa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000efe:	fb0e f005 	mul.w	r0, lr, r5
 8000f02:	4290      	cmp	r0, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x124>
 8000f06:	eb1c 0202 	adds.w	r2, ip, r2
 8000f0a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x122>
 8000f10:	4290      	cmp	r0, r2
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2b8>
 8000f16:	4645      	mov	r5, r8
 8000f18:	1a12      	subs	r2, r2, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f20:	fb07 2210 	mls	r2, r7, r0, r2
 8000f24:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x14e>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x14c>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2c2>
 8000f40:	4610      	mov	r0, r2
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f4a:	e79f      	b.n	8000e8c <__udivmoddi4+0x98>
 8000f4c:	f1c1 0720 	rsb	r7, r1, #32
 8000f50:	408b      	lsls	r3, r1
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f5e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f62:	40fd      	lsrs	r5, r7
 8000f64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f68:	4323      	orrs	r3, r4
 8000f6a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6e:	fa1f fe8c 	uxth.w	lr, ip
 8000f72:	fb09 5518 	mls	r5, r9, r8, r5
 8000f76:	0c1c      	lsrs	r4, r3, #16
 8000f78:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f7c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f80:	42a5      	cmp	r5, r4
 8000f82:	fa02 f201 	lsl.w	r2, r2, r1
 8000f86:	fa00 f001 	lsl.w	r0, r0, r1
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b0>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2b4>
 8000f98:	42a5      	cmp	r5, r4
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2b4>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4464      	add	r4, ip
 8000fa4:	1b64      	subs	r4, r4, r5
 8000fa6:	b29d      	uxth	r5, r3
 8000fa8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fac:	fb09 4413 	mls	r4, r9, r3, r4
 8000fb0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fb4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fb8:	45a6      	cmp	lr, r4
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1da>
 8000fbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fc0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2ac>
 8000fc6:	45a6      	cmp	lr, r4
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2ac>
 8000fca:	3b02      	subs	r3, #2
 8000fcc:	4464      	add	r4, ip
 8000fce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fd2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fd6:	eba4 040e 	sub.w	r4, r4, lr
 8000fda:	42ac      	cmp	r4, r5
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46ae      	mov	lr, r5
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x29c>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x298>
 8000fe4:	b156      	cbz	r6, 8000ffc <__udivmoddi4+0x208>
 8000fe6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fea:	eb64 040e 	sbc.w	r4, r4, lr
 8000fee:	fa04 f707 	lsl.w	r7, r4, r7
 8000ff2:	40ca      	lsrs	r2, r1
 8000ff4:	40cc      	lsrs	r4, r1
 8000ff6:	4317      	orrs	r7, r2
 8000ff8:	e9c6 7400 	strd	r7, r4, [r6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	2100      	movs	r1, #0
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	f1c3 0120 	rsb	r1, r3, #32
 8001008:	fa02 fc03 	lsl.w	ip, r2, r3
 800100c:	fa20 f201 	lsr.w	r2, r0, r1
 8001010:	fa25 f101 	lsr.w	r1, r5, r1
 8001014:	409d      	lsls	r5, r3
 8001016:	432a      	orrs	r2, r5
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb1 f0f7 	udiv	r0, r1, r7
 8001024:	fb07 1510 	mls	r5, r7, r0, r1
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800102e:	fb00 f50e 	mul.w	r5, r0, lr
 8001032:	428d      	cmp	r5, r1
 8001034:	fa04 f403 	lsl.w	r4, r4, r3
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x258>
 800103a:	eb1c 0101 	adds.w	r1, ip, r1
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b0>
 8001044:	428d      	cmp	r5, r1
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b0>
 8001048:	3802      	subs	r0, #2
 800104a:	4461      	add	r1, ip
 800104c:	1b49      	subs	r1, r1, r5
 800104e:	b292      	uxth	r2, r2
 8001050:	fbb1 f5f7 	udiv	r5, r1, r7
 8001054:	fb07 1115 	mls	r1, r7, r5, r1
 8001058:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800105c:	fb05 f10e 	mul.w	r1, r5, lr
 8001060:	4291      	cmp	r1, r2
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x282>
 8001064:	eb1c 0202 	adds.w	r2, ip, r2
 8001068:	f105 38ff 	add.w	r8, r5, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800106e:	4291      	cmp	r1, r2
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2a8>
 8001072:	3d02      	subs	r5, #2
 8001074:	4462      	add	r2, ip
 8001076:	1a52      	subs	r2, r2, r1
 8001078:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0xfc>
 800107e:	4631      	mov	r1, r6
 8001080:	4630      	mov	r0, r6
 8001082:	e708      	b.n	8000e96 <__udivmoddi4+0xa2>
 8001084:	4639      	mov	r1, r7
 8001086:	e6e6      	b.n	8000e56 <__udivmoddi4+0x62>
 8001088:	4610      	mov	r0, r2
 800108a:	e6fb      	b.n	8000e84 <__udivmoddi4+0x90>
 800108c:	4548      	cmp	r0, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f0>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001098:	3b01      	subs	r3, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f0>
 800109c:	4645      	mov	r5, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x282>
 80010a0:	462b      	mov	r3, r5
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1da>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x258>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b0>
 80010ac:	3d02      	subs	r5, #2
 80010ae:	4462      	add	r2, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x124>
 80010b2:	4608      	mov	r0, r1
 80010b4:	e70a      	b.n	8000ecc <__udivmoddi4+0xd8>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x14e>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <TrimRead>:
float SeaLevel = 1013.25;

//Read the Trimming parameters saved in the NVM ROM of the device
//This function came from datasheet page 24
void TrimRead(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af04      	add	r7, sp, #16
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	2319      	movs	r3, #25
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	4b69      	ldr	r3, [pc, #420]	; (8001278 <TrimRead+0x1b8>)
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	2288      	movs	r2, #136	; 0x88
 80010d8:	21ec      	movs	r1, #236	; 0xec
 80010da:	4868      	ldr	r0, [pc, #416]	; (800127c <TrimRead+0x1bc>)
 80010dc:	f003 fef2 	bl	8004ec4 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010e0:	4b67      	ldr	r3, [pc, #412]	; (8001280 <TrimRead+0x1c0>)
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	2207      	movs	r2, #7
 80010ea:	9201      	str	r2, [sp, #4]
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	22e1      	movs	r2, #225	; 0xe1
 80010f2:	21ec      	movs	r1, #236	; 0xec
 80010f4:	4861      	ldr	r0, [pc, #388]	; (800127c <TrimRead+0x1bc>)
 80010f6:	f003 fee5 	bl	8004ec4 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010fa:	4b5f      	ldr	r3, [pc, #380]	; (8001278 <TrimRead+0x1b8>)
 80010fc:	785b      	ldrb	r3, [r3, #1]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <TrimRead+0x1b8>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b21b      	sxth	r3, r3
 8001108:	4313      	orrs	r3, r2
 800110a:	b21b      	sxth	r3, r3
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <TrimRead+0x1c4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001112:	4b59      	ldr	r3, [pc, #356]	; (8001278 <TrimRead+0x1b8>)
 8001114:	78db      	ldrb	r3, [r3, #3]
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b21a      	sxth	r2, r3
 800111a:	4b57      	ldr	r3, [pc, #348]	; (8001278 <TrimRead+0x1b8>)
 800111c:	789b      	ldrb	r3, [r3, #2]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b58      	ldr	r3, [pc, #352]	; (8001288 <TrimRead+0x1c8>)
 8001126:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001128:	4b53      	ldr	r3, [pc, #332]	; (8001278 <TrimRead+0x1b8>)
 800112a:	795b      	ldrb	r3, [r3, #5]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b51      	ldr	r3, [pc, #324]	; (8001278 <TrimRead+0x1b8>)
 8001132:	791b      	ldrb	r3, [r3, #4]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <TrimRead+0x1cc>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800113e:	4b4e      	ldr	r3, [pc, #312]	; (8001278 <TrimRead+0x1b8>)
 8001140:	79db      	ldrb	r3, [r3, #7]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	4b4c      	ldr	r3, [pc, #304]	; (8001278 <TrimRead+0x1b8>)
 8001148:	795b      	ldrb	r3, [r3, #5]
 800114a:	b21b      	sxth	r3, r3
 800114c:	4313      	orrs	r3, r2
 800114e:	b21b      	sxth	r3, r3
 8001150:	b29a      	uxth	r2, r3
 8001152:	4b4f      	ldr	r3, [pc, #316]	; (8001290 <TrimRead+0x1d0>)
 8001154:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001156:	4b48      	ldr	r3, [pc, #288]	; (8001278 <TrimRead+0x1b8>)
 8001158:	7a5b      	ldrb	r3, [r3, #9]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <TrimRead+0x1b8>)
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <TrimRead+0x1d4>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800116c:	4b42      	ldr	r3, [pc, #264]	; (8001278 <TrimRead+0x1b8>)
 800116e:	7adb      	ldrb	r3, [r3, #11]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21a      	sxth	r2, r3
 8001174:	4b40      	ldr	r3, [pc, #256]	; (8001278 <TrimRead+0x1b8>)
 8001176:	7a9b      	ldrb	r3, [r3, #10]
 8001178:	b21b      	sxth	r3, r3
 800117a:	4313      	orrs	r3, r2
 800117c:	b21a      	sxth	r2, r3
 800117e:	4b46      	ldr	r3, [pc, #280]	; (8001298 <TrimRead+0x1d8>)
 8001180:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001182:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <TrimRead+0x1b8>)
 8001184:	7b5b      	ldrb	r3, [r3, #13]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <TrimRead+0x1b8>)
 800118c:	7b1b      	ldrb	r3, [r3, #12]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b41      	ldr	r3, [pc, #260]	; (800129c <TrimRead+0x1dc>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001198:	4b37      	ldr	r3, [pc, #220]	; (8001278 <TrimRead+0x1b8>)
 800119a:	7bdb      	ldrb	r3, [r3, #15]
 800119c:	021b      	lsls	r3, r3, #8
 800119e:	b21a      	sxth	r2, r3
 80011a0:	4b35      	ldr	r3, [pc, #212]	; (8001278 <TrimRead+0x1b8>)
 80011a2:	7b9b      	ldrb	r3, [r3, #14]
 80011a4:	b21b      	sxth	r3, r3
 80011a6:	4313      	orrs	r3, r2
 80011a8:	b21a      	sxth	r2, r3
 80011aa:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <TrimRead+0x1e0>)
 80011ac:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80011ae:	4b32      	ldr	r3, [pc, #200]	; (8001278 <TrimRead+0x1b8>)
 80011b0:	7c5b      	ldrb	r3, [r3, #17]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <TrimRead+0x1b8>)
 80011b8:	7c1b      	ldrb	r3, [r3, #16]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b38      	ldr	r3, [pc, #224]	; (80012a4 <TrimRead+0x1e4>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <TrimRead+0x1b8>)
 80011c6:	7cdb      	ldrb	r3, [r3, #19]
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <TrimRead+0x1b8>)
 80011ce:	7c9b      	ldrb	r3, [r3, #18]
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b34      	ldr	r3, [pc, #208]	; (80012a8 <TrimRead+0x1e8>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80011da:	4b27      	ldr	r3, [pc, #156]	; (8001278 <TrimRead+0x1b8>)
 80011dc:	7d5b      	ldrb	r3, [r3, #21]
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b21a      	sxth	r2, r3
 80011e2:	4b25      	ldr	r3, [pc, #148]	; (8001278 <TrimRead+0x1b8>)
 80011e4:	7d1b      	ldrb	r3, [r3, #20]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <TrimRead+0x1ec>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <TrimRead+0x1b8>)
 80011f2:	7ddb      	ldrb	r3, [r3, #23]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	b21a      	sxth	r2, r3
 80011f8:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <TrimRead+0x1b8>)
 80011fa:	7d9b      	ldrb	r3, [r3, #22]
 80011fc:	b21b      	sxth	r3, r3
 80011fe:	4313      	orrs	r3, r2
 8001200:	b21a      	sxth	r2, r3
 8001202:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <TrimRead+0x1f0>)
 8001204:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <TrimRead+0x1b8>)
 8001208:	7e1b      	ldrb	r3, [r3, #24]
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <TrimRead+0x1f4>)
 800120e:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <TrimRead+0x1b8>)
 8001212:	7e9b      	ldrb	r3, [r3, #26]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <TrimRead+0x1b8>)
 800121a:	7e5b      	ldrb	r3, [r3, #25]
 800121c:	b21b      	sxth	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b21a      	sxth	r2, r3
 8001222:	4b25      	ldr	r3, [pc, #148]	; (80012b8 <TrimRead+0x1f8>)
 8001224:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <TrimRead+0x1b8>)
 8001228:	7edb      	ldrb	r3, [r3, #27]
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b23      	ldr	r3, [pc, #140]	; (80012bc <TrimRead+0x1fc>)
 800122e:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <TrimRead+0x1b8>)
 8001232:	7f1b      	ldrb	r3, [r3, #28]
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	b21a      	sxth	r2, r3
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <TrimRead+0x1b8>)
 800123a:	7f5b      	ldrb	r3, [r3, #29]
 800123c:	b21b      	sxth	r3, r3
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	b21b      	sxth	r3, r3
 8001244:	4313      	orrs	r3, r2
 8001246:	b21a      	sxth	r2, r3
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <TrimRead+0x200>)
 800124a:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <TrimRead+0x1b8>)
 800124e:	7f9b      	ldrb	r3, [r3, #30]
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	b21a      	sxth	r2, r3
 8001254:	4b08      	ldr	r3, [pc, #32]	; (8001278 <TrimRead+0x1b8>)
 8001256:	7f5b      	ldrb	r3, [r3, #29]
 8001258:	091b      	lsrs	r3, r3, #4
 800125a:	b2db      	uxtb	r3, r3
 800125c:	b21b      	sxth	r3, r3
 800125e:	4313      	orrs	r3, r2
 8001260:	b21a      	sxth	r2, r3
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <TrimRead+0x204>)
 8001264:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <TrimRead+0x1b8>)
 8001268:	7fdb      	ldrb	r3, [r3, #31]
 800126a:	b21a      	sxth	r2, r3
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <TrimRead+0x208>)
 800126e:	801a      	strh	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000270 	.word	0x20000270
 800127c:	20000318 	.word	0x20000318
 8001280:	20000289 	.word	0x20000289
 8001284:	20000290 	.word	0x20000290
 8001288:	20000298 	.word	0x20000298
 800128c:	2000029a 	.word	0x2000029a
 8001290:	20000292 	.word	0x20000292
 8001294:	2000029c 	.word	0x2000029c
 8001298:	2000029e 	.word	0x2000029e
 800129c:	200002a0 	.word	0x200002a0
 80012a0:	200002a2 	.word	0x200002a2
 80012a4:	200002a4 	.word	0x200002a4
 80012a8:	200002a6 	.word	0x200002a6
 80012ac:	200002a8 	.word	0x200002a8
 80012b0:	200002aa 	.word	0x200002aa
 80012b4:	20000294 	.word	0x20000294
 80012b8:	200002ac 	.word	0x200002ac
 80012bc:	20000296 	.word	0x20000296
 80012c0:	200002ae 	.word	0x200002ae
 80012c4:	200002b0 	.word	0x200002b0
 80012c8:	200002b2 	.word	0x200002b2

080012cc <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b089      	sub	sp, #36	; 0x24
 80012d0:	af04      	add	r7, sp, #16
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	71fb      	strb	r3, [r7, #7]
 80012de:	4603      	mov	r3, r0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	717b      	strb	r3, [r7, #5]
 80012e6:	4613      	mov	r3, r2
 80012e8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80012ea:	f7ff fee9 	bl	80010c0 <TrimRead>

	uint8_t datatowrite = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80012f6:	23b6      	movs	r3, #182	; 0xb6
 80012f8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	9300      	str	r3, [sp, #0]
 800130a:	2301      	movs	r3, #1
 800130c:	22e0      	movs	r2, #224	; 0xe0
 800130e:	21ec      	movs	r1, #236	; 0xec
 8001310:	4858      	ldr	r0, [pc, #352]	; (8001474 <BME280_Config+0x1a8>)
 8001312:	f003 fcdd 	bl	8004cd0 <HAL_I2C_Mem_Write>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <BME280_Config+0x56>
	{
		return -1;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e0a3      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001322:	2064      	movs	r0, #100	; 0x64
 8001324:	f003 f81a 	bl	800435c <HAL_Delay>

	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001328:	797b      	ldrb	r3, [r7, #5]
 800132a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800132c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2301      	movs	r3, #1
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	f107 030f 	add.w	r3, r7, #15
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2301      	movs	r3, #1
 800133e:	22f2      	movs	r2, #242	; 0xf2
 8001340:	21ec      	movs	r1, #236	; 0xec
 8001342:	484c      	ldr	r0, [pc, #304]	; (8001474 <BME280_Config+0x1a8>)
 8001344:	f003 fcc4 	bl	8004cd0 <HAL_I2C_Mem_Write>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <BME280_Config+0x88>
	{
		return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e08a      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001354:	2064      	movs	r0, #100	; 0x64
 8001356:	f003 f801 	bl	800435c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	f107 030e 	add.w	r3, r7, #14
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	22f2      	movs	r2, #242	; 0xf2
 800136e:	21ec      	movs	r1, #236	; 0xec
 8001370:	4840      	ldr	r0, [pc, #256]	; (8001474 <BME280_Config+0x1a8>)
 8001372:	f003 fda7 	bl	8004ec4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001376:	7bba      	ldrb	r2, [r7, #14]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	429a      	cmp	r2, r3
 800137c:	d002      	beq.n	8001384 <BME280_Config+0xb8>
	{
		return -1;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e072      	b.n	800146a <BME280_Config+0x19e>
	}

	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001384:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001388:	015b      	lsls	r3, r3, #5
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	4313      	orrs	r3, r2
 8001396:	b25b      	sxtb	r3, r3
 8001398:	b2db      	uxtb	r3, r3
 800139a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800139c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2301      	movs	r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	2301      	movs	r3, #1
 80013ae:	22f5      	movs	r2, #245	; 0xf5
 80013b0:	21ec      	movs	r1, #236	; 0xec
 80013b2:	4830      	ldr	r0, [pc, #192]	; (8001474 <BME280_Config+0x1a8>)
 80013b4:	f003 fc8c 	bl	8004cd0 <HAL_I2C_Mem_Write>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <BME280_Config+0xf8>
	{
		return -1;
 80013be:	f04f 33ff 	mov.w	r3, #4294967295
 80013c2:	e052      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013c4:	2064      	movs	r0, #100	; 0x64
 80013c6:	f002 ffc9 	bl	800435c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 80013ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ce:	9302      	str	r3, [sp, #8]
 80013d0:	2301      	movs	r3, #1
 80013d2:	9301      	str	r3, [sp, #4]
 80013d4:	f107 030e 	add.w	r3, r7, #14
 80013d8:	9300      	str	r3, [sp, #0]
 80013da:	2301      	movs	r3, #1
 80013dc:	22f5      	movs	r2, #245	; 0xf5
 80013de:	21ec      	movs	r1, #236	; 0xec
 80013e0:	4824      	ldr	r0, [pc, #144]	; (8001474 <BME280_Config+0x1a8>)
 80013e2:	f003 fd6f 	bl	8004ec4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013e6:	7bba      	ldrb	r2, [r7, #14]
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d002      	beq.n	80013f4 <BME280_Config+0x128>
	{
		return -1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e03a      	b.n	800146a <BME280_Config+0x19e>
	}
	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	b25a      	sxtb	r2, r3
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	4313      	orrs	r3, r2
 8001402:	b25a      	sxtb	r2, r3
 8001404:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001408:	4313      	orrs	r3, r2
 800140a:	b25b      	sxtb	r3, r3
 800140c:	b2db      	uxtb	r3, r3
 800140e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	f107 030f 	add.w	r3, r7, #15
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	2301      	movs	r3, #1
 8001422:	22f4      	movs	r2, #244	; 0xf4
 8001424:	21ec      	movs	r1, #236	; 0xec
 8001426:	4813      	ldr	r0, [pc, #76]	; (8001474 <BME280_Config+0x1a8>)
 8001428:	f003 fc52 	bl	8004cd0 <HAL_I2C_Mem_Write>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <BME280_Config+0x16c>
	{
		return -1;
 8001432:	f04f 33ff 	mov.w	r3, #4294967295
 8001436:	e018      	b.n	800146a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001438:	2064      	movs	r0, #100	; 0x64
 800143a:	f002 ff8f 	bl	800435c <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800143e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	2301      	movs	r3, #1
 8001446:	9301      	str	r3, [sp, #4]
 8001448:	f107 030e 	add.w	r3, r7, #14
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	2301      	movs	r3, #1
 8001450:	22f4      	movs	r2, #244	; 0xf4
 8001452:	21ec      	movs	r1, #236	; 0xec
 8001454:	4807      	ldr	r0, [pc, #28]	; (8001474 <BME280_Config+0x1a8>)
 8001456:	f003 fd35 	bl	8004ec4 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800145a:	7bba      	ldrb	r2, [r7, #14]
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	429a      	cmp	r2, r3
 8001460:	d002      	beq.n	8001468 <BME280_Config+0x19c>
	{
		return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e000      	b.n	800146a <BME280_Config+0x19e>
	}
	return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000318 	.word	0x20000318

08001478 <BMEReadRaw>:

int BMEReadRaw(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800147e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001482:	9302      	str	r3, [sp, #8]
 8001484:	2301      	movs	r3, #1
 8001486:	9301      	str	r3, [sp, #4]
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <BMEReadRaw+0x8c>)
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2301      	movs	r3, #1
 800148e:	22d0      	movs	r2, #208	; 0xd0
 8001490:	21ec      	movs	r1, #236	; 0xec
 8001492:	481d      	ldr	r0, [pc, #116]	; (8001508 <BMEReadRaw+0x90>)
 8001494:	f003 fd16 	bl	8004ec4 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001498:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <BMEReadRaw+0x8c>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b60      	cmp	r3, #96	; 0x60
 800149e:	d12a      	bne.n	80014f6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2308      	movs	r3, #8
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	463b      	mov	r3, r7
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	2301      	movs	r3, #1
 80014b0:	22f7      	movs	r2, #247	; 0xf7
 80014b2:	21ec      	movs	r1, #236	; 0xec
 80014b4:	4814      	ldr	r0, [pc, #80]	; (8001508 <BMEReadRaw+0x90>)
 80014b6:	f003 fd05 	bl	8004ec4 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80014ba:	783b      	ldrb	r3, [r7, #0]
 80014bc:	031a      	lsls	r2, r3, #12
 80014be:	787b      	ldrb	r3, [r7, #1]
 80014c0:	011b      	lsls	r3, r3, #4
 80014c2:	4313      	orrs	r3, r2
 80014c4:	78ba      	ldrb	r2, [r7, #2]
 80014c6:	0912      	lsrs	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	4313      	orrs	r3, r2
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <BMEReadRaw+0x94>)
 80014ce:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	031a      	lsls	r2, r3, #12
 80014d4:	793b      	ldrb	r3, [r7, #4]
 80014d6:	011b      	lsls	r3, r3, #4
 80014d8:	4313      	orrs	r3, r2
 80014da:	797a      	ldrb	r2, [r7, #5]
 80014dc:	0912      	lsrs	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	4313      	orrs	r3, r2
 80014e2:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <BMEReadRaw+0x98>)
 80014e4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	021b      	lsls	r3, r3, #8
 80014ea:	79fa      	ldrb	r2, [r7, #7]
 80014ec:	4313      	orrs	r3, r2
 80014ee:	4a09      	ldr	r2, [pc, #36]	; (8001514 <BMEReadRaw+0x9c>)
 80014f0:	6013      	str	r3, [r2, #0]

		return 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e001      	b.n	80014fa <BMEReadRaw+0x82>
	}
	else return -1;
 80014f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	2000026c 	.word	0x2000026c
 8001508:	20000318 	.word	0x20000318
 800150c:	200002b8 	.word	0x200002b8
 8001510:	200002b4 	.word	0x200002b4
 8001514:	200002bc 	.word	0x200002bc

08001518 <BME280_compensate_T_int32>:
	HAL_Delay (100);
}

int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001518:	b480      	push	{r7}
 800151a:	b087      	sub	sp, #28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	10da      	asrs	r2, r3, #3
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001526:	881b      	ldrh	r3, [r3, #0]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	4a18      	ldr	r2, [pc, #96]	; (8001590 <BME280_compensate_T_int32+0x78>)
 800152e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001532:	fb02 f303 	mul.w	r3, r2, r3
 8001536:	12db      	asrs	r3, r3, #11
 8001538:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	111b      	asrs	r3, r3, #4
 800153e:	4a13      	ldr	r2, [pc, #76]	; (800158c <BME280_compensate_T_int32+0x74>)
 8001540:	8812      	ldrh	r2, [r2, #0]
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	1112      	asrs	r2, r2, #4
 8001548:	4910      	ldr	r1, [pc, #64]	; (800158c <BME280_compensate_T_int32+0x74>)
 800154a:	8809      	ldrh	r1, [r1, #0]
 800154c:	1a52      	subs	r2, r2, r1
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	131b      	asrs	r3, r3, #12
 8001554:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <BME280_compensate_T_int32+0x7c>)
 8001556:	f9b2 2000 	ldrsh.w	r2, [r2]
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	139b      	asrs	r3, r3, #14
 8001560:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4413      	add	r3, r2
 8001568:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <BME280_compensate_T_int32+0x80>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	3380      	adds	r3, #128	; 0x80
 8001578:	121b      	asrs	r3, r3, #8
 800157a:	60fb      	str	r3, [r7, #12]
	return T;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000290 	.word	0x20000290
 8001590:	20000298 	.word	0x20000298
 8001594:	2000029a 	.word	0x2000029a
 8001598:	200002c8 	.word	0x200002c8

0800159c <BME280_compensate_P_int64>:

uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800159c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015a0:	b0ca      	sub	sp, #296	; 0x128
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 80015a8:	4baf      	ldr	r3, [pc, #700]	; (8001868 <BME280_compensate_P_int64+0x2cc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	17da      	asrs	r2, r3, #31
 80015ae:	461c      	mov	r4, r3
 80015b0:	4615      	mov	r5, r2
 80015b2:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 80015b6:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015ba:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80015be:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015c6:	fb03 f102 	mul.w	r1, r3, r2
 80015ca:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d2:	fb02 f303 	mul.w	r3, r2, r3
 80015d6:	18ca      	adds	r2, r1, r3
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015dc:	fba3 8903 	umull	r8, r9, r3, r3
 80015e0:	eb02 0309 	add.w	r3, r2, r9
 80015e4:	4699      	mov	r9, r3
 80015e6:	4ba1      	ldr	r3, [pc, #644]	; (800186c <BME280_compensate_P_int64+0x2d0>)
 80015e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	17da      	asrs	r2, r3, #31
 80015f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80015f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80015f8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80015fc:	4603      	mov	r3, r0
 80015fe:	fb03 f209 	mul.w	r2, r3, r9
 8001602:	460b      	mov	r3, r1
 8001604:	fb08 f303 	mul.w	r3, r8, r3
 8001608:	4413      	add	r3, r2
 800160a:	4602      	mov	r2, r0
 800160c:	fba8 1202 	umull	r1, r2, r8, r2
 8001610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001614:	460a      	mov	r2, r1
 8001616:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 800161a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800161e:	4413      	add	r3, r2
 8001620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001624:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8001628:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 800162c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001630:	4b8f      	ldr	r3, [pc, #572]	; (8001870 <BME280_compensate_P_int64+0x2d4>)
 8001632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001636:	b21b      	sxth	r3, r3
 8001638:	17da      	asrs	r2, r3, #31
 800163a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800163e:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001642:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001646:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800164a:	462a      	mov	r2, r5
 800164c:	fb02 f203 	mul.w	r2, r2, r3
 8001650:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001654:	4621      	mov	r1, r4
 8001656:	fb01 f303 	mul.w	r3, r1, r3
 800165a:	441a      	add	r2, r3
 800165c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001660:	4621      	mov	r1, r4
 8001662:	fba3 1301 	umull	r1, r3, r3, r1
 8001666:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800166a:	460b      	mov	r3, r1
 800166c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800167a:	f04f 0000 	mov.w	r0, #0
 800167e:	f04f 0100 	mov.w	r1, #0
 8001682:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001686:	462b      	mov	r3, r5
 8001688:	0459      	lsls	r1, r3, #17
 800168a:	4623      	mov	r3, r4
 800168c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001690:	4623      	mov	r3, r4
 8001692:	0458      	lsls	r0, r3, #17
 8001694:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001698:	1814      	adds	r4, r2, r0
 800169a:	643c      	str	r4, [r7, #64]	; 0x40
 800169c:	414b      	adcs	r3, r1
 800169e:	647b      	str	r3, [r7, #68]	; 0x44
 80016a0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80016a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 80016a8:	4b72      	ldr	r3, [pc, #456]	; (8001874 <BME280_compensate_P_int64+0x2d8>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	17da      	asrs	r2, r3, #31
 80016b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80016b6:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	2000      	movs	r0, #0
 80016ca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80016ce:	1814      	adds	r4, r2, r0
 80016d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80016d2:	414b      	adcs	r3, r1
 80016d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016d6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80016da:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80016de:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016e6:	fb03 f102 	mul.w	r1, r3, r2
 80016ea:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80016ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	18ca      	adds	r2, r1, r3
 80016f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016fc:	fba3 1303 	umull	r1, r3, r3, r3
 8001700:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001704:	460b      	mov	r3, r1
 8001706:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800170a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800170e:	18d3      	adds	r3, r2, r3
 8001710:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001714:	4b58      	ldr	r3, [pc, #352]	; (8001878 <BME280_compensate_P_int64+0x2dc>)
 8001716:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171a:	b21b      	sxth	r3, r3
 800171c:	17da      	asrs	r2, r3, #31
 800171e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001722:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001726:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800172a:	462b      	mov	r3, r5
 800172c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001730:	4642      	mov	r2, r8
 8001732:	fb02 f203 	mul.w	r2, r2, r3
 8001736:	464b      	mov	r3, r9
 8001738:	4621      	mov	r1, r4
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	4622      	mov	r2, r4
 8001742:	4641      	mov	r1, r8
 8001744:	fba2 1201 	umull	r1, r2, r2, r1
 8001748:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800174c:	460a      	mov	r2, r1
 800174e:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8001752:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001756:	4413      	add	r3, r2
 8001758:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 8001768:	4623      	mov	r3, r4
 800176a:	0a18      	lsrs	r0, r3, #8
 800176c:	462b      	mov	r3, r5
 800176e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001772:	462b      	mov	r3, r5
 8001774:	1219      	asrs	r1, r3, #8
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <BME280_compensate_P_int64+0x2e0>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	b21b      	sxth	r3, r3
 800177e:	17da      	asrs	r2, r3, #31
 8001780:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001784:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001788:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800178c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001790:	464a      	mov	r2, r9
 8001792:	fb02 f203 	mul.w	r2, r2, r3
 8001796:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800179a:	4644      	mov	r4, r8
 800179c:	fb04 f303 	mul.w	r3, r4, r3
 80017a0:	441a      	add	r2, r3
 80017a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80017a6:	4644      	mov	r4, r8
 80017a8:	fba3 4304 	umull	r4, r3, r3, r4
 80017ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017b0:	4623      	mov	r3, r4
 80017b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80017b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80017ba:	18d3      	adds	r3, r2, r3
 80017bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80017cc:	464c      	mov	r4, r9
 80017ce:	0323      	lsls	r3, r4, #12
 80017d0:	4644      	mov	r4, r8
 80017d2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017d6:	4644      	mov	r4, r8
 80017d8:	0322      	lsls	r2, r4, #12
 80017da:	1884      	adds	r4, r0, r2
 80017dc:	633c      	str	r4, [r7, #48]	; 0x30
 80017de:	eb41 0303 	adc.w	r3, r1, r3
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
 80017e4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80017e8:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80017ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017f0:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 80017f4:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 80017f8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <BME280_compensate_P_int64+0x2e4>)
 80017fe:	881b      	ldrh	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	2200      	movs	r2, #0
 8001804:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001808:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800180c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001810:	462b      	mov	r3, r5
 8001812:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001816:	4642      	mov	r2, r8
 8001818:	fb02 f203 	mul.w	r2, r2, r3
 800181c:	464b      	mov	r3, r9
 800181e:	4621      	mov	r1, r4
 8001820:	fb01 f303 	mul.w	r3, r1, r3
 8001824:	4413      	add	r3, r2
 8001826:	4622      	mov	r2, r4
 8001828:	4641      	mov	r1, r8
 800182a:	fba2 1201 	umull	r1, r2, r2, r1
 800182e:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 8001832:	460a      	mov	r2, r1
 8001834:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 8001838:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800183c:	4413      	add	r3, r2
 800183e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800184e:	4629      	mov	r1, r5
 8001850:	104a      	asrs	r2, r1, #1
 8001852:	4629      	mov	r1, r5
 8001854:	17cb      	asrs	r3, r1, #31
 8001856:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 800185a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800185e:	4313      	orrs	r3, r2
 8001860:	d110      	bne.n	8001884 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001862:	2300      	movs	r3, #0
 8001864:	e154      	b.n	8001b10 <BME280_compensate_P_int64+0x574>
 8001866:	bf00      	nop
 8001868:	200002c8 	.word	0x200002c8
 800186c:	200002a4 	.word	0x200002a4
 8001870:	200002a2 	.word	0x200002a2
 8001874:	200002a0 	.word	0x200002a0
 8001878:	2000029e 	.word	0x2000029e
 800187c:	2000029c 	.word	0x2000029c
 8001880:	20000292 	.word	0x20000292
	}
	p = 1048576-adc_P;
 8001884:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001888:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 800188c:	17da      	asrs	r2, r3, #31
 800188e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001890:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001892:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001896:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800189a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800189e:	105b      	asrs	r3, r3, #1
 80018a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80018a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80018a8:	07db      	lsls	r3, r3, #31
 80018aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80018ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80018b2:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80018b6:	4621      	mov	r1, r4
 80018b8:	1a89      	subs	r1, r1, r2
 80018ba:	67b9      	str	r1, [r7, #120]	; 0x78
 80018bc:	4629      	mov	r1, r5
 80018be:	eb61 0303 	sbc.w	r3, r1, r3
 80018c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80018c4:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80018c8:	4622      	mov	r2, r4
 80018ca:	462b      	mov	r3, r5
 80018cc:	1891      	adds	r1, r2, r2
 80018ce:	6239      	str	r1, [r7, #32]
 80018d0:	415b      	adcs	r3, r3
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
 80018d4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018d8:	4621      	mov	r1, r4
 80018da:	1851      	adds	r1, r2, r1
 80018dc:	61b9      	str	r1, [r7, #24]
 80018de:	4629      	mov	r1, r5
 80018e0:	414b      	adcs	r3, r1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018f0:	4649      	mov	r1, r9
 80018f2:	018b      	lsls	r3, r1, #6
 80018f4:	4641      	mov	r1, r8
 80018f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fa:	4641      	mov	r1, r8
 80018fc:	018a      	lsls	r2, r1, #6
 80018fe:	4641      	mov	r1, r8
 8001900:	1889      	adds	r1, r1, r2
 8001902:	6139      	str	r1, [r7, #16]
 8001904:	4649      	mov	r1, r9
 8001906:	eb43 0101 	adc.w	r1, r3, r1
 800190a:	6179      	str	r1, [r7, #20]
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001918:	4649      	mov	r1, r9
 800191a:	008b      	lsls	r3, r1, #2
 800191c:	4641      	mov	r1, r8
 800191e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001922:	4641      	mov	r1, r8
 8001924:	008a      	lsls	r2, r1, #2
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	4603      	mov	r3, r0
 800192c:	4622      	mov	r2, r4
 800192e:	189b      	adds	r3, r3, r2
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	460b      	mov	r3, r1
 8001934:	462a      	mov	r2, r5
 8001936:	eb42 0303 	adc.w	r3, r2, r3
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	f04f 0300 	mov.w	r3, #0
 8001944:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001948:	4649      	mov	r1, r9
 800194a:	008b      	lsls	r3, r1, #2
 800194c:	4641      	mov	r1, r8
 800194e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001952:	4641      	mov	r1, r8
 8001954:	008a      	lsls	r2, r1, #2
 8001956:	4610      	mov	r0, r2
 8001958:	4619      	mov	r1, r3
 800195a:	4603      	mov	r3, r0
 800195c:	4622      	mov	r2, r4
 800195e:	189b      	adds	r3, r3, r2
 8001960:	673b      	str	r3, [r7, #112]	; 0x70
 8001962:	462b      	mov	r3, r5
 8001964:	460a      	mov	r2, r1
 8001966:	eb42 0303 	adc.w	r3, r2, r3
 800196a:	677b      	str	r3, [r7, #116]	; 0x74
 800196c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001970:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001974:	f7ff f9a0 	bl	8000cb8 <__aeabi_ldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001980:	4b66      	ldr	r3, [pc, #408]	; (8001b1c <BME280_compensate_P_int64+0x580>)
 8001982:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001986:	b21b      	sxth	r3, r3
 8001988:	17da      	asrs	r2, r3, #31
 800198a:	66bb      	str	r3, [r7, #104]	; 0x68
 800198c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800198e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8001992:	f04f 0000 	mov.w	r0, #0
 8001996:	f04f 0100 	mov.w	r1, #0
 800199a:	0b50      	lsrs	r0, r2, #13
 800199c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a0:	1359      	asrs	r1, r3, #13
 80019a2:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80019a6:	462b      	mov	r3, r5
 80019a8:	fb00 f203 	mul.w	r2, r0, r3
 80019ac:	4623      	mov	r3, r4
 80019ae:	fb03 f301 	mul.w	r3, r3, r1
 80019b2:	4413      	add	r3, r2
 80019b4:	4622      	mov	r2, r4
 80019b6:	fba2 1200 	umull	r1, r2, r2, r0
 80019ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80019be:	460a      	mov	r2, r1
 80019c0:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 80019c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80019ce:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80019d2:	f04f 0000 	mov.w	r0, #0
 80019d6:	f04f 0100 	mov.w	r1, #0
 80019da:	0b50      	lsrs	r0, r2, #13
 80019dc:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019e0:	1359      	asrs	r1, r3, #13
 80019e2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80019e6:	462b      	mov	r3, r5
 80019e8:	fb00 f203 	mul.w	r2, r0, r3
 80019ec:	4623      	mov	r3, r4
 80019ee:	fb03 f301 	mul.w	r3, r3, r1
 80019f2:	4413      	add	r3, r2
 80019f4:	4622      	mov	r2, r4
 80019f6:	fba2 1200 	umull	r1, r2, r2, r0
 80019fa:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80019fe:	460a      	mov	r2, r1
 8001a00:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001a04:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001a08:	4413      	add	r3, r2
 8001a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	0e4a      	lsrs	r2, r1, #25
 8001a1e:	4629      	mov	r1, r5
 8001a20:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a24:	4629      	mov	r1, r5
 8001a26:	164b      	asrs	r3, r1, #25
 8001a28:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <BME280_compensate_P_int64+0x584>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	b21b      	sxth	r3, r3
 8001a34:	17da      	asrs	r2, r3, #31
 8001a36:	663b      	str	r3, [r7, #96]	; 0x60
 8001a38:	667a      	str	r2, [r7, #100]	; 0x64
 8001a3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001a42:	462a      	mov	r2, r5
 8001a44:	fb02 f203 	mul.w	r2, r2, r3
 8001a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	fb01 f303 	mul.w	r3, r1, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001a58:	4621      	mov	r1, r4
 8001a5a:	fba2 1201 	umull	r1, r2, r2, r1
 8001a5e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8001a62:	460a      	mov	r2, r1
 8001a64:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001a68:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a7e:	4621      	mov	r1, r4
 8001a80:	0cca      	lsrs	r2, r1, #19
 8001a82:	4629      	mov	r1, r5
 8001a84:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a88:	4629      	mov	r1, r5
 8001a8a:	14cb      	asrs	r3, r1, #19
 8001a8c:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a90:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a94:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a98:	1884      	adds	r4, r0, r2
 8001a9a:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a9c:	eb41 0303 	adc.w	r3, r1, r3
 8001aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001aa2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001aa6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1889      	adds	r1, r1, r2
 8001aae:	6539      	str	r1, [r7, #80]	; 0x50
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb43 0101 	adc.w	r1, r3, r1
 8001ab6:	6579      	str	r1, [r7, #84]	; 0x54
 8001ab8:	f04f 0000 	mov.w	r0, #0
 8001abc:	f04f 0100 	mov.w	r1, #0
 8001ac0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001ac4:	4623      	mov	r3, r4
 8001ac6:	0a18      	lsrs	r0, r3, #8
 8001ac8:	462b      	mov	r3, r5
 8001aca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ace:	462b      	mov	r3, r5
 8001ad0:	1219      	asrs	r1, r3, #8
 8001ad2:	4b14      	ldr	r3, [pc, #80]	; (8001b24 <BME280_compensate_P_int64+0x588>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	b21b      	sxth	r3, r3
 8001ada:	17da      	asrs	r2, r3, #31
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ade:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	f04f 0300 	mov.w	r3, #0
 8001ae8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001aec:	464c      	mov	r4, r9
 8001aee:	0123      	lsls	r3, r4, #4
 8001af0:	4644      	mov	r4, r8
 8001af2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001af6:	4644      	mov	r4, r8
 8001af8:	0122      	lsls	r2, r4, #4
 8001afa:	1884      	adds	r4, r0, r2
 8001afc:	603c      	str	r4, [r7, #0]
 8001afe:	eb41 0303 	adc.w	r3, r1, r3
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b08:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b16:	46bd      	mov	sp, r7
 8001b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b1c:	200002aa 	.word	0x200002aa
 8001b20:	200002a8 	.word	0x200002a8
 8001b24:	200002a6 	.word	0x200002a6

08001b28 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of â€œ47445â€ represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001b30:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <bme280_compensate_H_int32+0xbc>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 8001b38:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	039a      	lsls	r2, r3, #14
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <bme280_compensate_H_int32+0xc0>)
 8001b40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b44:	051b      	lsls	r3, r3, #20
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	4b28      	ldr	r3, [pc, #160]	; (8001bec <bme280_compensate_H_int32+0xc4>)
 8001b4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b4e:	4619      	mov	r1, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	fb01 f303 	mul.w	r3, r1, r3
 8001b56:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001b5c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b5e:	4a24      	ldr	r2, [pc, #144]	; (8001bf0 <bme280_compensate_H_int32+0xc8>)
 8001b60:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001b64:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001b6c:	1292      	asrs	r2, r2, #10
 8001b6e:	4921      	ldr	r1, [pc, #132]	; (8001bf4 <bme280_compensate_H_int32+0xcc>)
 8001b70:	8809      	ldrh	r1, [r1, #0]
 8001b72:	4608      	mov	r0, r1
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	fb00 f101 	mul.w	r1, r0, r1
 8001b7a:	12c9      	asrs	r1, r1, #11
 8001b7c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 8001b80:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b84:	1292      	asrs	r2, r2, #10
 8001b86:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8001b8a:	491b      	ldr	r1, [pc, #108]	; (8001bf8 <bme280_compensate_H_int32+0xd0>)
 8001b8c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b90:	fb01 f202 	mul.w	r2, r1, r2
 8001b94:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
					8192) >> 14));
 8001b98:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	13db      	asrs	r3, r3, #15
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	13d2      	asrs	r2, r2, #15
 8001ba8:	fb02 f303 	mul.w	r3, r2, r3
 8001bac:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001bae:	4a13      	ldr	r2, [pc, #76]	; (8001bfc <bme280_compensate_H_int32+0xd4>)
 8001bb0:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001bb6:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001bc4:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001bcc:	bfa8      	it	ge
 8001bce:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001bd2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	131b      	asrs	r3, r3, #12
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	200002c8 	.word	0x200002c8
 8001be8:	200002ae 	.word	0x200002ae
 8001bec:	200002b0 	.word	0x200002b0
 8001bf0:	200002b2 	.word	0x200002b2
 8001bf4:	20000296 	.word	0x20000296
 8001bf8:	200002ac 	.word	0x200002ac
 8001bfc:	20000294 	.word	0x20000294

08001c00 <BME280_Pressure>:

//Pressure Measurment
double BME280_Pressure (void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c04:	f7ff fc38 	bl	8001478 <BMEReadRaw>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d121      	bne.n	8001c52 <BME280_Pressure+0x52>
	{
		  if (pRaw == 0x800000)
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	; (8001c78 <BME280_Pressure+0x78>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c16:	d104      	bne.n	8001c22 <BME280_Pressure+0x22>
		  {
			  Pressure = 0; // value in case temp measurement was disabled
 8001c18:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	e01b      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
		  else
		  {
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // as per datasheet, the pressure is x256
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <BME280_Pressure+0x78>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff fcb8 	bl	800159c <BME280_compensate_P_int64>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fc80 	bl	8000534 <__aeabi_ui2d>
 8001c34:	f04f 0200 	mov.w	r2, #0
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <BME280_Pressure+0x80>)
 8001c3a:	f7fe fe1f 	bl	800087c <__aeabi_ddiv>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4610      	mov	r0, r2
 8001c44:	4619      	mov	r1, r3
 8001c46:	f7fe ffe7 	bl	8000c18 <__aeabi_d2f>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c4e:	6013      	str	r3, [r2, #0]
 8001c50:	e003      	b.n	8001c5a <BME280_Pressure+0x5a>
		  }
	}
	else
	{
		Pressure = 0;
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	}
	return Pressure;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <BME280_Pressure+0x7c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc8a 	bl	8000578 <__aeabi_f2d>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200002b8 	.word	0x200002b8
 8001c7c:	20000450 	.word	0x20000450
 8001c80:	40700000 	.word	0x40700000

08001c84 <BME280_Humidity>:

//Humidity Measurment
double BME280_Humidity (void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001c88:	f7ff fbf6 	bl	8001478 <BMEReadRaw>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d121      	bne.n	8001cd6 <BME280_Humidity+0x52>
	{
		if (hRaw == 0x8000)
 8001c92:	4b1a      	ldr	r3, [pc, #104]	; (8001cfc <BME280_Humidity+0x78>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c9a:	d104      	bne.n	8001ca6 <BME280_Humidity+0x22>
		{
			Humidity = 0; // value in case temp measurement was disabled
 8001c9c:	4b18      	ldr	r3, [pc, #96]	; (8001d00 <BME280_Humidity+0x7c>)
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	e01b      	b.n	8001cde <BME280_Humidity+0x5a>
		}
		else
		{
			Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <BME280_Humidity+0x78>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff ff3c 	bl	8001b28 <bme280_compensate_H_int32>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fc3e 	bl	8000534 <__aeabi_ui2d>
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <BME280_Humidity+0x80>)
 8001cbe:	f7fe fddd 	bl	800087c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f7fe ffa5 	bl	8000c18 <__aeabi_d2f>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a0b      	ldr	r2, [pc, #44]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	e003      	b.n	8001cde <BME280_Humidity+0x5a>
		}
	}
	else
	{
		Humidity = 0;
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <BME280_Humidity+0x7c>)
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
	}

	return Humidity;
 8001cde:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <BME280_Humidity+0x7c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe fc48 	bl	8000578 <__aeabi_f2d>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	ec43 2b17 	vmov	d7, r2, r3
}
 8001cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf4:	eef0 0a67 	vmov.f32	s1, s15
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200002bc 	.word	0x200002bc
 8001d00:	20000454 	.word	0x20000454
 8001d04:	40900000 	.word	0x40900000

08001d08 <BME280_Temperature>:

//Temperature Measurment
double BME280_Temperature(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001d0c:	f7ff fbb4 	bl	8001478 <BMEReadRaw>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <BME280_Temperature+0x52>
	{
		if (tRaw == 0x800000)
 8001d16:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <BME280_Temperature+0x78>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d1e:	d104      	bne.n	8001d2a <BME280_Temperature+0x22>
		{
			Temperature = 0; // value in case temp measurement was disabled
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d22:	f04f 0200 	mov.w	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	e01b      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
		else
		{
			Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001d2a:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <BME280_Temperature+0x78>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fbf2 	bl	8001518 <BME280_compensate_T_int32>
 8001d34:	4603      	mov	r3, r0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fc0c 	bl	8000554 <__aeabi_i2d>
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <BME280_Temperature+0x80>)
 8001d42:	f7fe fd9b 	bl	800087c <__aeabi_ddiv>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f7fe ff63 	bl	8000c18 <__aeabi_d2f>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	e003      	b.n	8001d62 <BME280_Temperature+0x5a>
		}
	}
	else
	{
		Temperature = 0;
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
	}
	return Temperature;
 8001d62:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <BME280_Temperature+0x7c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe fc06 	bl	8000578 <__aeabi_f2d>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	460b      	mov	r3, r1
 8001d70:	ec43 2b17 	vmov	d7, r2, r3
}
 8001d74:	eeb0 0a47 	vmov.f32	s0, s14
 8001d78:	eef0 0a67 	vmov.f32	s1, s15
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200002b4 	.word	0x200002b4
 8001d84:	2000044c 	.word	0x2000044c
 8001d88:	40590000 	.word	0x40590000
 8001d8c:	00000000 	.word	0x00000000

08001d90 <BME280_Altitude>:

float BME280_Altitude(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
	PressValue = BME280_Pressure();
 8001d94:	f7ff ff34 	bl	8001c00 <BME280_Pressure>
 8001d98:	ec53 2b10 	vmov	r2, r3, d0
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f7fe ff3a 	bl	8000c18 <__aeabi_d2f>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a24      	ldr	r2, [pc, #144]	; (8001e38 <BME280_Altitude+0xa8>)
 8001da8:	6013      	str	r3, [r2, #0]
	PressValue = PressValue/100;
 8001daa:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dac:	ed93 7a00 	vldr	s14, [r3]
 8001db0:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001e3c <BME280_Altitude+0xac>
 8001db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dba:	edc3 7a00 	vstr	s15, [r3]
	Altitude = 44330*(1.0-pow(PressValue/SeaLevel, 0.19029495718));
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <BME280_Altitude+0xa8>)
 8001dc0:	ed93 7a00 	vldr	s14, [r3]
 8001dc4:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <BME280_Altitude+0xb0>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001dce:	ee16 0a90 	vmov	r0, s13
 8001dd2:	f7fe fbd1 	bl	8000578 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	ed9f 1b13 	vldr	d1, [pc, #76]	; 8001e28 <BME280_Altitude+0x98>
 8001dde:	ec43 2b10 	vmov	d0, r2, r3
 8001de2:	f008 fd0b 	bl	800a7fc <pow>
 8001de6:	ec53 2b10 	vmov	r2, r3, d0
 8001dea:	f04f 0000 	mov.w	r0, #0
 8001dee:	4915      	ldr	r1, [pc, #84]	; (8001e44 <BME280_Altitude+0xb4>)
 8001df0:	f7fe fa62 	bl	80002b8 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	a30c      	add	r3, pc, #48	; (adr r3, 8001e30 <BME280_Altitude+0xa0>)
 8001dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e02:	f7fe fc11 	bl	8000628 <__aeabi_dmul>
 8001e06:	4602      	mov	r2, r0
 8001e08:	460b      	mov	r3, r1
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe ff03 	bl	8000c18 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a0c      	ldr	r2, [pc, #48]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e16:	6013      	str	r3, [r2, #0]
	return Altitude;
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <BME280_Altitude+0xb8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	ee07 3a90 	vmov	s15, r3
}
 8001e20:	eeb0 0a67 	vmov.f32	s0, s15
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	ccd745e4 	.word	0xccd745e4
 8001e2c:	3fc85b95 	.word	0x3fc85b95
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40e5a540 	.word	0x40e5a540
 8001e38:	200002c4 	.word	0x200002c4
 8001e3c:	42c80000 	.word	0x42c80000
 8001e40:	20000000 	.word	0x20000000
 8001e44:	3ff00000 	.word	0x3ff00000
 8001e48:	200002c0 	.word	0x200002c0

08001e4c <BME280_Kalman_Alt>:

float BME280_Kalman_Alt(double U0)
{
 8001e4c:	b5b0      	push	{r4, r5, r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	ed87 0b00 	vstr	d0, [r7]
	static double Q0 = 10; //initial estimated covariance
	static double P0 = 0; //initial error covariance (it must be 0)
	static double U0_hat = 0; //initial estimated state
	static double K0 = 0; //initial kalman gain

	U0 = BME280_Altitude();
 8001e56:	f7ff ff9b 	bl	8001d90 <BME280_Altitude>
 8001e5a:	ee10 3a10 	vmov	r3, s0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb8a 	bl	8000578 <__aeabi_f2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	e9c7 2300 	strd	r2, r3, [r7]
	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8001e6c:	4b45      	ldr	r3, [pc, #276]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	4b45      	ldr	r3, [pc, #276]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	f7fe fbd6 	bl	8000628 <__aeabi_dmul>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4614      	mov	r4, r2
 8001e82:	461d      	mov	r5, r3
 8001e84:	4b40      	ldr	r3, [pc, #256]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e8a:	4b3e      	ldr	r3, [pc, #248]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e90:	f7fe fbca 	bl	8000628 <__aeabi_dmul>
 8001e94:	4602      	mov	r2, r0
 8001e96:	460b      	mov	r3, r1
 8001e98:	4610      	mov	r0, r2
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4b3a      	ldr	r3, [pc, #232]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fbc1 	bl	8000628 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <BME280_Kalman_Alt+0x140>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fa02 	bl	80002bc <__adddf3>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	4629      	mov	r1, r5
 8001ec0:	f7fe fcdc 	bl	800087c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4931      	ldr	r1, [pc, #196]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001eca:	e9c1 2300 	strd	r2, r3, [r1]
	U0_hat = U0_hat + K0 * (U0 - H0 * U0_hat);
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001ed0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eda:	f7fe fba5 	bl	8000628 <__aeabi_dmul>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee6:	f7fe f9e7 	bl	80002b8 <__aeabi_dsub>
 8001eea:	4602      	mov	r2, r0
 8001eec:	460b      	mov	r3, r1
 8001eee:	4610      	mov	r0, r2
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4b27      	ldr	r3, [pc, #156]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4610      	mov	r0, r2
 8001f02:	4619      	mov	r1, r3
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f7fe f9d7 	bl	80002bc <__adddf3>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4920      	ldr	r1, [pc, #128]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f14:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <BME280_Kalman_Alt+0x144>)
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	4b1a      	ldr	r3, [pc, #104]	; (8001f88 <BME280_Kalman_Alt+0x13c>)
 8001f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f24:	f7fe fb80 	bl	8000628 <__aeabi_dmul>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	f04f 0000 	mov.w	r0, #0
 8001f30:	4919      	ldr	r1, [pc, #100]	; (8001f98 <BME280_Kalman_Alt+0x14c>)
 8001f32:	f7fe f9c1 	bl	80002b8 <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f44:	f7fe fb70 	bl	8000628 <__aeabi_dmul>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4b12      	ldr	r3, [pc, #72]	; (8001f9c <BME280_Kalman_Alt+0x150>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe f9b1 	bl	80002bc <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4909      	ldr	r1, [pc, #36]	; (8001f84 <BME280_Kalman_Alt+0x138>)
 8001f60:	e9c1 2300 	strd	r2, r3, [r1]
	return U0_hat;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <BME280_Kalman_Alt+0x148>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f7fe fe53 	bl	8000c18 <__aeabi_d2f>
 8001f72:	4603      	mov	r3, r0
 8001f74:	ee07 3a90 	vmov	s15, r3
}
 8001f78:	eeb0 0a67 	vmov.f32	s0, s15
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	200002d0 	.word	0x200002d0
 8001f88:	0800bba0 	.word	0x0800bba0
 8001f8c:	0800bba8 	.word	0x0800bba8
 8001f90:	200002d8 	.word	0x200002d8
 8001f94:	200002e0 	.word	0x200002e0
 8001f98:	3ff00000 	.word	0x3ff00000
 8001f9c:	20000008 	.word	0x20000008

08001fa0 <BME280_Kalman_Press>:

double BME280_Kalman_Press(double U1)
{
 8001fa0:	b5b0      	push	{r4, r5, r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	ed87 0b00 	vstr	d0, [r7]
	static double Q1 = 10; //initial estimated covariance
	static double P1 = 0; //initial error covariance (it must be 0)
	static double U1_hat = 100000; //initial estimated state
	static double K1 = 0; //initial kalman gain

	U1 = BME280_Pressure();
 8001faa:	f7ff fe29 	bl	8001c00 <BME280_Pressure>
 8001fae:	ed87 0b00 	vstr	d0, [r7]
	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 8001fb2:	4b44      	ldr	r3, [pc, #272]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb8:	4b43      	ldr	r3, [pc, #268]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fb33 	bl	8000628 <__aeabi_dmul>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4614      	mov	r4, r2
 8001fc8:	461d      	mov	r5, r3
 8001fca:	4b3f      	ldr	r3, [pc, #252]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd0:	4b3c      	ldr	r3, [pc, #240]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8001fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd6:	f7fe fb27 	bl	8000628 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4b39      	ldr	r3, [pc, #228]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8001fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe8:	f7fe fb1e 	bl	8000628 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4b35      	ldr	r3, [pc, #212]	; (80020cc <BME280_Kalman_Press+0x12c>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	f7fe f95f 	bl	80002bc <__adddf3>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4620      	mov	r0, r4
 8002004:	4629      	mov	r1, r5
 8002006:	f7fe fc39 	bl	800087c <__aeabi_ddiv>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4930      	ldr	r1, [pc, #192]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002010:	e9c1 2300 	strd	r2, r3, [r1]
	U1_hat = U1_hat + K1 * (U1 - H1 * U1_hat);
 8002014:	4b2c      	ldr	r3, [pc, #176]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002016:	e9d3 0100 	ldrd	r0, r1, [r3]
 800201a:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	f7fe fb02 	bl	8000628 <__aeabi_dmul>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	e9d7 0100 	ldrd	r0, r1, [r7]
 800202c:	f7fe f944 	bl	80002b8 <__aeabi_dsub>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <BME280_Kalman_Press+0x130>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe faf3 	bl	8000628 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002050:	f7fe f934 	bl	80002bc <__adddf3>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	491e      	ldr	r1, [pc, #120]	; (80020d4 <BME280_Kalman_Press+0x134>)
 800205a:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 800205e:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <BME280_Kalman_Press+0x130>)
 8002060:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <BME280_Kalman_Press+0x128>)
 8002066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206a:	f7fe fadd 	bl	8000628 <__aeabi_dmul>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	f04f 0000 	mov.w	r0, #0
 8002076:	4918      	ldr	r1, [pc, #96]	; (80020d8 <BME280_Kalman_Press+0x138>)
 8002078:	f7fe f91e 	bl	80002b8 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	4b0f      	ldr	r3, [pc, #60]	; (80020c4 <BME280_Kalman_Press+0x124>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe facd 	bl	8000628 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <BME280_Kalman_Press+0x13c>)
 8002098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209c:	f7fe f90e 	bl	80002bc <__adddf3>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4907      	ldr	r1, [pc, #28]	; (80020c4 <BME280_Kalman_Press+0x124>)
 80020a6:	e9c1 2300 	strd	r2, r3, [r1]
	return U1_hat;
 80020aa:	4b0a      	ldr	r3, [pc, #40]	; (80020d4 <BME280_Kalman_Press+0x134>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	ec43 2b17 	vmov	d7, r2, r3
}
 80020b4:	eeb0 0a47 	vmov.f32	s0, s14
 80020b8:	eef0 0a67 	vmov.f32	s1, s15
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bdb0      	pop	{r4, r5, r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002e8 	.word	0x200002e8
 80020c8:	0800bbb0 	.word	0x0800bbb0
 80020cc:	0800bbb8 	.word	0x0800bbb8
 80020d0:	200002f0 	.word	0x200002f0
 80020d4:	20000010 	.word	0x20000010
 80020d8:	3ff00000 	.word	0x3ff00000
 80020dc:	20000018 	.word	0x20000018

080020e0 <BME280_Kalman_Hum>:

double BME280_Kalman_Hum(double U2)
{
 80020e0:	b5b0      	push	{r4, r5, r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	ed87 0b00 	vstr	d0, [r7]
	static double Q2 = 10; //initial estimated covariance
	static double P2 = 0; //initial error covariance (it must be 0)
	static double U2_hat = 50; //initial estimated state
	static double K2 = 0; //initial kalman gain

	U2 = BME280_Humidity();
 80020ea:	f7ff fdcb 	bl	8001c84 <BME280_Humidity>
 80020ee:	ed87 0b00 	vstr	d0, [r7]
	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 80020f2:	4b44      	ldr	r3, [pc, #272]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80020f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	f7fe fa93 	bl	8000628 <__aeabi_dmul>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	461d      	mov	r5, r3
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <BME280_Kalman_Hum+0x128>)
 800210c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002110:	4b3c      	ldr	r3, [pc, #240]	; (8002204 <BME280_Kalman_Hum+0x124>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa87 	bl	8000628 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	4b39      	ldr	r3, [pc, #228]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002128:	f7fe fa7e 	bl	8000628 <__aeabi_dmul>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4610      	mov	r0, r2
 8002132:	4619      	mov	r1, r3
 8002134:	4b35      	ldr	r3, [pc, #212]	; (800220c <BME280_Kalman_Hum+0x12c>)
 8002136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213a:	f7fe f8bf 	bl	80002bc <__adddf3>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4620      	mov	r0, r4
 8002144:	4629      	mov	r1, r5
 8002146:	f7fe fb99 	bl	800087c <__aeabi_ddiv>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4930      	ldr	r1, [pc, #192]	; (8002210 <BME280_Kalman_Hum+0x130>)
 8002150:	e9c1 2300 	strd	r2, r3, [r1]
	U2_hat = U2_hat + K2 * (U2 - H2 * U2_hat);
 8002154:	4b2c      	ldr	r3, [pc, #176]	; (8002208 <BME280_Kalman_Hum+0x128>)
 8002156:	e9d3 0100 	ldrd	r0, r1, [r3]
 800215a:	4b2e      	ldr	r3, [pc, #184]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa62 	bl	8000628 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	e9d7 0100 	ldrd	r0, r1, [r7]
 800216c:	f7fe f8a4 	bl	80002b8 <__aeabi_dsub>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	4b25      	ldr	r3, [pc, #148]	; (8002210 <BME280_Kalman_Hum+0x130>)
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	f7fe fa53 	bl	8000628 <__aeabi_dmul>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800218c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002190:	f7fe f894 	bl	80002bc <__adddf3>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	491e      	ldr	r1, [pc, #120]	; (8002214 <BME280_Kalman_Hum+0x134>)
 800219a:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 800219e:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <BME280_Kalman_Hum+0x130>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <BME280_Kalman_Hum+0x128>)
 80021a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021aa:	f7fe fa3d 	bl	8000628 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	f04f 0000 	mov.w	r0, #0
 80021b6:	4918      	ldr	r1, [pc, #96]	; (8002218 <BME280_Kalman_Hum+0x138>)
 80021b8:	f7fe f87e 	bl	80002b8 <__aeabi_dsub>
 80021bc:	4602      	mov	r2, r0
 80021be:	460b      	mov	r3, r1
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ca:	f7fe fa2d 	bl	8000628 <__aeabi_dmul>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <BME280_Kalman_Hum+0x13c>)
 80021d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021dc:	f7fe f86e 	bl	80002bc <__adddf3>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <BME280_Kalman_Hum+0x124>)
 80021e6:	e9c1 2300 	strd	r2, r3, [r1]
	return U2_hat;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <BME280_Kalman_Hum+0x134>)
 80021ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f0:	ec43 2b17 	vmov	d7, r2, r3
}
 80021f4:	eeb0 0a47 	vmov.f32	s0, s14
 80021f8:	eef0 0a67 	vmov.f32	s1, s15
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bdb0      	pop	{r4, r5, r7, pc}
 8002202:	bf00      	nop
 8002204:	200002f8 	.word	0x200002f8
 8002208:	0800bbc0 	.word	0x0800bbc0
 800220c:	0800bbc8 	.word	0x0800bbc8
 8002210:	20000300 	.word	0x20000300
 8002214:	20000020 	.word	0x20000020
 8002218:	3ff00000 	.word	0x3ff00000
 800221c:	20000028 	.word	0x20000028

08002220 <BME280_Kalman_Temp>:

double BME280_Kalman_Temp(double U3)
{
 8002220:	b5b0      	push	{r4, r5, r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	ed87 0b00 	vstr	d0, [r7]
	static double Q3 = 10; //initial estimated covariance
	static double P3 = 0; //initial error covariance (it must be 0)
	static double U3_hat = 25; //initial estimated state
	static double K3 = 0; //initial kalman gain

	U3 = BME280_Temperature();
 800222a:	f7ff fd6d 	bl	8001d08 <BME280_Temperature>
 800222e:	ed87 0b00 	vstr	d0, [r7]
	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8002232:	4b44      	ldr	r3, [pc, #272]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002234:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002238:	4b43      	ldr	r3, [pc, #268]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800223a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800223e:	f7fe f9f3 	bl	8000628 <__aeabi_dmul>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4614      	mov	r4, r2
 8002248:	461d      	mov	r5, r3
 800224a:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <BME280_Kalman_Temp+0x128>)
 800224c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002250:	4b3c      	ldr	r3, [pc, #240]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f9e7 	bl	8000628 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe f9de 	bl	8000628 <__aeabi_dmul>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	4b35      	ldr	r3, [pc, #212]	; (800234c <BME280_Kalman_Temp+0x12c>)
 8002276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227a:	f7fe f81f 	bl	80002bc <__adddf3>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4620      	mov	r0, r4
 8002284:	4629      	mov	r1, r5
 8002286:	f7fe faf9 	bl	800087c <__aeabi_ddiv>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4930      	ldr	r1, [pc, #192]	; (8002350 <BME280_Kalman_Temp+0x130>)
 8002290:	e9c1 2300 	strd	r2, r3, [r1]
	U3_hat = U3_hat + K3 * (U3 - H3 * U3_hat);
 8002294:	4b2c      	ldr	r3, [pc, #176]	; (8002348 <BME280_Kalman_Temp+0x128>)
 8002296:	e9d3 0100 	ldrd	r0, r1, [r3]
 800229a:	4b2e      	ldr	r3, [pc, #184]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ac:	f7fe f804 	bl	80002b8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	4b25      	ldr	r3, [pc, #148]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe f9b3 	bl	8000628 <__aeabi_dmul>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4610      	mov	r0, r2
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b22      	ldr	r3, [pc, #136]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d0:	f7fd fff4 	bl	80002bc <__adddf3>
 80022d4:	4602      	mov	r2, r0
 80022d6:	460b      	mov	r3, r1
 80022d8:	491e      	ldr	r1, [pc, #120]	; (8002354 <BME280_Kalman_Temp+0x134>)
 80022da:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 80022de:	4b1c      	ldr	r3, [pc, #112]	; (8002350 <BME280_Kalman_Temp+0x130>)
 80022e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022e4:	4b18      	ldr	r3, [pc, #96]	; (8002348 <BME280_Kalman_Temp+0x128>)
 80022e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ea:	f7fe f99d 	bl	8000628 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	f04f 0000 	mov.w	r0, #0
 80022f6:	4918      	ldr	r1, [pc, #96]	; (8002358 <BME280_Kalman_Temp+0x138>)
 80022f8:	f7fd ffde 	bl	80002b8 <__aeabi_dsub>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4610      	mov	r0, r2
 8002302:	4619      	mov	r1, r3
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <BME280_Kalman_Temp+0x13c>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fd ffce 	bl	80002bc <__adddf3>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <BME280_Kalman_Temp+0x124>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
	return U3_hat;
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <BME280_Kalman_Temp+0x134>)
 800232c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002330:	ec43 2b17 	vmov	d7, r2, r3
}
 8002334:	eeb0 0a47 	vmov.f32	s0, s14
 8002338:	eef0 0a67 	vmov.f32	s1, s15
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	20000308 	.word	0x20000308
 8002348:	0800bbd0 	.word	0x0800bbd0
 800234c:	0800bbd8 	.word	0x0800bbd8
 8002350:	20000310 	.word	0x20000310
 8002354:	20000030 	.word	0x20000030
 8002358:	3ff00000 	.word	0x3ff00000
 800235c:	20000038 	.word	0x20000038

08002360 <prv_parse_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed integer
 */
static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3371      	adds	r3, #113	; 0x71
 8002378:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800237a:	e002      	b.n	8002382 <prv_parse_number+0x22>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	3301      	adds	r3, #1
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <prv_parse_number+0x30>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b20      	cmp	r3, #32
 800238e:	d0f5      	beq.n	800237c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b2d      	cmp	r3, #45	; 0x2d
 8002396:	d104      	bne.n	80023a2 <prv_parse_number+0x42>
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	603b      	str	r3, [r7, #0]
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <prv_parse_number+0x44>
 80023a2:	2300      	movs	r3, #0
 80023a4:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 80023a6:	e00d      	b.n	80023c4 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 80023a8:	68fa      	ldr	r2, [r7, #12]
 80023aa:	4613      	mov	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	461a      	mov	r2, r3
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	3b30      	subs	r3, #48	; 0x30
 80023ba:	4413      	add	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	3301      	adds	r3, #1
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <prv_parse_number+0x7a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b2f      	cmp	r3, #47	; 0x2f
 80023d0:	d903      	bls.n	80023da <prv_parse_number+0x7a>
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b39      	cmp	r3, #57	; 0x39
 80023d8:	d9e6      	bls.n	80023a8 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 80023da:	7afb      	ldrb	r3, [r7, #11]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d002      	beq.n	80023e6 <prv_parse_number+0x86>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	425b      	negs	r3, r3
 80023e4:	e000      	b.n	80023e8 <prv_parse_number+0x88>
 80023e6:	68fb      	ldr	r3, [r7, #12]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <prv_parse_float_number>:
 * \param[in]       gh: GPS handle
 * \param[in]       t: Text to parse. Set to `NULL` to parse current GPS term
 * \return          Parsed double in \ref lwgps_float_t format
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d106      	bne.n	8002412 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3371      	adds	r3, #113	; 0x71
 8002408:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}      /* Strip leading spaces */
 800240a:	e002      	b.n	8002412 <prv_parse_float_number+0x1e>
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	3301      	adds	r3, #1
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d003      	beq.n	8002420 <prv_parse_float_number+0x2c>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b20      	cmp	r3, #32
 800241e:	d0f5      	beq.n	800240c <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);                      /* Parse string to double */
 8002420:	2100      	movs	r1, #0
 8002422:	6838      	ldr	r0, [r7, #0]
 8002424:	f006 f9d0 	bl	80087c8 <strtod>
 8002428:	ed87 0b02 	vstr	d0, [r7, #8]
#else /* LWGPS_CFG_DOUBLE */
    res = strtof(t, NULL);                      /* Parse string to float */
#endif /* !LWGPS_CFG_DOUBLE */

    return FLT(res);                            /* Return casted value, based on float size */
 800242c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002430:	ec43 2b17 	vmov	d7, r2, r3
}
 8002434:	eeb0 0a47 	vmov.f32	s0, s14
 8002438:	eef0 0a67 	vmov.f32	s1, s15
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       gh: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);      /* Parse value as double */
 800244c:	2100      	movs	r1, #0
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ffd0 	bl	80023f4 <prv_parse_float_number>
 8002454:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));            /* Get absolute degrees value, interested in integer part only */
 8002458:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800245c:	f7fe fb94 	bl	8000b88 <__aeabi_d2iz>
 8002460:	4603      	mov	r3, r0
 8002462:	4a1d      	ldr	r2, [pc, #116]	; (80024d8 <prv_parse_lat_long+0x94>)
 8002464:	fb82 1203 	smull	r1, r2, r2, r3
 8002468:	1152      	asrs	r2, r2, #5
 800246a:	17db      	asrs	r3, r3, #31
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe f870 	bl	8000554 <__aeabi_i2d>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	4b16      	ldr	r3, [pc, #88]	; (80024dc <prv_parse_lat_long+0x98>)
 8002482:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002486:	f7fe f8cf 	bl	8000628 <__aeabi_dmul>
 800248a:	4602      	mov	r2, r0
 800248c:	460b      	mov	r3, r1
 800248e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002492:	f7fd ff11 	bl	80002b8 <__aeabi_dsub>
 8002496:	4602      	mov	r2, r0
 8002498:	460b      	mov	r3, r1
 800249a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));               /* Calculate latitude/longitude */
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <prv_parse_lat_long+0x9c>)
 80024a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024a8:	f7fe f9e8 	bl	800087c <__aeabi_ddiv>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024b4:	f7fd ff02 	bl	80002bc <__adddf3>
 80024b8:	4602      	mov	r2, r0
 80024ba:	460b      	mov	r3, r1
 80024bc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 80024c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024c4:	ec43 2b17 	vmov	d7, r2, r3
}
 80024c8:	eeb0 0a47 	vmov.f32	s0, s14
 80024cc:	eef0 0a67 	vmov.f32	s1, s15
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	51eb851f 	.word	0x51eb851f
 80024dc:	40590000 	.word	0x40590000
 80024e0:	404e0000 	.word	0x404e0000

080024e4 <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* gh) {
 80024e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {                  /* Check string type */
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80024f4:	2900      	cmp	r1, #0
 80024f6:	d169      	bne.n	80025cc <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3371      	adds	r3, #113	; 0x71
 80024fc:	2206      	movs	r2, #6
 80024fe:	49ba      	ldr	r1, [pc, #744]	; (80027e8 <prv_parse_term+0x304>)
 8002500:	4618      	mov	r0, r3
 8002502:	f006 fa7a 	bl	80089fa <strncmp>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d009      	beq.n	8002520 <prv_parse_term+0x3c>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3371      	adds	r3, #113	; 0x71
 8002510:	2206      	movs	r2, #6
 8002512:	49b6      	ldr	r1, [pc, #728]	; (80027ec <prv_parse_term+0x308>)
 8002514:	4618      	mov	r0, r3
 8002516:	f006 fa70 	bl	80089fa <strncmp>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d104      	bne.n	800252a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8002528:	e04e      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3371      	adds	r3, #113	; 0x71
 800252e:	2206      	movs	r2, #6
 8002530:	49af      	ldr	r1, [pc, #700]	; (80027f0 <prv_parse_term+0x30c>)
 8002532:	4618      	mov	r0, r3
 8002534:	f006 fa61 	bl	80089fa <strncmp>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d009      	beq.n	8002552 <prv_parse_term+0x6e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	3371      	adds	r3, #113	; 0x71
 8002542:	2206      	movs	r2, #6
 8002544:	49ab      	ldr	r1, [pc, #684]	; (80027f4 <prv_parse_term+0x310>)
 8002546:	4618      	mov	r0, r3
 8002548:	f006 fa57 	bl	80089fa <strncmp>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800255a:	e035      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3371      	adds	r3, #113	; 0x71
 8002560:	2206      	movs	r2, #6
 8002562:	49a5      	ldr	r1, [pc, #660]	; (80027f8 <prv_parse_term+0x314>)
 8002564:	4618      	mov	r0, r3
 8002566:	f006 fa48 	bl	80089fa <strncmp>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d009      	beq.n	8002584 <prv_parse_term+0xa0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3371      	adds	r3, #113	; 0x71
 8002574:	2206      	movs	r2, #6
 8002576:	49a1      	ldr	r1, [pc, #644]	; (80027fc <prv_parse_term+0x318>)
 8002578:	4618      	mov	r0, r3
 800257a:	f006 fa3e 	bl	80089fa <strncmp>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d104      	bne.n	800258e <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 800258c:	e01c      	b.n	80025c8 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3371      	adds	r3, #113	; 0x71
 8002592:	2206      	movs	r2, #6
 8002594:	499a      	ldr	r1, [pc, #616]	; (8002800 <prv_parse_term+0x31c>)
 8002596:	4618      	mov	r0, r3
 8002598:	f006 fa2f 	bl	80089fa <strncmp>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <prv_parse_term+0xd2>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3371      	adds	r3, #113	; 0x71
 80025a6:	2206      	movs	r2, #6
 80025a8:	4996      	ldr	r1, [pc, #600]	; (8002804 <prv_parse_term+0x320>)
 80025aa:	4618      	mov	r0, r3
 80025ac:	f006 fa25 	bl	80089fa <strncmp>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2204      	movs	r2, #4
 80025ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 80025be:	e003      	b.n	80025c8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            gh->p.stat = STAT_UNKNOWN;          /* Invalid statement for library */
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e231      	b.n	8002a30 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (gh->p.stat == STAT_UNKNOWN) {
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80025d2:	2900      	cmp	r1, #0
 80025d4:	f000 822b 	beq.w	8002a2e <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {        /* Process GPGGA statement */
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80025de:	2901      	cmp	r1, #1
 80025e0:	f040 80c9 	bne.w	8002776 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80025ea:	3b01      	subs	r3, #1
 80025ec:	2b0a      	cmp	r3, #10
 80025ee:	f200 8213 	bhi.w	8002a18 <prv_parse_term+0x534>
 80025f2:	a201      	add	r2, pc, #4	; (adr r2, 80025f8 <prv_parse_term+0x114>)
 80025f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f8:	08002625 	.word	0x08002625
 80025fc:	0800269f 	.word	0x0800269f
 8002600:	080026b5 	.word	0x080026b5
 8002604:	080026df 	.word	0x080026df
 8002608:	080026f5 	.word	0x080026f5
 800260c:	0800271f 	.word	0x0800271f
 8002610:	08002733 	.word	0x08002733
 8002614:	08002a19 	.word	0x08002a19
 8002618:	08002747 	.word	0x08002747
 800261c:	08002a19 	.word	0x08002a19
 8002620:	0800275f 	.word	0x0800275f
            case 1:                             /* Process UTC time */
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800262a:	3b30      	subs	r3, #48	; 0x30
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	0092      	lsls	r2, r2, #2
 8002632:	4413      	add	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800263e:	4413      	add	r3, r2
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3b30      	subs	r3, #48	; 0x30
 8002644:	b2da      	uxtb	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8002652:	3b30      	subs	r3, #48	; 0x30
 8002654:	b2db      	uxtb	r3, r3
 8002656:	461a      	mov	r2, r3
 8002658:	0092      	lsls	r2, r2, #2
 800265a:	4413      	add	r3, r2
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002666:	4413      	add	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3b30      	subs	r3, #48	; 0x30
 800266c:	b2da      	uxtb	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800267a:	3b30      	subs	r3, #48	; 0x30
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4413      	add	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800268e:	4413      	add	r3, r2
 8002690:	b2db      	uxtb	r3, r3
 8002692:	3b30      	subs	r3, #48	; 0x30
 8002694:	b2da      	uxtb	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 800269c:	e1c7      	b.n	8002a2e <prv_parse_term+0x54a>
            case 2:                             /* Latitude */
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);   /* Parse latitude */
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fed0 	bl	8002444 <prv_parse_lat_long>
 80026a4:	eeb0 7a40 	vmov.f32	s14, s0
 80026a8:	eef0 7a60 	vmov.f32	s15, s1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80026b2:	e1bc      	b.n	8002a2e <prv_parse_term+0x54a>
            case 3:                             /* Latitude north/south information */
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026ba:	2b53      	cmp	r3, #83	; 0x53
 80026bc:	d005      	beq.n	80026ca <prv_parse_term+0x1e6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026c4:	2b73      	cmp	r3, #115	; 0x73
 80026c6:	f040 81a9 	bne.w	8002a1c <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80026d0:	4690      	mov	r8, r2
 80026d2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80026dc:	e19e      	b.n	8002a1c <prv_parse_term+0x538>
            case 4:                             /* Longitude */
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);  /* Parse longitude */
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff feb0 	bl	8002444 <prv_parse_lat_long>
 80026e4:	eeb0 7a40 	vmov.f32	s14, s0
 80026e8:	eef0 7a60 	vmov.f32	s15, s1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 80026f2:	e19c      	b.n	8002a2e <prv_parse_term+0x54a>
            case 5:                             /* Longitude east/west information */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80026fa:	2b57      	cmp	r3, #87	; 0x57
 80026fc:	d005      	beq.n	800270a <prv_parse_term+0x226>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002704:	2b77      	cmp	r3, #119	; 0x77
 8002706:	f040 818b 	bne.w	8002a20 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002710:	4614      	mov	r4, r2
 8002712:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 800271c:	e180      	b.n	8002a20 <prv_parse_term+0x53c>
            case 6:                             /* Fix status */
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 800271e:	2100      	movs	r1, #0
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f7ff fe1d 	bl	8002360 <prv_parse_number>
 8002726:	4603      	mov	r3, r0
 8002728:	b2da      	uxtb	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8002730:	e17d      	b.n	8002a2e <prv_parse_term+0x54a>
            case 7:                             /* Satellites in use */
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8002732:	2100      	movs	r1, #0
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fe13 	bl	8002360 <prv_parse_number>
 800273a:	4603      	mov	r3, r0
 800273c:	b2da      	uxtb	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8002744:	e173      	b.n	8002a2e <prv_parse_term+0x54a>
            case 9:                             /* Altitude */
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8002746:	2100      	movs	r1, #0
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fe53 	bl	80023f4 <prv_parse_float_number>
 800274e:	eeb0 7a40 	vmov.f32	s14, s0
 8002752:	eef0 7a60 	vmov.f32	s15, s1
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800275c:	e167      	b.n	8002a2e <prv_parse_term+0x54a>
            case 11:                            /* Altitude above ellipsoid */
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 800275e:	2100      	movs	r1, #0
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff fe47 	bl	80023f4 <prv_parse_float_number>
 8002766:	eeb0 7a40 	vmov.f32	s14, s0
 800276a:	eef0 7a60 	vmov.f32	s15, s1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002774:	e15b      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {        /* Process GPGSA statement */
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800277c:	2902      	cmp	r1, #2
 800277e:	f040 8083 	bne.w	8002888 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002788:	3b02      	subs	r3, #2
 800278a:	2b0f      	cmp	r3, #15
 800278c:	d860      	bhi.n	8002850 <prv_parse_term+0x36c>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <prv_parse_term+0x2b0>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	080027d5 	.word	0x080027d5
 8002798:	08002851 	.word	0x08002851
 800279c:	08002851 	.word	0x08002851
 80027a0:	08002851 	.word	0x08002851
 80027a4:	08002851 	.word	0x08002851
 80027a8:	08002851 	.word	0x08002851
 80027ac:	08002851 	.word	0x08002851
 80027b0:	08002851 	.word	0x08002851
 80027b4:	08002851 	.word	0x08002851
 80027b8:	08002851 	.word	0x08002851
 80027bc:	08002851 	.word	0x08002851
 80027c0:	08002851 	.word	0x08002851
 80027c4:	08002851 	.word	0x08002851
 80027c8:	08002809 	.word	0x08002809
 80027cc:	08002821 	.word	0x08002821
 80027d0:	08002839 	.word	0x08002839
            case 2:                             /* Process fix mode */
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 80027d4:	2100      	movs	r1, #0
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff fdc2 	bl	8002360 <prv_parse_number>
 80027dc:	4603      	mov	r3, r0
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 80027e6:	e122      	b.n	8002a2e <prv_parse_term+0x54a>
 80027e8:	0800bb60 	.word	0x0800bb60
 80027ec:	0800bb68 	.word	0x0800bb68
 80027f0:	0800bb70 	.word	0x0800bb70
 80027f4:	0800bb78 	.word	0x0800bb78
 80027f8:	0800bb80 	.word	0x0800bb80
 80027fc:	0800bb88 	.word	0x0800bb88
 8002800:	0800bb90 	.word	0x0800bb90
 8002804:	0800bb98 	.word	0x0800bb98
            case 15:                            /* Process PDOP */
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f7ff fdf2 	bl	80023f4 <prv_parse_float_number>
 8002810:	eeb0 7a40 	vmov.f32	s14, s0
 8002814:	eef0 7a60 	vmov.f32	s15, s1
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800281e:	e106      	b.n	8002a2e <prv_parse_term+0x54a>
            case 16:                            /* Process HDOP */
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002820:	2100      	movs	r1, #0
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fde6 	bl	80023f4 <prv_parse_float_number>
 8002828:	eeb0 7a40 	vmov.f32	s14, s0
 800282c:	eef0 7a60 	vmov.f32	s15, s1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002836:	e0fa      	b.n	8002a2e <prv_parse_term+0x54a>
            case 17:                            /* Process VDOP */
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002838:	2100      	movs	r1, #0
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff fdda 	bl	80023f4 <prv_parse_float_number>
 8002840:	eeb0 7a40 	vmov.f32	s14, s0
 8002844:	eef0 7a60 	vmov.f32	s15, s1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800284e:	e0ee      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002856:	2b02      	cmp	r3, #2
 8002858:	f240 80e4 	bls.w	8002a24 <prv_parse_term+0x540>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002862:	2b0e      	cmp	r3, #14
 8002864:	f200 80de 	bhi.w	8002a24 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002868:	2100      	movs	r1, #0
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff fd78 	bl	8002360 <prv_parse_number>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002878:	3b03      	subs	r3, #3
 800287a:	b2d1      	uxtb	r1, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	460a      	mov	r2, r1
 8002882:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 8002886:	e0cd      	b.n	8002a24 <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {        /* Process GPGSV statement */
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 800288e:	2903      	cmp	r1, #3
 8002890:	d11b      	bne.n	80028ca <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002898:	2b02      	cmp	r3, #2
 800289a:	d002      	beq.n	80028a2 <prv_parse_term+0x3be>
 800289c:	2b03      	cmp	r3, #3
 800289e:	d00a      	beq.n	80028b6 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80028a0:	e0c5      	b.n	8002a2e <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80028a2:	2100      	movs	r1, #0
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff fd5b 	bl	8002360 <prv_parse_number>
 80028aa:	4603      	mov	r3, r0
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80028b4:	e0bb      	b.n	8002a2e <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80028b6:	2100      	movs	r1, #0
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff fd51 	bl	8002360 <prv_parse_number>
 80028be:	4603      	mov	r3, r0
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80028c8:	e0b1      	b.n	8002a2e <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {        /* Process GPRMC statement */
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80028d0:	2904      	cmp	r1, #4
 80028d2:	f040 80ac 	bne.w	8002a2e <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80028dc:	3902      	subs	r1, #2
 80028de:	2909      	cmp	r1, #9
 80028e0:	f200 80a2 	bhi.w	8002a28 <prv_parse_term+0x544>
 80028e4:	a001      	add	r0, pc, #4	; (adr r0, 80028ec <prv_parse_term+0x408>)
 80028e6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80028ea:	bf00      	nop
 80028ec:	08002915 	.word	0x08002915
 80028f0:	08002a29 	.word	0x08002a29
 80028f4:	08002a29 	.word	0x08002a29
 80028f8:	08002a29 	.word	0x08002a29
 80028fc:	08002a29 	.word	0x08002a29
 8002900:	0800292f 	.word	0x0800292f
 8002904:	08002947 	.word	0x08002947
 8002908:	0800295f 	.word	0x0800295f
 800290c:	080029d9 	.word	0x080029d9
 8002910:	080029f1 	.word	0x080029f1
            case 2:                             /* Process valid status */
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800291a:	2b41      	cmp	r3, #65	; 0x41
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 800292c:	e07f      	b.n	8002a2e <prv_parse_term+0x54a>
            case 7:                             /* Process ground speed in knots */
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800292e:	2100      	movs	r1, #0
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fd5f 	bl	80023f4 <prv_parse_float_number>
 8002936:	eeb0 7a40 	vmov.f32	s14, s0
 800293a:	eef0 7a60 	vmov.f32	s15, s1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002944:	e073      	b.n	8002a2e <prv_parse_term+0x54a>
            case 8:                             /* Process true ground coarse */
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002946:	2100      	movs	r1, #0
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff fd53 	bl	80023f4 <prv_parse_float_number>
 800294e:	eeb0 7a40 	vmov.f32	s14, s0
 8002952:	eef0 7a60 	vmov.f32	s15, s1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800295c:	e067      	b.n	8002a2e <prv_parse_term+0x54a>
            case 9:                             /* Process date */
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002964:	3b30      	subs	r3, #48	; 0x30
 8002966:	b2db      	uxtb	r3, r3
 8002968:	461a      	mov	r2, r3
 800296a:	0092      	lsls	r2, r2, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	b2da      	uxtb	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002978:	4413      	add	r3, r2
 800297a:	b2db      	uxtb	r3, r3
 800297c:	3b30      	subs	r3, #48	; 0x30
 800297e:	b2da      	uxtb	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800298c:	3b30      	subs	r3, #48	; 0x30
 800298e:	b2db      	uxtb	r3, r3
 8002990:	461a      	mov	r2, r3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4413      	add	r3, r2
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029a0:	4413      	add	r3, r2
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	3b30      	subs	r3, #48	; 0x30
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80029b4:	3b30      	subs	r3, #48	; 0x30
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	461a      	mov	r2, r3
 80029ba:	0092      	lsls	r2, r2, #2
 80029bc:	4413      	add	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80029c8:	4413      	add	r3, r2
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	3b30      	subs	r3, #48	; 0x30
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80029d6:	e02a      	b.n	8002a2e <prv_parse_term+0x54a>
            case 10:                            /* Process magnetic variation */
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80029d8:	2100      	movs	r1, #0
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff fd0a 	bl	80023f4 <prv_parse_float_number>
 80029e0:	eeb0 7a40 	vmov.f32	s14, s0
 80029e4:	eef0 7a60 	vmov.f32	s15, s1
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 80029ee:	e01e      	b.n	8002a2e <prv_parse_term+0x54a>
            case 11:                            /* Process magnetic variation east/west */
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 80029f6:	2957      	cmp	r1, #87	; 0x57
 80029f8:	d004      	beq.n	8002a04 <prv_parse_term+0x520>
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002a00:	2977      	cmp	r1, #119	; 0x77
 8002a02:	d113      	bne.n	8002a2c <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002a16:	e009      	b.n	8002a2c <prv_parse_term+0x548>
                break;
 8002a18:	bf00      	nop
 8002a1a:	e008      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a1c:	bf00      	nop
 8002a1e:	e006      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a20:	bf00      	nop
 8002a22:	e004      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a24:	bf00      	nop
 8002a26:	e002      	b.n	8002a2e <prv_parse_term+0x54a>
            default:
                break;
 8002a28:	bf00      	nop
 8002a2a:	e000      	b.n	8002a2e <prv_parse_term+0x54a>
                break;
 8002a2c:	bf00      	nop
                break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a3a:	bf00      	nop

08002a3c <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* gh) {
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);   /* Convert received CRC from string (hex) to number */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a4a:	2b2f      	cmp	r3, #47	; 0x2f
 8002a4c:	d90d      	bls.n	8002a6a <prv_check_crc+0x2e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a54:	2b39      	cmp	r3, #57	; 0x39
 8002a56:	d808      	bhi.n	8002a6a <prv_check_crc+0x2e>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a5e:	3b30      	subs	r3, #48	; 0x30
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	b25a      	sxtb	r2, r3
 8002a68:	e026      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a70:	2b60      	cmp	r3, #96	; 0x60
 8002a72:	d90d      	bls.n	8002a90 <prv_check_crc+0x54>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a7a:	2b7a      	cmp	r3, #122	; 0x7a
 8002a7c:	d808      	bhi.n	8002a90 <prv_check_crc+0x54>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a84:	3b57      	subs	r3, #87	; 0x57
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	b25a      	sxtb	r2, r3
 8002a8e:	e013      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d90d      	bls.n	8002ab6 <prv_check_crc+0x7a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aa0:	2b5a      	cmp	r3, #90	; 0x5a
 8002aa2:	d808      	bhi.n	8002ab6 <prv_check_crc+0x7a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002aaa:	3b37      	subs	r3, #55	; 0x37
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	b25a      	sxtb	r2, r3
 8002ab4:	e000      	b.n	8002ab8 <prv_check_crc+0x7c>
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002abe:	2b2f      	cmp	r3, #47	; 0x2f
 8002ac0:	d90c      	bls.n	8002adc <prv_check_crc+0xa0>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ac8:	2b39      	cmp	r3, #57	; 0x39
 8002aca:	d807      	bhi.n	8002adc <prv_check_crc+0xa0>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ad2:	b25b      	sxtb	r3, r3
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	b25b      	sxtb	r3, r3
 8002ada:	e028      	b.n	8002b2e <prv_check_crc+0xf2>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002ae2:	2b60      	cmp	r3, #96	; 0x60
 8002ae4:	d90e      	bls.n	8002b04 <prv_check_crc+0xc8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002aec:	2b7a      	cmp	r3, #122	; 0x7a
 8002aee:	d809      	bhi.n	8002b04 <prv_check_crc+0xc8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002af6:	3b57      	subs	r3, #87	; 0x57
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	b25b      	sxtb	r3, r3
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	b25b      	sxtb	r3, r3
 8002b02:	e014      	b.n	8002b2e <prv_check_crc+0xf2>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d90e      	bls.n	8002b2c <prv_check_crc+0xf0>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b14:	2b5a      	cmp	r3, #90	; 0x5a
 8002b16:	d809      	bhi.n	8002b2c <prv_check_crc+0xf0>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002b1e:	3b37      	subs	r3, #55	; 0x37
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	b25b      	sxtb	r3, r3
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	b25b      	sxtb	r3, r3
 8002b2a:	e000      	b.n	8002b2e <prv_check_crc+0xf2>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	b25b      	sxtb	r3, r3
 8002b32:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;               /* They must match! */
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	bf0c      	ite	eq
 8002b40:	2301      	moveq	r3, #1
 8002b42:	2300      	movne	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3714      	adds	r7, #20
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       gh: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d136      	bne.n	8002bd2 <prv_copy_from_tmp_memory+0x80>
        gh->latitude = gh->p.data.gga.latitude;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	e9c1 2300 	strd	r2, r3, [r1]
        gh->longitude = gh->p.data.gga.longitude;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	e9c1 2302 	strd	r2, r3, [r1, #8]
        gh->altitude = gh->p.data.gga.altitude;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	e9c1 2304 	strd	r2, r3, [r1, #16]
        gh->geo_sep = gh->p.data.gga.geo_sep;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gh->sats_in_use = gh->p.data.gga.sats_in_use;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f883 2020 	strb.w	r2, [r3, #32]
        gh->fix = gh->p.data.gga.fix;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        gh->minutes = gh->p.data.gga.minutes;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        gh->seconds = gh->p.data.gga.seconds;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002bd0:	e061      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d121      	bne.n	8002c20 <prv_copy_from_tmp_memory+0xce>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f103 0041 	add.w	r0, r3, #65	; 0x41
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	33a1      	adds	r3, #161	; 0xa1
 8002c16:	220c      	movs	r2, #12
 8002c18:	4619      	mov	r1, r3
 8002c1a:	f005 ff74 	bl	8008b06 <memcpy>
 8002c1e:	e03a      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d106      	bne.n	8002c38 <prv_copy_from_tmp_memory+0xe6>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8002c36:	e02e      	b.n	8002c96 <prv_copy_from_tmp_memory+0x144>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d129      	bne.n	8002c96 <prv_copy_from_tmp_memory+0x144>
        gh->course = gh->p.data.rmc.course;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002c96:	2301      	movs	r3, #1
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       gh: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* gh) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));              /* Reset structure */
 8002ca8:	22b0      	movs	r2, #176	; 0xb0
 8002caa:	2100      	movs	r1, #0
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f005 fe9c 	bl	80089ea <memset>
    return 1;
 8002cb2:	2301      	movs	r3, #1
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002ccc:	e0ad      	b.n	8002e2a <lwgps_process+0x16e>
        if (*d == '$') {                        /* Check for beginning of NMEA line */
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b24      	cmp	r3, #36	; 0x24
 8002cd4:	d128      	bne.n	8002d28 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));/* Reset private memory */
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	3370      	adds	r3, #112	; 0x70
 8002cda:	2240      	movs	r2, #64	; 0x40
 8002cdc:	2100      	movs	r1, #0
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f005 fe83 	bl	80089ea <memset>
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002cea:	2b0b      	cmp	r3, #11
 8002cec:	f200 8097 	bhi.w	8002e1e <lwgps_process+0x162>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	781a      	ldrb	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d26:	e07a      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == ',') {                 /* Term separator character */
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b2c      	cmp	r3, #44	; 0x2c
 8002d2e:	d11d      	bne.n	8002d6c <lwgps_process+0xb0>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fbd7 	bl	80024e4 <prv_parse_term>
            CRC_ADD(gh, *d);                    /* Add character to CRC computation */
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	4053      	eors	r3, r2
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);                      /* Start with next term */
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d60:	3301      	adds	r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002d6a:	e058      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == '*') {                 /* Start indicates end of data for CRC computation */
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b2a      	cmp	r3, #42	; 0x2a
 8002d72:	d117      	bne.n	8002da4 <lwgps_process+0xe8>
            prv_parse_term(gh);                 /* Parse term we have currently in memory */
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7ff fbb5 	bl	80024e4 <prv_parse_term>
            gh->p.star = 1;                     /* STAR detected */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);                      /* Start with next term */
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d98:	3301      	adds	r3, #1
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002da2:	e03c      	b.n	8002e1e <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b0d      	cmp	r3, #13
 8002daa:	d109      	bne.n	8002dc0 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {            /* Check for CRC result */
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f7ff fe45 	bl	8002a3c <prv_check_crc>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d032      	beq.n	8002e1e <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(gh);   /* Copy memory from temporary to user memory */
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f7ff feca 	bl	8002b52 <prv_copy_from_tmp_memory>
 8002dbe:	e02e      	b.n	8002e1e <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!gh->p.star) {                  /* Add to CRC only if star not yet detected */
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <lwgps_process+0x122>
                CRC_ADD(gh, *d);                /* Add to CRC */
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4053      	eors	r3, r2
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);                   /* Add character to term */
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002de4:	2b0b      	cmp	r3, #11
 8002de6:	d81a      	bhi.n	8002e1e <lwgps_process+0x162>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002dee:	4619      	mov	r1, r3
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	440b      	add	r3, r1
 8002df8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002e12:	461a      	mov	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {               /* Process all bytes */
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	3301      	adds	r3, #1
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	607b      	str	r3, [r7, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f af4e 	bne.w	8002cce <lwgps_process+0x12>
        }
    }
    return 1;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_UART_RxCpltCallback>:
 unsigned char array[4];
} float32toInt8;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	if(huart == &huart6) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <HAL_UART_RxCpltCallback+0x68>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d127      	bne.n	8002e9c <HAL_UART_RxCpltCallback+0x60>
		if(rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b0a      	cmp	r3, #10
 8002e52:	d010      	beq.n	8002e76 <HAL_UART_RxCpltCallback+0x3a>
 8002e54:	4b15      	ldr	r3, [pc, #84]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	b25b      	sxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	db0b      	blt.n	8002e76 <HAL_UART_RxCpltCallback+0x3a>
			rx_buffer[rx_index++] = rx_data;
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	b2d1      	uxtb	r1, r2
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e68:	7011      	strb	r1, [r2, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e6e:	7819      	ldrb	r1, [r3, #0]
 8002e70:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <HAL_UART_RxCpltCallback+0x74>)
 8002e72:	5499      	strb	r1, [r3, r2]
 8002e74:	e00d      	b.n	8002e92 <HAL_UART_RxCpltCallback+0x56>
		} else {
			lwgps_process(&gps, rx_buffer, rx_index+1);
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <HAL_UART_RxCpltCallback+0x74>)
 8002e80:	480c      	ldr	r0, [pc, #48]	; (8002eb4 <HAL_UART_RxCpltCallback+0x78>)
 8002e82:	f7ff ff1b 	bl	8002cbc <lwgps_process>
			rx_index = 0;
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_UART_RxCpltCallback+0x70>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
			rx_data = 0;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002e92:	2201      	movs	r2, #1
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <HAL_UART_RxCpltCallback+0x6c>)
 8002e96:	4803      	ldr	r0, [pc, #12]	; (8002ea4 <HAL_UART_RxCpltCallback+0x68>)
 8002e98:	f003 ff0f 	bl	8006cba <HAL_UART_Receive_IT>
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200003fc 	.word	0x200003fc
 8002ea8:	200005f9 	.word	0x200005f9
 8002eac:	200005f8 	.word	0x200005f8
 8002eb0:	20000578 	.word	0x20000578
 8002eb4:	200004c8 	.word	0x200004c8

08002eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002ebe:	f001 f9db 	bl	8004278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002ec2:	f000 f939 	bl	8003138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002ec6:	f000 fa77 	bl	80033b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002eca:	f000 f9a3 	bl	8003214 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002ece:	f000 f9cf 	bl	8003270 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002ed2:	f000 fa1d 	bl	8003310 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8002ed6:	f000 fa45 	bl	8003364 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Init(&htim1);
 8002eda:	487f      	ldr	r0, [pc, #508]	; (80030d8 <main+0x220>)
 8002edc:	f003 fb3a 	bl	8006554 <HAL_TIM_Base_Init>
  MPU6050_Init();
 8002ee0:	f000 fac2 	bl	8003468 <MPU6050_Init>
  lwgps_init(&gps);
 8002ee4:	487d      	ldr	r0, [pc, #500]	; (80030dc <main+0x224>)
 8002ee6:	f7ff fedb 	bl	8002ca0 <lwgps_init>
  HAL_UART_Receive_IT(&huart6, &rx_data, 1);
 8002eea:	2201      	movs	r2, #1
 8002eec:	497c      	ldr	r1, [pc, #496]	; (80030e0 <main+0x228>)
 8002eee:	487d      	ldr	r0, [pc, #500]	; (80030e4 <main+0x22c>)
 8002ef0:	f003 fee3 	bl	8006cba <HAL_UART_Receive_IT>

    BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2300      	movs	r3, #0
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2303      	movs	r3, #3
 8002efe:	2201      	movs	r2, #1
 8002f00:	2105      	movs	r1, #5
 8002f02:	2002      	movs	r0, #2
 8002f04:	f7fe f9e2 	bl	80012cc <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  acX = MPU6050_Kalman_Accel_X();
 8002f08:	f000 fce0 	bl	80038cc <MPU6050_Kalman_Accel_X>
 8002f0c:	ec53 2b10 	vmov	r2, r3, d0
 8002f10:	4610      	mov	r0, r2
 8002f12:	4619      	mov	r1, r3
 8002f14:	f7fd fe80 	bl	8000c18 <__aeabi_d2f>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	4a73      	ldr	r2, [pc, #460]	; (80030e8 <main+0x230>)
 8002f1c:	6013      	str	r3, [r2, #0]
	 	  acY = MPU6050_Kalman_Accel_Y();
 8002f1e:	f000 fd77 	bl	8003a10 <MPU6050_Kalman_Accel_Y>
 8002f22:	ec53 2b10 	vmov	r2, r3, d0
 8002f26:	4610      	mov	r0, r2
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f7fd fe75 	bl	8000c18 <__aeabi_d2f>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	4a6e      	ldr	r2, [pc, #440]	; (80030ec <main+0x234>)
 8002f32:	6013      	str	r3, [r2, #0]
	 	  acZ = MPU6050_Kalman_Accel_Z();
 8002f34:	f000 fe0e 	bl	8003b54 <MPU6050_Kalman_Accel_Z>
 8002f38:	ec53 2b10 	vmov	r2, r3, d0
 8002f3c:	4610      	mov	r0, r2
 8002f3e:	4619      	mov	r1, r3
 8002f40:	f7fd fe6a 	bl	8000c18 <__aeabi_d2f>
 8002f44:	4603      	mov	r3, r0
 8002f46:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <main+0x238>)
 8002f48:	6013      	str	r3, [r2, #0]
	 	  gyX = MPU6050_Kalman_Gyro_X();
 8002f4a:	f000 fea5 	bl	8003c98 <MPU6050_Kalman_Gyro_X>
 8002f4e:	ec53 2b10 	vmov	r2, r3, d0
 8002f52:	4610      	mov	r0, r2
 8002f54:	4619      	mov	r1, r3
 8002f56:	f7fd fe5f 	bl	8000c18 <__aeabi_d2f>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <main+0x23c>)
 8002f5e:	6013      	str	r3, [r2, #0]
	 	  gyY = MPU6050_Kalman_Gyro_X();
 8002f60:	f000 fe9a 	bl	8003c98 <MPU6050_Kalman_Gyro_X>
 8002f64:	ec53 2b10 	vmov	r2, r3, d0
 8002f68:	4610      	mov	r0, r2
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	f7fd fe54 	bl	8000c18 <__aeabi_d2f>
 8002f70:	4603      	mov	r3, r0
 8002f72:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <main+0x240>)
 8002f74:	6013      	str	r3, [r2, #0]
	 	  gyZ = MPU6050_Kalman_Gyro_X();
 8002f76:	f000 fe8f 	bl	8003c98 <MPU6050_Kalman_Gyro_X>
 8002f7a:	ec53 2b10 	vmov	r2, r3, d0
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7fd fe49 	bl	8000c18 <__aeabi_d2f>
 8002f86:	4603      	mov	r3, r0
 8002f88:	4a5c      	ldr	r2, [pc, #368]	; (80030fc <main+0x244>)
 8002f8a:	6013      	str	r3, [r2, #0]
	 	  RollAng = MPU6050_Kalman_Roll_Angle();
 8002f8c:	f000 fbfa 	bl	8003784 <MPU6050_Kalman_Roll_Angle>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
 8002f94:	4b5a      	ldr	r3, [pc, #360]	; (8003100 <main+0x248>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]
	 	  Temperature = BME280_Temperature();
 8002f9a:	f7fe feb5 	bl	8001d08 <BME280_Temperature>
 8002f9e:	ec53 2b10 	vmov	r2, r3, d0
 8002fa2:	4610      	mov	r0, r2
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	f7fd fe37 	bl	8000c18 <__aeabi_d2f>
 8002faa:	4603      	mov	r3, r0
 8002fac:	4a55      	ldr	r2, [pc, #340]	; (8003104 <main+0x24c>)
 8002fae:	6013      	str	r3, [r2, #0]
	 	  Pressure = BME280_Pressure();
 8002fb0:	f7fe fe26 	bl	8001c00 <BME280_Pressure>
 8002fb4:	ec53 2b10 	vmov	r2, r3, d0
 8002fb8:	4610      	mov	r0, r2
 8002fba:	4619      	mov	r1, r3
 8002fbc:	f7fd fe2c 	bl	8000c18 <__aeabi_d2f>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	4a51      	ldr	r2, [pc, #324]	; (8003108 <main+0x250>)
 8002fc4:	6013      	str	r3, [r2, #0]
	 	  Humidity = BME280_Humidity();
 8002fc6:	f7fe fe5d 	bl	8001c84 <BME280_Humidity>
 8002fca:	ec53 2b10 	vmov	r2, r3, d0
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fe21 	bl	8000c18 <__aeabi_d2f>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4a4c      	ldr	r2, [pc, #304]	; (800310c <main+0x254>)
 8002fda:	6013      	str	r3, [r2, #0]
	 	  T = BME280_Kalman_Temp(Temperature);
 8002fdc:	4b49      	ldr	r3, [pc, #292]	; (8003104 <main+0x24c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7fd fac9 	bl	8000578 <__aeabi_f2d>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	ec43 2b10 	vmov	d0, r2, r3
 8002fee:	f7ff f917 	bl	8002220 <BME280_Kalman_Temp>
 8002ff2:	ec53 2b10 	vmov	r2, r3, d0
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	4619      	mov	r1, r3
 8002ffa:	f7fd fe0d 	bl	8000c18 <__aeabi_d2f>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4a43      	ldr	r2, [pc, #268]	; (8003110 <main+0x258>)
 8003002:	6013      	str	r3, [r2, #0]
	 	  P = BME280_Kalman_Press(Pressure);
 8003004:	4b40      	ldr	r3, [pc, #256]	; (8003108 <main+0x250>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fab5 	bl	8000578 <__aeabi_f2d>
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	ec43 2b10 	vmov	d0, r2, r3
 8003016:	f7fe ffc3 	bl	8001fa0 <BME280_Kalman_Press>
 800301a:	ec53 2b10 	vmov	r2, r3, d0
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	f7fd fdf9 	bl	8000c18 <__aeabi_d2f>
 8003026:	4603      	mov	r3, r0
 8003028:	4a3a      	ldr	r2, [pc, #232]	; (8003114 <main+0x25c>)
 800302a:	6013      	str	r3, [r2, #0]
	 	  H = BME280_Kalman_Hum(Humidity);
 800302c:	4b37      	ldr	r3, [pc, #220]	; (800310c <main+0x254>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd faa1 	bl	8000578 <__aeabi_f2d>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	ec43 2b10 	vmov	d0, r2, r3
 800303e:	f7ff f84f 	bl	80020e0 <BME280_Kalman_Hum>
 8003042:	ec53 2b10 	vmov	r2, r3, d0
 8003046:	4610      	mov	r0, r2
 8003048:	4619      	mov	r1, r3
 800304a:	f7fd fde5 	bl	8000c18 <__aeabi_d2f>
 800304e:	4603      	mov	r3, r0
 8003050:	4a31      	ldr	r2, [pc, #196]	; (8003118 <main+0x260>)
 8003052:	6013      	str	r3, [r2, #0]
	 	  Altitude1 = BME280_Altitude();
 8003054:	f7fe fe9c 	bl	8001d90 <BME280_Altitude>
 8003058:	eef0 7a40 	vmov.f32	s15, s0
 800305c:	4b2f      	ldr	r3, [pc, #188]	; (800311c <main+0x264>)
 800305e:	edc3 7a00 	vstr	s15, [r3]
	 	  Alt = BME280_Kalman_Alt(Altitude1);
 8003062:	4b2e      	ldr	r3, [pc, #184]	; (800311c <main+0x264>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fa86 	bl	8000578 <__aeabi_f2d>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	ec43 2b10 	vmov	d0, r2, r3
 8003074:	f7fe feea 	bl	8001e4c <BME280_Kalman_Alt>
 8003078:	eef0 7a40 	vmov.f32	s15, s0
 800307c:	4b28      	ldr	r3, [pc, #160]	; (8003120 <main+0x268>)
 800307e:	edc3 7a00 	vstr	s15, [r3]
	 	  gpsAlt = gps.altitude;
 8003082:	4b16      	ldr	r3, [pc, #88]	; (80030dc <main+0x224>)
 8003084:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f7fd fdc4 	bl	8000c18 <__aeabi_d2f>
 8003090:	4603      	mov	r3, r0
 8003092:	4a24      	ldr	r2, [pc, #144]	; (8003124 <main+0x26c>)
 8003094:	6013      	str	r3, [r2, #0]
	 	  gpsLat = gps.latitude;
 8003096:	4b11      	ldr	r3, [pc, #68]	; (80030dc <main+0x224>)
 8003098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	f7fd fdba 	bl	8000c18 <__aeabi_d2f>
 80030a4:	4603      	mov	r3, r0
 80030a6:	4a20      	ldr	r2, [pc, #128]	; (8003128 <main+0x270>)
 80030a8:	6013      	str	r3, [r2, #0]
	 	  gpsLong = gps.longitude;
 80030aa:	4b0c      	ldr	r3, [pc, #48]	; (80030dc <main+0x224>)
 80030ac:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80030b0:	4610      	mov	r0, r2
 80030b2:	4619      	mov	r1, r3
 80030b4:	f7fd fdb0 	bl	8000c18 <__aeabi_d2f>
 80030b8:	4603      	mov	r3, r0
 80030ba:	4a1c      	ldr	r2, [pc, #112]	; (800312c <main+0x274>)
 80030bc:	6013      	str	r3, [r2, #0]

	 	//  paket(sayac);
	 	  //sayac = sayac+1;

	 	  HAL_UART_Transmit(&huart2, buff, 54, 500);
 80030be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030c2:	2236      	movs	r2, #54	; 0x36
 80030c4:	491a      	ldr	r1, [pc, #104]	; (8003130 <main+0x278>)
 80030c6:	481b      	ldr	r0, [pc, #108]	; (8003134 <main+0x27c>)
 80030c8:	f003 fd6c 	bl	8006ba4 <HAL_UART_Transmit>
	 	  HAL_Delay(500);
 80030cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030d0:	f001 f944 	bl	800435c <HAL_Delay>
	  acX = MPU6050_Kalman_Accel_X();
 80030d4:	e718      	b.n	8002f08 <main+0x50>
 80030d6:	bf00      	nop
 80030d8:	2000036c 	.word	0x2000036c
 80030dc:	200004c8 	.word	0x200004c8
 80030e0:	200005f9 	.word	0x200005f9
 80030e4:	200003fc 	.word	0x200003fc
 80030e8:	20000458 	.word	0x20000458
 80030ec:	2000045c 	.word	0x2000045c
 80030f0:	20000460 	.word	0x20000460
 80030f4:	20000464 	.word	0x20000464
 80030f8:	20000468 	.word	0x20000468
 80030fc:	2000046c 	.word	0x2000046c
 8003100:	20000444 	.word	0x20000444
 8003104:	2000044c 	.word	0x2000044c
 8003108:	20000450 	.word	0x20000450
 800310c:	20000454 	.word	0x20000454
 8003110:	20000474 	.word	0x20000474
 8003114:	20000478 	.word	0x20000478
 8003118:	2000047c 	.word	0x2000047c
 800311c:	20000448 	.word	0x20000448
 8003120:	20000470 	.word	0x20000470
 8003124:	20000480 	.word	0x20000480
 8003128:	20000484 	.word	0x20000484
 800312c:	20000488 	.word	0x20000488
 8003130:	2000048c 	.word	0x2000048c
 8003134:	200003b4 	.word	0x200003b4

08003138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b094      	sub	sp, #80	; 0x50
 800313c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	2234      	movs	r2, #52	; 0x34
 8003144:	2100      	movs	r1, #0
 8003146:	4618      	mov	r0, r3
 8003148:	f005 fc4f 	bl	80089ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800314c:	f107 0308 	add.w	r3, r7, #8
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800315c:	2300      	movs	r3, #0
 800315e:	607b      	str	r3, [r7, #4]
 8003160:	4b2a      	ldr	r3, [pc, #168]	; (800320c <SystemClock_Config+0xd4>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	4a29      	ldr	r2, [pc, #164]	; (800320c <SystemClock_Config+0xd4>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	6413      	str	r3, [r2, #64]	; 0x40
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <SystemClock_Config+0xd4>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003178:	2300      	movs	r3, #0
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <SystemClock_Config+0xd8>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003184:	4a22      	ldr	r2, [pc, #136]	; (8003210 <SystemClock_Config+0xd8>)
 8003186:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800318a:	6013      	str	r3, [r2, #0]
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <SystemClock_Config+0xd8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003194:	603b      	str	r3, [r7, #0]
 8003196:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003198:	2302      	movs	r3, #2
 800319a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800319c:	2301      	movs	r3, #1
 800319e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80031a0:	2310      	movs	r3, #16
 80031a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031a4:	2302      	movs	r3, #2
 80031a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80031a8:	2300      	movs	r3, #0
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80031ac:	2308      	movs	r3, #8
 80031ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 80031b0:	235a      	movs	r3, #90	; 0x5a
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031b4:	2302      	movs	r3, #2
 80031b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80031b8:	2302      	movs	r3, #2
 80031ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80031bc:	2302      	movs	r3, #2
 80031be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4618      	mov	r0, r3
 80031c6:	f002 ff27 	bl	8006018 <HAL_RCC_OscConfig>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80031d0:	f000 f944 	bl	800345c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031d4:	230f      	movs	r3, #15
 80031d6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031d8:	2302      	movs	r3, #2
 80031da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80031ec:	f107 0308 	add.w	r3, r7, #8
 80031f0:	2102      	movs	r1, #2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f002 fc4c 	bl	8005a90 <HAL_RCC_ClockConfig>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80031fe:	f000 f92d 	bl	800345c <Error_Handler>
  }
}
 8003202:	bf00      	nop
 8003204:	3750      	adds	r7, #80	; 0x50
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000

08003214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003218:	4b12      	ldr	r3, [pc, #72]	; (8003264 <MX_I2C1_Init+0x50>)
 800321a:	4a13      	ldr	r2, [pc, #76]	; (8003268 <MX_I2C1_Init+0x54>)
 800321c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800321e:	4b11      	ldr	r3, [pc, #68]	; (8003264 <MX_I2C1_Init+0x50>)
 8003220:	4a12      	ldr	r2, [pc, #72]	; (800326c <MX_I2C1_Init+0x58>)
 8003222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <MX_I2C1_Init+0x50>)
 8003226:	2200      	movs	r2, #0
 8003228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <MX_I2C1_Init+0x50>)
 800322c:	2200      	movs	r2, #0
 800322e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003230:	4b0c      	ldr	r3, [pc, #48]	; (8003264 <MX_I2C1_Init+0x50>)
 8003232:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003238:	4b0a      	ldr	r3, [pc, #40]	; (8003264 <MX_I2C1_Init+0x50>)
 800323a:	2200      	movs	r2, #0
 800323c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800323e:	4b09      	ldr	r3, [pc, #36]	; (8003264 <MX_I2C1_Init+0x50>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003244:	4b07      	ldr	r3, [pc, #28]	; (8003264 <MX_I2C1_Init+0x50>)
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <MX_I2C1_Init+0x50>)
 800324c:	2200      	movs	r2, #0
 800324e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003250:	4804      	ldr	r0, [pc, #16]	; (8003264 <MX_I2C1_Init+0x50>)
 8003252:	f001 fbf9 	bl	8004a48 <HAL_I2C_Init>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800325c:	f000 f8fe 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20000318 	.word	0x20000318
 8003268:	40005400 	.word	0x40005400
 800326c:	000186a0 	.word	0x000186a0

08003270 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003276:	f107 0308 	add.w	r3, r7, #8
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
 800327e:	605a      	str	r2, [r3, #4]
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003284:	463b      	mov	r3, r7
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800328c:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <MX_TIM1_Init+0x98>)
 800328e:	4a1f      	ldr	r2, [pc, #124]	; (800330c <MX_TIM1_Init+0x9c>)
 8003290:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 90-1;
 8003292:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <MX_TIM1_Init+0x98>)
 8003294:	2259      	movs	r2, #89	; 0x59
 8003296:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <MX_TIM1_Init+0x98>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800329e:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <MX_TIM1_Init+0x98>)
 80032a0:	2263      	movs	r2, #99	; 0x63
 80032a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032a4:	4b18      	ldr	r3, [pc, #96]	; (8003308 <MX_TIM1_Init+0x98>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80032aa:	4b17      	ldr	r3, [pc, #92]	; (8003308 <MX_TIM1_Init+0x98>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032b0:	4b15      	ldr	r3, [pc, #84]	; (8003308 <MX_TIM1_Init+0x98>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032b6:	4814      	ldr	r0, [pc, #80]	; (8003308 <MX_TIM1_Init+0x98>)
 80032b8:	f003 f94c 	bl	8006554 <HAL_TIM_Base_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <MX_TIM1_Init+0x56>
  {
    Error_Handler();
 80032c2:	f000 f8cb 	bl	800345c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032cc:	f107 0308 	add.w	r3, r7, #8
 80032d0:	4619      	mov	r1, r3
 80032d2:	480d      	ldr	r0, [pc, #52]	; (8003308 <MX_TIM1_Init+0x98>)
 80032d4:	f003 f98d 	bl	80065f2 <HAL_TIM_ConfigClockSource>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <MX_TIM1_Init+0x72>
  {
    Error_Handler();
 80032de:	f000 f8bd 	bl	800345c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e2:	2300      	movs	r3, #0
 80032e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032ea:	463b      	mov	r3, r7
 80032ec:	4619      	mov	r1, r3
 80032ee:	4806      	ldr	r0, [pc, #24]	; (8003308 <MX_TIM1_Init+0x98>)
 80032f0:	f003 fb8c 	bl	8006a0c <HAL_TIMEx_MasterConfigSynchronization>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80032fa:	f000 f8af 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80032fe:	bf00      	nop
 8003300:	3718      	adds	r7, #24
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	2000036c 	.word	0x2000036c
 800330c:	40010000 	.word	0x40010000

08003310 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <MX_USART2_UART_Init+0x4c>)
 8003316:	4a12      	ldr	r2, [pc, #72]	; (8003360 <MX_USART2_UART_Init+0x50>)
 8003318:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800331a:	4b10      	ldr	r3, [pc, #64]	; (800335c <MX_USART2_UART_Init+0x4c>)
 800331c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003320:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <MX_USART2_UART_Init+0x4c>)
 8003324:	2200      	movs	r2, #0
 8003326:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <MX_USART2_UART_Init+0x4c>)
 800332a:	2200      	movs	r2, #0
 800332c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800332e:	4b0b      	ldr	r3, [pc, #44]	; (800335c <MX_USART2_UART_Init+0x4c>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003334:	4b09      	ldr	r3, [pc, #36]	; (800335c <MX_USART2_UART_Init+0x4c>)
 8003336:	220c      	movs	r2, #12
 8003338:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <MX_USART2_UART_Init+0x4c>)
 800333c:	2200      	movs	r2, #0
 800333e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003340:	4b06      	ldr	r3, [pc, #24]	; (800335c <MX_USART2_UART_Init+0x4c>)
 8003342:	2200      	movs	r2, #0
 8003344:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003346:	4805      	ldr	r0, [pc, #20]	; (800335c <MX_USART2_UART_Init+0x4c>)
 8003348:	f003 fbdc 	bl	8006b04 <HAL_UART_Init>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003352:	f000 f883 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200003b4 	.word	0x200003b4
 8003360:	40004400 	.word	0x40004400

08003364 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <MX_USART6_UART_Init+0x50>)
 800336c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 800336e:	4b10      	ldr	r3, [pc, #64]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 8003370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003374:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003376:	4b0e      	ldr	r3, [pc, #56]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 8003378:	2200      	movs	r2, #0
 800337a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800337c:	4b0c      	ldr	r3, [pc, #48]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 800337e:	2200      	movs	r2, #0
 8003380:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003382:	4b0b      	ldr	r3, [pc, #44]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 8003384:	2200      	movs	r2, #0
 8003386:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003388:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 800338a:	220c      	movs	r2, #12
 800338c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 8003390:	2200      	movs	r2, #0
 8003392:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 8003396:	2200      	movs	r2, #0
 8003398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800339a:	4805      	ldr	r0, [pc, #20]	; (80033b0 <MX_USART6_UART_Init+0x4c>)
 800339c:	f003 fbb2 	bl	8006b04 <HAL_UART_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80033a6:	f000 f859 	bl	800345c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	200003fc 	.word	0x200003fc
 80033b4:	40011400 	.word	0x40011400

080033b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b088      	sub	sp, #32
 80033bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033be:	f107 030c 	add.w	r3, r7, #12
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	609a      	str	r2, [r3, #8]
 80033ca:	60da      	str	r2, [r3, #12]
 80033cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ce:	2300      	movs	r3, #0
 80033d0:	60bb      	str	r3, [r7, #8]
 80033d2:	4b20      	ldr	r3, [pc, #128]	; (8003454 <MX_GPIO_Init+0x9c>)
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	4a1f      	ldr	r2, [pc, #124]	; (8003454 <MX_GPIO_Init+0x9c>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	6313      	str	r3, [r2, #48]	; 0x30
 80033de:	4b1d      	ldr	r3, [pc, #116]	; (8003454 <MX_GPIO_Init+0x9c>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	60bb      	str	r3, [r7, #8]
 80033e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ea:	2300      	movs	r3, #0
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	4b19      	ldr	r3, [pc, #100]	; (8003454 <MX_GPIO_Init+0x9c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a18      	ldr	r2, [pc, #96]	; (8003454 <MX_GPIO_Init+0x9c>)
 80033f4:	f043 0304 	orr.w	r3, r3, #4
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b16      	ldr	r3, [pc, #88]	; (8003454 <MX_GPIO_Init+0x9c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0304 	and.w	r3, r3, #4
 8003402:	607b      	str	r3, [r7, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	603b      	str	r3, [r7, #0]
 800340a:	4b12      	ldr	r3, [pc, #72]	; (8003454 <MX_GPIO_Init+0x9c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	4a11      	ldr	r2, [pc, #68]	; (8003454 <MX_GPIO_Init+0x9c>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	6313      	str	r3, [r2, #48]	; 0x30
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <MX_GPIO_Init+0x9c>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FIRST_SEPERATION_Pin|SECOND_SEPERATION_Pin, GPIO_PIN_RESET);
 8003422:	2200      	movs	r2, #0
 8003424:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003428:	480b      	ldr	r0, [pc, #44]	; (8003458 <MX_GPIO_Init+0xa0>)
 800342a:	f001 faf3 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : FIRST_SEPERATION_Pin SECOND_SEPERATION_Pin */
  GPIO_InitStruct.Pin = FIRST_SEPERATION_Pin|SECOND_SEPERATION_Pin;
 800342e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003432:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003434:	2301      	movs	r3, #1
 8003436:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	4619      	mov	r1, r3
 8003446:	4804      	ldr	r0, [pc, #16]	; (8003458 <MX_GPIO_Init+0xa0>)
 8003448:	f001 f950 	bl	80046ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800344c:	bf00      	nop
 800344e:	3720      	adds	r7, #32
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	40020000 	.word	0x40020000

0800345c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003460:	b672      	cpsid	i
}
 8003462:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003464:	e7fe      	b.n	8003464 <Error_Handler+0x8>
	...

08003468 <MPU6050_Init>:
static double Q7 = 10; //initial estimated covariance
static double P7 = 0; //initial error covariance (it must be 0)
static double K7 = 0; //initial kalman gain

void MPU6050_Init (void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, 1000);
 800346e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003472:	9302      	str	r3, [sp, #8]
 8003474:	2301      	movs	r3, #1
 8003476:	9301      	str	r3, [sp, #4]
 8003478:	1dfb      	adds	r3, r7, #7
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2301      	movs	r3, #1
 800347e:	2275      	movs	r2, #117	; 0x75
 8003480:	21d0      	movs	r1, #208	; 0xd0
 8003482:	4823      	ldr	r0, [pc, #140]	; (8003510 <MPU6050_Init+0xa8>)
 8003484:	f001 fd1e 	bl	8004ec4 <HAL_I2C_Mem_Read>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	2b68      	cmp	r3, #104	; 0x68
 800348c:	d13b      	bne.n	8003506 <MPU6050_Init+0x9e>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1, 1000);
 8003492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	2301      	movs	r3, #1
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	1dbb      	adds	r3, r7, #6
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	2301      	movs	r3, #1
 80034a2:	226b      	movs	r2, #107	; 0x6b
 80034a4:	21d0      	movs	r1, #208	; 0xd0
 80034a6:	481a      	ldr	r0, [pc, #104]	; (8003510 <MPU6050_Init+0xa8>)
 80034a8:	f001 fc12 	bl	8004cd0 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80034ac:	2307      	movs	r3, #7
 80034ae:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 80034b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034b4:	9302      	str	r3, [sp, #8]
 80034b6:	2301      	movs	r3, #1
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	1dbb      	adds	r3, r7, #6
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	2301      	movs	r3, #1
 80034c0:	2219      	movs	r2, #25
 80034c2:	21d0      	movs	r1, #208	; 0xd0
 80034c4:	4812      	ldr	r0, [pc, #72]	; (8003510 <MPU6050_Init+0xa8>)
 80034c6:	f001 fc03 	bl	8004cd0 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> Â± 2g
		Data = 0x00;
 80034ca:	2300      	movs	r3, #0
 80034cc:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 80034ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034d2:	9302      	str	r3, [sp, #8]
 80034d4:	2301      	movs	r3, #1
 80034d6:	9301      	str	r3, [sp, #4]
 80034d8:	1dbb      	adds	r3, r7, #6
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	2301      	movs	r3, #1
 80034de:	221c      	movs	r2, #28
 80034e0:	21d0      	movs	r1, #208	; 0xd0
 80034e2:	480b      	ldr	r0, [pc, #44]	; (8003510 <MPU6050_Init+0xa8>)
 80034e4:	f001 fbf4 	bl	8004cd0 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> Â± 250 Â°/s
		Data = 0x00;
 80034e8:	2300      	movs	r3, #0
 80034ea:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 80034ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034f0:	9302      	str	r3, [sp, #8]
 80034f2:	2301      	movs	r3, #1
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	1dbb      	adds	r3, r7, #6
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	2301      	movs	r3, #1
 80034fc:	221b      	movs	r2, #27
 80034fe:	21d0      	movs	r1, #208	; 0xd0
 8003500:	4803      	ldr	r0, [pc, #12]	; (8003510 <MPU6050_Init+0xa8>)
 8003502:	f001 fbe5 	bl	8004cd0 <HAL_I2C_Mem_Write>
	}

}
 8003506:	bf00      	nop
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	20000318 	.word	0x20000318

08003514 <MPU6050_Accel_Config>:

	return Temperature1;
}

void MPU6050_Accel_Config(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af04      	add	r7, sp, #16
	uint8_t Accel_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Accel_Data, 6, 1000);
 800351a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800351e:	9302      	str	r3, [sp, #8]
 8003520:	2306      	movs	r3, #6
 8003522:	9301      	str	r3, [sp, #4]
 8003524:	463b      	mov	r3, r7
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2301      	movs	r3, #1
 800352a:	223b      	movs	r2, #59	; 0x3b
 800352c:	21d0      	movs	r1, #208	; 0xd0
 800352e:	4811      	ldr	r0, [pc, #68]	; (8003574 <MPU6050_Accel_Config+0x60>)
 8003530:	f001 fcc8 	bl	8004ec4 <HAL_I2C_Mem_Read>

	Accel_X_RAW = (int16_t)(Accel_Data[0] << 8 | Accel_Data [1]);
 8003534:	783b      	ldrb	r3, [r7, #0]
 8003536:	021b      	lsls	r3, r3, #8
 8003538:	b21a      	sxth	r2, r3
 800353a:	787b      	ldrb	r3, [r7, #1]
 800353c:	b21b      	sxth	r3, r3
 800353e:	4313      	orrs	r3, r2
 8003540:	b21a      	sxth	r2, r3
 8003542:	4b0d      	ldr	r3, [pc, #52]	; (8003578 <MPU6050_Accel_Config+0x64>)
 8003544:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Accel_Data[2] << 8 | Accel_Data [3]);
 8003546:	78bb      	ldrb	r3, [r7, #2]
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	b21a      	sxth	r2, r3
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	b21b      	sxth	r3, r3
 8003550:	4313      	orrs	r3, r2
 8003552:	b21a      	sxth	r2, r3
 8003554:	4b09      	ldr	r3, [pc, #36]	; (800357c <MPU6050_Accel_Config+0x68>)
 8003556:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Accel_Data[4] << 8 | Accel_Data [5]);
 8003558:	793b      	ldrb	r3, [r7, #4]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	b21a      	sxth	r2, r3
 800355e:	797b      	ldrb	r3, [r7, #5]
 8003560:	b21b      	sxth	r3, r3
 8003562:	4313      	orrs	r3, r2
 8003564:	b21a      	sxth	r2, r3
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MPU6050_Accel_Config+0x6c>)
 8003568:	801a      	strh	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000318 	.word	0x20000318
 8003578:	2000060c 	.word	0x2000060c
 800357c:	2000060e 	.word	0x2000060e
 8003580:	20000610 	.word	0x20000610

08003584 <MPU6050_Read_Accel_X>:

float MPU6050_Read_Accel_X(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003588:	f7ff ffc4 	bl	8003514 <MPU6050_Accel_Config>
	Ax = Accel_X_RAW/16384.0;
 800358c:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <MPU6050_Read_Accel_X+0x40>)
 800358e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc ffde 	bl	8000554 <__aeabi_i2d>
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <MPU6050_Read_Accel_X+0x44>)
 800359e:	f7fd f96d 	bl	800087c <__aeabi_ddiv>
 80035a2:	4602      	mov	r2, r0
 80035a4:	460b      	mov	r3, r1
 80035a6:	4610      	mov	r0, r2
 80035a8:	4619      	mov	r1, r3
 80035aa:	f7fd fb35 	bl	8000c18 <__aeabi_d2f>
 80035ae:	4603      	mov	r3, r0
 80035b0:	4a06      	ldr	r2, [pc, #24]	; (80035cc <MPU6050_Read_Accel_X+0x48>)
 80035b2:	6013      	str	r3, [r2, #0]
	return Ax;
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <MPU6050_Read_Accel_X+0x48>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	ee07 3a90 	vmov	s15, r3
}
 80035bc:	eeb0 0a67 	vmov.f32	s0, s15
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	2000060c 	.word	0x2000060c
 80035c8:	40d00000 	.word	0x40d00000
 80035cc:	200005fc 	.word	0x200005fc

080035d0 <MPU6050_Read_Accel_Y>:

float MPU6050_Read_Accel_Y (void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 80035d4:	f7ff ff9e 	bl	8003514 <MPU6050_Accel_Config>
	Ay = Accel_Y_RAW/16384.0;
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <MPU6050_Read_Accel_Y+0x40>)
 80035da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fc ffb8 	bl	8000554 <__aeabi_i2d>
 80035e4:	f04f 0200 	mov.w	r2, #0
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <MPU6050_Read_Accel_Y+0x44>)
 80035ea:	f7fd f947 	bl	800087c <__aeabi_ddiv>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4610      	mov	r0, r2
 80035f4:	4619      	mov	r1, r3
 80035f6:	f7fd fb0f 	bl	8000c18 <__aeabi_d2f>
 80035fa:	4603      	mov	r3, r0
 80035fc:	4a06      	ldr	r2, [pc, #24]	; (8003618 <MPU6050_Read_Accel_Y+0x48>)
 80035fe:	6013      	str	r3, [r2, #0]
	return Ay;
 8003600:	4b05      	ldr	r3, [pc, #20]	; (8003618 <MPU6050_Read_Accel_Y+0x48>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	ee07 3a90 	vmov	s15, r3
}
 8003608:	eeb0 0a67 	vmov.f32	s0, s15
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000060e 	.word	0x2000060e
 8003614:	40d00000 	.word	0x40d00000
 8003618:	20000600 	.word	0x20000600

0800361c <MPU6050_Read_Accel_Z>:

float MPU6050_Read_Accel_Z (void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
	MPU6050_Accel_Config();
 8003620:	f7ff ff78 	bl	8003514 <MPU6050_Accel_Config>
	Az = Accel_Z_RAW/16384.0;
 8003624:	4b0d      	ldr	r3, [pc, #52]	; (800365c <MPU6050_Read_Accel_Z+0x40>)
 8003626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fc ff92 	bl	8000554 <__aeabi_i2d>
 8003630:	f04f 0200 	mov.w	r2, #0
 8003634:	4b0a      	ldr	r3, [pc, #40]	; (8003660 <MPU6050_Read_Accel_Z+0x44>)
 8003636:	f7fd f921 	bl	800087c <__aeabi_ddiv>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4610      	mov	r0, r2
 8003640:	4619      	mov	r1, r3
 8003642:	f7fd fae9 	bl	8000c18 <__aeabi_d2f>
 8003646:	4603      	mov	r3, r0
 8003648:	4a06      	ldr	r2, [pc, #24]	; (8003664 <MPU6050_Read_Accel_Z+0x48>)
 800364a:	6013      	str	r3, [r2, #0]
	return Az;
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <MPU6050_Read_Accel_Z+0x48>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	ee07 3a90 	vmov	s15, r3
}
 8003654:	eeb0 0a67 	vmov.f32	s0, s15
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20000610 	.word	0x20000610
 8003660:	40d00000 	.word	0x40d00000
 8003664:	20000604 	.word	0x20000604

08003668 <MPU6050_Gyro_Config>:

void MPU6050_Gyro_Config(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af04      	add	r7, sp, #16
	uint8_t Gyro_Data[6];
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Gyro_Data, 6, 1000);
 800366e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003672:	9302      	str	r3, [sp, #8]
 8003674:	2306      	movs	r3, #6
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	463b      	mov	r3, r7
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	2301      	movs	r3, #1
 800367e:	2243      	movs	r2, #67	; 0x43
 8003680:	21d0      	movs	r1, #208	; 0xd0
 8003682:	4811      	ldr	r0, [pc, #68]	; (80036c8 <MPU6050_Gyro_Config+0x60>)
 8003684:	f001 fc1e 	bl	8004ec4 <HAL_I2C_Mem_Read>

	Gyro_X_RAW = (int16_t)(Gyro_Data[0] << 8 | Gyro_Data [1]);
 8003688:	783b      	ldrb	r3, [r7, #0]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	b21a      	sxth	r2, r3
 800368e:	787b      	ldrb	r3, [r7, #1]
 8003690:	b21b      	sxth	r3, r3
 8003692:	4313      	orrs	r3, r2
 8003694:	b21a      	sxth	r2, r3
 8003696:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <MPU6050_Gyro_Config+0x64>)
 8003698:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Gyro_Data[2] << 8 | Gyro_Data [3]);
 800369a:	78bb      	ldrb	r3, [r7, #2]
 800369c:	021b      	lsls	r3, r3, #8
 800369e:	b21a      	sxth	r2, r3
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	b21b      	sxth	r3, r3
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b21a      	sxth	r2, r3
 80036a8:	4b09      	ldr	r3, [pc, #36]	; (80036d0 <MPU6050_Gyro_Config+0x68>)
 80036aa:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Gyro_Data[4] << 8 | Gyro_Data [5]);
 80036ac:	793b      	ldrb	r3, [r7, #4]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	b21a      	sxth	r2, r3
 80036b2:	797b      	ldrb	r3, [r7, #5]
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	b21a      	sxth	r2, r3
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <MPU6050_Gyro_Config+0x6c>)
 80036bc:	801a      	strh	r2, [r3, #0]

}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000318 	.word	0x20000318
 80036cc:	20000612 	.word	0x20000612
 80036d0:	20000614 	.word	0x20000614
 80036d4:	20000616 	.word	0x20000616

080036d8 <MPU6050_Read_Gyro_X>:

float MPU6050_Read_Gyro_X (void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
	MPU6050_Gyro_Config();
 80036dc:	f7ff ffc4 	bl	8003668 <MPU6050_Gyro_Config>
	Gx = Gyro_X_RAW/131.0;
 80036e0:	4b0f      	ldr	r3, [pc, #60]	; (8003720 <MPU6050_Read_Gyro_X+0x48>)
 80036e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fc ff34 	bl	8000554 <__aeabi_i2d>
 80036ec:	a30a      	add	r3, pc, #40	; (adr r3, 8003718 <MPU6050_Read_Gyro_X+0x40>)
 80036ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f2:	f7fd f8c3 	bl	800087c <__aeabi_ddiv>
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	f7fd fa8b 	bl	8000c18 <__aeabi_d2f>
 8003702:	4603      	mov	r3, r0
 8003704:	4a07      	ldr	r2, [pc, #28]	; (8003724 <MPU6050_Read_Gyro_X+0x4c>)
 8003706:	6013      	str	r3, [r2, #0]
	return Gx;
 8003708:	4b06      	ldr	r3, [pc, #24]	; (8003724 <MPU6050_Read_Gyro_X+0x4c>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	ee07 3a90 	vmov	s15, r3
}
 8003710:	eeb0 0a67 	vmov.f32	s0, s15
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	00000000 	.word	0x00000000
 800371c:	40606000 	.word	0x40606000
 8003720:	20000612 	.word	0x20000612
 8003724:	20000608 	.word	0x20000608

08003728 <MPU6050_Roll_Angle>:
	Gz = Gyro_Z_RAW/131.0;
	return Gz;
}

float MPU6050_Roll_Angle(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
	double AccelY = MPU6050_Kalman_Accel_Y();
 800372e:	f000 f96f 	bl	8003a10 <MPU6050_Kalman_Accel_Y>
 8003732:	ed87 0b04 	vstr	d0, [r7, #16]
	double AccelZ = MPU6050_Kalman_Accel_Z();
 8003736:	f000 fa0d 	bl	8003b54 <MPU6050_Kalman_Accel_Z>
 800373a:	ed87 0b02 	vstr	d0, [r7, #8]
	float Roll = 0;
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	607b      	str	r3, [r7, #4]
	Roll = atan2(AccelY, AccelZ) * 180;
 8003744:	ed97 1b02 	vldr	d1, [r7, #8]
 8003748:	ed97 0b04 	vldr	d0, [r7, #16]
 800374c:	f007 f854 	bl	800a7f8 <atan2>
 8003750:	ec51 0b10 	vmov	r0, r1, d0
 8003754:	f04f 0200 	mov.w	r2, #0
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <MPU6050_Roll_Angle+0x58>)
 800375a:	f7fc ff65 	bl	8000628 <__aeabi_dmul>
 800375e:	4602      	mov	r2, r0
 8003760:	460b      	mov	r3, r1
 8003762:	4610      	mov	r0, r2
 8003764:	4619      	mov	r1, r3
 8003766:	f7fd fa57 	bl	8000c18 <__aeabi_d2f>
 800376a:	4603      	mov	r3, r0
 800376c:	607b      	str	r3, [r7, #4]
	return Roll;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	ee07 3a90 	vmov	s15, r3
}
 8003774:	eeb0 0a67 	vmov.f32	s0, s15
 8003778:	3718      	adds	r7, #24
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40668000 	.word	0x40668000

08003784 <MPU6050_Kalman_Roll_Angle>:

float MPU6050_Kalman_Roll_Angle (void)
{
 8003784:	b5b0      	push	{r4, r5, r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
	float RollAng_U = MPU6050_Roll_Angle();
 800378a:	f7ff ffcd 	bl	8003728 <MPU6050_Roll_Angle>
 800378e:	ed87 0a01 	vstr	s0, [r7, #4]

	static double RollAng_U_hat = 0; //initial estimated state

	K0 = P0 * H0 / (H0 * P0 * H0 + R0);
 8003792:	4b48      	ldr	r3, [pc, #288]	; (80038b4 <MPU6050_Kalman_Roll_Angle+0x130>)
 8003794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	4b46      	ldr	r3, [pc, #280]	; (80038b8 <MPU6050_Kalman_Roll_Angle+0x134>)
 800379e:	f7fc ff43 	bl	8000628 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4614      	mov	r4, r2
 80037a8:	461d      	mov	r5, r3
 80037aa:	f04f 0000 	mov.w	r0, #0
 80037ae:	4942      	ldr	r1, [pc, #264]	; (80038b8 <MPU6050_Kalman_Roll_Angle+0x134>)
 80037b0:	4b40      	ldr	r3, [pc, #256]	; (80038b4 <MPU6050_Kalman_Roll_Angle+0x130>)
 80037b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b6:	f7fc ff37 	bl	8000628 <__aeabi_dmul>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4610      	mov	r0, r2
 80037c0:	4619      	mov	r1, r3
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	4b3c      	ldr	r3, [pc, #240]	; (80038b8 <MPU6050_Kalman_Roll_Angle+0x134>)
 80037c8:	f7fc ff2e 	bl	8000628 <__aeabi_dmul>
 80037cc:	4602      	mov	r2, r0
 80037ce:	460b      	mov	r3, r1
 80037d0:	4610      	mov	r0, r2
 80037d2:	4619      	mov	r1, r3
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	4b38      	ldr	r3, [pc, #224]	; (80038bc <MPU6050_Kalman_Roll_Angle+0x138>)
 80037da:	f7fc fd6f 	bl	80002bc <__adddf3>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4620      	mov	r0, r4
 80037e4:	4629      	mov	r1, r5
 80037e6:	f7fd f849 	bl	800087c <__aeabi_ddiv>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4934      	ldr	r1, [pc, #208]	; (80038c0 <MPU6050_Kalman_Roll_Angle+0x13c>)
 80037f0:	e9c1 2300 	strd	r2, r3, [r1]
	RollAng_U_hat = RollAng_U_hat + K0 * (RollAng_U - H0 * RollAng_U_hat);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7fc febf 	bl	8000578 <__aeabi_f2d>
 80037fa:	4604      	mov	r4, r0
 80037fc:	460d      	mov	r5, r1
 80037fe:	f04f 0000 	mov.w	r0, #0
 8003802:	492d      	ldr	r1, [pc, #180]	; (80038b8 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003804:	4b2f      	ldr	r3, [pc, #188]	; (80038c4 <MPU6050_Kalman_Roll_Angle+0x140>)
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f7fc ff0d 	bl	8000628 <__aeabi_dmul>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4620      	mov	r0, r4
 8003814:	4629      	mov	r1, r5
 8003816:	f7fc fd4f 	bl	80002b8 <__aeabi_dsub>
 800381a:	4602      	mov	r2, r0
 800381c:	460b      	mov	r3, r1
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	4b27      	ldr	r3, [pc, #156]	; (80038c0 <MPU6050_Kalman_Roll_Angle+0x13c>)
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f7fc fefe 	bl	8000628 <__aeabi_dmul>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <MPU6050_Kalman_Roll_Angle+0x140>)
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f7fc fd3f 	bl	80002bc <__adddf3>
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	4920      	ldr	r1, [pc, #128]	; (80038c4 <MPU6050_Kalman_Roll_Angle+0x140>)
 8003844:	e9c1 2300 	strd	r2, r3, [r1]
	P0 = (1 - K0 * H0) * P0 + Q0;
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <MPU6050_Kalman_Roll_Angle+0x13c>)
 800384a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003854:	f7fc fee8 	bl	8000628 <__aeabi_dmul>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	f04f 0000 	mov.w	r0, #0
 8003860:	4915      	ldr	r1, [pc, #84]	; (80038b8 <MPU6050_Kalman_Roll_Angle+0x134>)
 8003862:	f7fc fd29 	bl	80002b8 <__aeabi_dsub>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4610      	mov	r0, r2
 800386c:	4619      	mov	r1, r3
 800386e:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <MPU6050_Kalman_Roll_Angle+0x130>)
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f7fc fed8 	bl	8000628 <__aeabi_dmul>
 8003878:	4602      	mov	r2, r0
 800387a:	460b      	mov	r3, r1
 800387c:	4610      	mov	r0, r2
 800387e:	4619      	mov	r1, r3
 8003880:	4b11      	ldr	r3, [pc, #68]	; (80038c8 <MPU6050_Kalman_Roll_Angle+0x144>)
 8003882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003886:	f7fc fd19 	bl	80002bc <__adddf3>
 800388a:	4602      	mov	r2, r0
 800388c:	460b      	mov	r3, r1
 800388e:	4909      	ldr	r1, [pc, #36]	; (80038b4 <MPU6050_Kalman_Roll_Angle+0x130>)
 8003890:	e9c1 2300 	strd	r2, r3, [r1]

	return RollAng_U_hat;
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <MPU6050_Kalman_Roll_Angle+0x140>)
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	4610      	mov	r0, r2
 800389c:	4619      	mov	r1, r3
 800389e:	f7fd f9bb 	bl	8000c18 <__aeabi_d2f>
 80038a2:	4603      	mov	r3, r0
 80038a4:	ee07 3a90 	vmov	s15, r3
}
 80038a8:	eeb0 0a67 	vmov.f32	s0, s15
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bdb0      	pop	{r4, r5, r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000618 	.word	0x20000618
 80038b8:	3ff00000 	.word	0x3ff00000
 80038bc:	40440000 	.word	0x40440000
 80038c0:	20000620 	.word	0x20000620
 80038c4:	20000668 	.word	0x20000668
 80038c8:	20000040 	.word	0x20000040

080038cc <MPU6050_Kalman_Accel_X>:

double MPU6050_Kalman_Accel_X (void)
{
 80038cc:	b5b0      	push	{r4, r5, r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
	double Accel_X_U = MPU6050_Read_Accel_X();
 80038d2:	f7ff fe57 	bl	8003584 <MPU6050_Read_Accel_X>
 80038d6:	ee10 3a10 	vmov	r3, s0
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fe4c 	bl	8000578 <__aeabi_f2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_X_U_hat = 0; //initial estimated state

	K1 = P1 * H1 / (H1 * P1 * H1 + R1);
 80038e8:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <MPU6050_Kalman_Accel_X+0x12c>)
 80038ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	4b42      	ldr	r3, [pc, #264]	; (80039fc <MPU6050_Kalman_Accel_X+0x130>)
 80038f4:	f7fc fe98 	bl	8000628 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4614      	mov	r4, r2
 80038fe:	461d      	mov	r5, r3
 8003900:	f04f 0000 	mov.w	r0, #0
 8003904:	493d      	ldr	r1, [pc, #244]	; (80039fc <MPU6050_Kalman_Accel_X+0x130>)
 8003906:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <MPU6050_Kalman_Accel_X+0x12c>)
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f7fc fe8c 	bl	8000628 <__aeabi_dmul>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	f04f 0200 	mov.w	r2, #0
 800391c:	4b37      	ldr	r3, [pc, #220]	; (80039fc <MPU6050_Kalman_Accel_X+0x130>)
 800391e:	f7fc fe83 	bl	8000628 <__aeabi_dmul>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	4b34      	ldr	r3, [pc, #208]	; (8003a00 <MPU6050_Kalman_Accel_X+0x134>)
 8003930:	f7fc fcc4 	bl	80002bc <__adddf3>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4620      	mov	r0, r4
 800393a:	4629      	mov	r1, r5
 800393c:	f7fc ff9e 	bl	800087c <__aeabi_ddiv>
 8003940:	4602      	mov	r2, r0
 8003942:	460b      	mov	r3, r1
 8003944:	492f      	ldr	r1, [pc, #188]	; (8003a04 <MPU6050_Kalman_Accel_X+0x138>)
 8003946:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_X_U_hat = Accel_X_U_hat + K1 * (Accel_X_U - H1 * Accel_X_U_hat);
 800394a:	f04f 0000 	mov.w	r0, #0
 800394e:	492b      	ldr	r1, [pc, #172]	; (80039fc <MPU6050_Kalman_Accel_X+0x130>)
 8003950:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <MPU6050_Kalman_Accel_X+0x13c>)
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	f7fc fe67 	bl	8000628 <__aeabi_dmul>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003962:	f7fc fca9 	bl	80002b8 <__aeabi_dsub>
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4610      	mov	r0, r2
 800396c:	4619      	mov	r1, r3
 800396e:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <MPU6050_Kalman_Accel_X+0x138>)
 8003970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003974:	f7fc fe58 	bl	8000628 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4610      	mov	r0, r2
 800397e:	4619      	mov	r1, r3
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <MPU6050_Kalman_Accel_X+0x13c>)
 8003982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003986:	f7fc fc99 	bl	80002bc <__adddf3>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	491e      	ldr	r1, [pc, #120]	; (8003a08 <MPU6050_Kalman_Accel_X+0x13c>)
 8003990:	e9c1 2300 	strd	r2, r3, [r1]
	P1 = (1 - K1 * H1) * P1 + Q1;
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <MPU6050_Kalman_Accel_X+0x138>)
 8003996:	e9d3 0100 	ldrd	r0, r1, [r3]
 800399a:	f04f 0200 	mov.w	r2, #0
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <MPU6050_Kalman_Accel_X+0x130>)
 80039a0:	f7fc fe42 	bl	8000628 <__aeabi_dmul>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	f04f 0000 	mov.w	r0, #0
 80039ac:	4913      	ldr	r1, [pc, #76]	; (80039fc <MPU6050_Kalman_Accel_X+0x130>)
 80039ae:	f7fc fc83 	bl	80002b8 <__aeabi_dsub>
 80039b2:	4602      	mov	r2, r0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	4b0f      	ldr	r3, [pc, #60]	; (80039f8 <MPU6050_Kalman_Accel_X+0x12c>)
 80039bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c0:	f7fc fe32 	bl	8000628 <__aeabi_dmul>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4610      	mov	r0, r2
 80039ca:	4619      	mov	r1, r3
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <MPU6050_Kalman_Accel_X+0x140>)
 80039ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d2:	f7fc fc73 	bl	80002bc <__adddf3>
 80039d6:	4602      	mov	r2, r0
 80039d8:	460b      	mov	r3, r1
 80039da:	4907      	ldr	r1, [pc, #28]	; (80039f8 <MPU6050_Kalman_Accel_X+0x12c>)
 80039dc:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_X_U_hat;
 80039e0:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <MPU6050_Kalman_Accel_X+0x13c>)
 80039e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e6:	ec43 2b17 	vmov	d7, r2, r3
}
 80039ea:	eeb0 0a47 	vmov.f32	s0, s14
 80039ee:	eef0 0a67 	vmov.f32	s1, s15
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}
 80039f8:	20000628 	.word	0x20000628
 80039fc:	3ff00000 	.word	0x3ff00000
 8003a00:	40440000 	.word	0x40440000
 8003a04:	20000630 	.word	0x20000630
 8003a08:	20000670 	.word	0x20000670
 8003a0c:	20000048 	.word	0x20000048

08003a10 <MPU6050_Kalman_Accel_Y>:

double MPU6050_Kalman_Accel_Y (void)
{
 8003a10:	b5b0      	push	{r4, r5, r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
	double Accel_Y_U = MPU6050_Read_Accel_Y();
 8003a16:	f7ff fddb 	bl	80035d0 <MPU6050_Read_Accel_Y>
 8003a1a:	ee10 3a10 	vmov	r3, s0
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fc fdaa 	bl	8000578 <__aeabi_f2d>
 8003a24:	4602      	mov	r2, r0
 8003a26:	460b      	mov	r3, r1
 8003a28:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Y_U_hat = 0; //initial estimated state

	K2 = P2 * H2 / (H2 * P2 * H2 + R2);
 8003a2c:	4b43      	ldr	r3, [pc, #268]	; (8003b3c <MPU6050_Kalman_Accel_Y+0x12c>)
 8003a2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	4b42      	ldr	r3, [pc, #264]	; (8003b40 <MPU6050_Kalman_Accel_Y+0x130>)
 8003a38:	f7fc fdf6 	bl	8000628 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4614      	mov	r4, r2
 8003a42:	461d      	mov	r5, r3
 8003a44:	f04f 0000 	mov.w	r0, #0
 8003a48:	493d      	ldr	r1, [pc, #244]	; (8003b40 <MPU6050_Kalman_Accel_Y+0x130>)
 8003a4a:	4b3c      	ldr	r3, [pc, #240]	; (8003b3c <MPU6050_Kalman_Accel_Y+0x12c>)
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f7fc fdea 	bl	8000628 <__aeabi_dmul>
 8003a54:	4602      	mov	r2, r0
 8003a56:	460b      	mov	r3, r1
 8003a58:	4610      	mov	r0, r2
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	4b37      	ldr	r3, [pc, #220]	; (8003b40 <MPU6050_Kalman_Accel_Y+0x130>)
 8003a62:	f7fc fde1 	bl	8000628 <__aeabi_dmul>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	f04f 0200 	mov.w	r2, #0
 8003a72:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <MPU6050_Kalman_Accel_Y+0x134>)
 8003a74:	f7fc fc22 	bl	80002bc <__adddf3>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	4629      	mov	r1, r5
 8003a80:	f7fc fefc 	bl	800087c <__aeabi_ddiv>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	492f      	ldr	r1, [pc, #188]	; (8003b48 <MPU6050_Kalman_Accel_Y+0x138>)
 8003a8a:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Y_U_hat = Accel_Y_U_hat + K2 * (Accel_Y_U - H2 * Accel_Y_U_hat);
 8003a8e:	f04f 0000 	mov.w	r0, #0
 8003a92:	492b      	ldr	r1, [pc, #172]	; (8003b40 <MPU6050_Kalman_Accel_Y+0x130>)
 8003a94:	4b2d      	ldr	r3, [pc, #180]	; (8003b4c <MPU6050_Kalman_Accel_Y+0x13c>)
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f7fc fdc5 	bl	8000628 <__aeabi_dmul>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003aa6:	f7fc fc07 	bl	80002b8 <__aeabi_dsub>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	460b      	mov	r3, r1
 8003aae:	4610      	mov	r0, r2
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4b25      	ldr	r3, [pc, #148]	; (8003b48 <MPU6050_Kalman_Accel_Y+0x138>)
 8003ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab8:	f7fc fdb6 	bl	8000628 <__aeabi_dmul>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4b21      	ldr	r3, [pc, #132]	; (8003b4c <MPU6050_Kalman_Accel_Y+0x13c>)
 8003ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aca:	f7fc fbf7 	bl	80002bc <__adddf3>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	491e      	ldr	r1, [pc, #120]	; (8003b4c <MPU6050_Kalman_Accel_Y+0x13c>)
 8003ad4:	e9c1 2300 	strd	r2, r3, [r1]
	P2 = (1 - K2 * H2) * P2 + Q2;
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <MPU6050_Kalman_Accel_Y+0x138>)
 8003ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <MPU6050_Kalman_Accel_Y+0x130>)
 8003ae4:	f7fc fda0 	bl	8000628 <__aeabi_dmul>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	460b      	mov	r3, r1
 8003aec:	f04f 0000 	mov.w	r0, #0
 8003af0:	4913      	ldr	r1, [pc, #76]	; (8003b40 <MPU6050_Kalman_Accel_Y+0x130>)
 8003af2:	f7fc fbe1 	bl	80002b8 <__aeabi_dsub>
 8003af6:	4602      	mov	r2, r0
 8003af8:	460b      	mov	r3, r1
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <MPU6050_Kalman_Accel_Y+0x12c>)
 8003b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b04:	f7fc fd90 	bl	8000628 <__aeabi_dmul>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <MPU6050_Kalman_Accel_Y+0x140>)
 8003b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b16:	f7fc fbd1 	bl	80002bc <__adddf3>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4907      	ldr	r1, [pc, #28]	; (8003b3c <MPU6050_Kalman_Accel_Y+0x12c>)
 8003b20:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Y_U_hat;
 8003b24:	4b09      	ldr	r3, [pc, #36]	; (8003b4c <MPU6050_Kalman_Accel_Y+0x13c>)
 8003b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b2a:	ec43 2b17 	vmov	d7, r2, r3
}
 8003b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8003b32:	eef0 0a67 	vmov.f32	s1, s15
 8003b36:	3708      	adds	r7, #8
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b3c:	20000638 	.word	0x20000638
 8003b40:	3ff00000 	.word	0x3ff00000
 8003b44:	40440000 	.word	0x40440000
 8003b48:	20000640 	.word	0x20000640
 8003b4c:	20000678 	.word	0x20000678
 8003b50:	20000050 	.word	0x20000050

08003b54 <MPU6050_Kalman_Accel_Z>:

double MPU6050_Kalman_Accel_Z (void)
{
 8003b54:	b5b0      	push	{r4, r5, r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
	double Accel_Z_U = MPU6050_Read_Accel_Z();
 8003b5a:	f7ff fd5f 	bl	800361c <MPU6050_Read_Accel_Z>
 8003b5e:	ee10 3a10 	vmov	r3, s0
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fd08 	bl	8000578 <__aeabi_f2d>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	e9c7 2300 	strd	r2, r3, [r7]

	static double Accel_Z_U_hat = 0; //initial estimated state

	K3 = P3 * H3 / (H3 * P3 * H3 + R3);
 8003b70:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003b72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <MPU6050_Kalman_Accel_Z+0x130>)
 8003b7c:	f7fc fd54 	bl	8000628 <__aeabi_dmul>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4614      	mov	r4, r2
 8003b86:	461d      	mov	r5, r3
 8003b88:	f04f 0000 	mov.w	r0, #0
 8003b8c:	493d      	ldr	r1, [pc, #244]	; (8003c84 <MPU6050_Kalman_Accel_Z+0x130>)
 8003b8e:	4b3c      	ldr	r3, [pc, #240]	; (8003c80 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f7fc fd48 	bl	8000628 <__aeabi_dmul>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	f04f 0200 	mov.w	r2, #0
 8003ba4:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <MPU6050_Kalman_Accel_Z+0x130>)
 8003ba6:	f7fc fd3f 	bl	8000628 <__aeabi_dmul>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	4b34      	ldr	r3, [pc, #208]	; (8003c88 <MPU6050_Kalman_Accel_Z+0x134>)
 8003bb8:	f7fc fb80 	bl	80002bc <__adddf3>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc fe5a 	bl	800087c <__aeabi_ddiv>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	492f      	ldr	r1, [pc, #188]	; (8003c8c <MPU6050_Kalman_Accel_Z+0x138>)
 8003bce:	e9c1 2300 	strd	r2, r3, [r1]
	Accel_Z_U_hat = Accel_Z_U_hat + K3 * (Accel_Z_U - H3 * Accel_Z_U_hat);
 8003bd2:	f04f 0000 	mov.w	r0, #0
 8003bd6:	492b      	ldr	r1, [pc, #172]	; (8003c84 <MPU6050_Kalman_Accel_Z+0x130>)
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	f7fc fd23 	bl	8000628 <__aeabi_dmul>
 8003be2:	4602      	mov	r2, r0
 8003be4:	460b      	mov	r3, r1
 8003be6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003bea:	f7fc fb65 	bl	80002b8 <__aeabi_dsub>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <MPU6050_Kalman_Accel_Z+0x138>)
 8003bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfc:	f7fc fd14 	bl	8000628 <__aeabi_dmul>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4610      	mov	r0, r2
 8003c06:	4619      	mov	r1, r3
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0e:	f7fc fb55 	bl	80002bc <__adddf3>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	491e      	ldr	r1, [pc, #120]	; (8003c90 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003c18:	e9c1 2300 	strd	r2, r3, [r1]
	P3 = (1 - K3 * H3) * P3 + Q3;
 8003c1c:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <MPU6050_Kalman_Accel_Z+0x138>)
 8003c1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c22:	f04f 0200 	mov.w	r2, #0
 8003c26:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <MPU6050_Kalman_Accel_Z+0x130>)
 8003c28:	f7fc fcfe 	bl	8000628 <__aeabi_dmul>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	f04f 0000 	mov.w	r0, #0
 8003c34:	4913      	ldr	r1, [pc, #76]	; (8003c84 <MPU6050_Kalman_Accel_Z+0x130>)
 8003c36:	f7fc fb3f 	bl	80002b8 <__aeabi_dsub>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4610      	mov	r0, r2
 8003c40:	4619      	mov	r1, r3
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f7fc fcee 	bl	8000628 <__aeabi_dmul>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4610      	mov	r0, r2
 8003c52:	4619      	mov	r1, r3
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <MPU6050_Kalman_Accel_Z+0x140>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	f7fc fb2f 	bl	80002bc <__adddf3>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	460b      	mov	r3, r1
 8003c62:	4907      	ldr	r1, [pc, #28]	; (8003c80 <MPU6050_Kalman_Accel_Z+0x12c>)
 8003c64:	e9c1 2300 	strd	r2, r3, [r1]

	return Accel_Z_U_hat;
 8003c68:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <MPU6050_Kalman_Accel_Z+0x13c>)
 8003c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6e:	ec43 2b17 	vmov	d7, r2, r3
}
 8003c72:	eeb0 0a47 	vmov.f32	s0, s14
 8003c76:	eef0 0a67 	vmov.f32	s1, s15
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c80:	20000648 	.word	0x20000648
 8003c84:	3ff00000 	.word	0x3ff00000
 8003c88:	40440000 	.word	0x40440000
 8003c8c:	20000650 	.word	0x20000650
 8003c90:	20000680 	.word	0x20000680
 8003c94:	20000058 	.word	0x20000058

08003c98 <MPU6050_Kalman_Gyro_X>:

double MPU6050_Kalman_Gyro_X (void)
{
 8003c98:	b5b0      	push	{r4, r5, r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
	double Gyro_X_U = MPU6050_Read_Gyro_X();
 8003c9e:	f7ff fd1b 	bl	80036d8 <MPU6050_Read_Gyro_X>
 8003ca2:	ee10 3a10 	vmov	r3, s0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fc fc66 	bl	8000578 <__aeabi_f2d>
 8003cac:	4602      	mov	r2, r0
 8003cae:	460b      	mov	r3, r1
 8003cb0:	e9c7 2300 	strd	r2, r3, [r7]

	static double Gyro_X_U_hat = 0; //initial estimated state

	K4 = P4 * H4 / (H4 * P4 * H4 + R4);
 8003cb4:	4b43      	ldr	r3, [pc, #268]	; (8003dc4 <MPU6050_Kalman_Gyro_X+0x12c>)
 8003cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <MPU6050_Kalman_Gyro_X+0x130>)
 8003cc0:	f7fc fcb2 	bl	8000628 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4614      	mov	r4, r2
 8003cca:	461d      	mov	r5, r3
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	493d      	ldr	r1, [pc, #244]	; (8003dc8 <MPU6050_Kalman_Gyro_X+0x130>)
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <MPU6050_Kalman_Gyro_X+0x12c>)
 8003cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd8:	f7fc fca6 	bl	8000628 <__aeabi_dmul>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	4b37      	ldr	r3, [pc, #220]	; (8003dc8 <MPU6050_Kalman_Gyro_X+0x130>)
 8003cea:	f7fc fc9d 	bl	8000628 <__aeabi_dmul>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f04f 0200 	mov.w	r2, #0
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <MPU6050_Kalman_Gyro_X+0x134>)
 8003cfc:	f7fc fade 	bl	80002bc <__adddf3>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4620      	mov	r0, r4
 8003d06:	4629      	mov	r1, r5
 8003d08:	f7fc fdb8 	bl	800087c <__aeabi_ddiv>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	492f      	ldr	r1, [pc, #188]	; (8003dd0 <MPU6050_Kalman_Gyro_X+0x138>)
 8003d12:	e9c1 2300 	strd	r2, r3, [r1]
	Gyro_X_U_hat = Gyro_X_U_hat + K4 * (Gyro_X_U - H4 * Gyro_X_U_hat);
 8003d16:	f04f 0000 	mov.w	r0, #0
 8003d1a:	492b      	ldr	r1, [pc, #172]	; (8003dc8 <MPU6050_Kalman_Gyro_X+0x130>)
 8003d1c:	4b2d      	ldr	r3, [pc, #180]	; (8003dd4 <MPU6050_Kalman_Gyro_X+0x13c>)
 8003d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d22:	f7fc fc81 	bl	8000628 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d2e:	f7fc fac3 	bl	80002b8 <__aeabi_dsub>
 8003d32:	4602      	mov	r2, r0
 8003d34:	460b      	mov	r3, r1
 8003d36:	4610      	mov	r0, r2
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4b25      	ldr	r3, [pc, #148]	; (8003dd0 <MPU6050_Kalman_Gyro_X+0x138>)
 8003d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d40:	f7fc fc72 	bl	8000628 <__aeabi_dmul>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4610      	mov	r0, r2
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4b21      	ldr	r3, [pc, #132]	; (8003dd4 <MPU6050_Kalman_Gyro_X+0x13c>)
 8003d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d52:	f7fc fab3 	bl	80002bc <__adddf3>
 8003d56:	4602      	mov	r2, r0
 8003d58:	460b      	mov	r3, r1
 8003d5a:	491e      	ldr	r1, [pc, #120]	; (8003dd4 <MPU6050_Kalman_Gyro_X+0x13c>)
 8003d5c:	e9c1 2300 	strd	r2, r3, [r1]
	P4 = (1 - K4 * H4) * P4 + Q4;
 8003d60:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <MPU6050_Kalman_Gyro_X+0x138>)
 8003d62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	4b17      	ldr	r3, [pc, #92]	; (8003dc8 <MPU6050_Kalman_Gyro_X+0x130>)
 8003d6c:	f7fc fc5c 	bl	8000628 <__aeabi_dmul>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	4913      	ldr	r1, [pc, #76]	; (8003dc8 <MPU6050_Kalman_Gyro_X+0x130>)
 8003d7a:	f7fc fa9d 	bl	80002b8 <__aeabi_dsub>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	4b0f      	ldr	r3, [pc, #60]	; (8003dc4 <MPU6050_Kalman_Gyro_X+0x12c>)
 8003d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8c:	f7fc fc4c 	bl	8000628 <__aeabi_dmul>
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4610      	mov	r0, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	4b0f      	ldr	r3, [pc, #60]	; (8003dd8 <MPU6050_Kalman_Gyro_X+0x140>)
 8003d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d9e:	f7fc fa8d 	bl	80002bc <__adddf3>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4907      	ldr	r1, [pc, #28]	; (8003dc4 <MPU6050_Kalman_Gyro_X+0x12c>)
 8003da8:	e9c1 2300 	strd	r2, r3, [r1]

	return Gyro_X_U_hat;
 8003dac:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <MPU6050_Kalman_Gyro_X+0x13c>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	ec43 2b17 	vmov	d7, r2, r3
}
 8003db6:	eeb0 0a47 	vmov.f32	s0, s14
 8003dba:	eef0 0a67 	vmov.f32	s1, s15
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc4:	20000658 	.word	0x20000658
 8003dc8:	3ff00000 	.word	0x3ff00000
 8003dcc:	40440000 	.word	0x40440000
 8003dd0:	20000660 	.word	0x20000660
 8003dd4:	20000688 	.word	0x20000688
 8003dd8:	20000060 	.word	0x20000060

08003ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_MspInit+0x4c>)
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4a0f      	ldr	r2, [pc, #60]	; (8003e28 <HAL_MspInit+0x4c>)
 8003dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003df0:	6453      	str	r3, [r2, #68]	; 0x44
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_MspInit+0x4c>)
 8003df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dfa:	607b      	str	r3, [r7, #4]
 8003dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	603b      	str	r3, [r7, #0]
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <HAL_MspInit+0x4c>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	4a08      	ldr	r2, [pc, #32]	; (8003e28 <HAL_MspInit+0x4c>)
 8003e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <HAL_MspInit+0x4c>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e16:	603b      	str	r3, [r7, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08a      	sub	sp, #40	; 0x28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e34:	f107 0314 	add.w	r3, r7, #20
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]
 8003e3e:	609a      	str	r2, [r3, #8]
 8003e40:	60da      	str	r2, [r3, #12]
 8003e42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <HAL_I2C_MspInit+0x84>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d12b      	bne.n	8003ea6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	4b18      	ldr	r3, [pc, #96]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	613b      	str	r3, [r7, #16]
 8003e68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e6a:	23c0      	movs	r3, #192	; 0xc0
 8003e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e6e:	2312      	movs	r3, #18
 8003e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e76:	2302      	movs	r3, #2
 8003e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e7a:	2304      	movs	r3, #4
 8003e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7e:	f107 0314 	add.w	r3, r7, #20
 8003e82:	4619      	mov	r1, r3
 8003e84:	480c      	ldr	r0, [pc, #48]	; (8003eb8 <HAL_I2C_MspInit+0x8c>)
 8003e86:	f000 fc31 	bl	80046ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e98:	6413      	str	r3, [r2, #64]	; 0x40
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_I2C_MspInit+0x88>)
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003ea6:	bf00      	nop
 8003ea8:	3728      	adds	r7, #40	; 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40005400 	.word	0x40005400
 8003eb4:	40023800 	.word	0x40023800
 8003eb8:	40020400 	.word	0x40020400

08003ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <HAL_TIM_Base_MspInit+0x3c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d10d      	bne.n	8003eea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <HAL_TIM_Base_MspInit+0x40>)
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed6:	4a09      	ldr	r2, [pc, #36]	; (8003efc <HAL_TIM_Base_MspInit+0x40>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ede:	4b07      	ldr	r3, [pc, #28]	; (8003efc <HAL_TIM_Base_MspInit+0x40>)
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	60fb      	str	r3, [r7, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003eea:	bf00      	nop
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	40010000 	.word	0x40010000
 8003efc:	40023800 	.word	0x40023800

08003f00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b08c      	sub	sp, #48	; 0x30
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f08:	f107 031c 	add.w	r3, r7, #28
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	605a      	str	r2, [r3, #4]
 8003f12:	609a      	str	r2, [r3, #8]
 8003f14:	60da      	str	r2, [r3, #12]
 8003f16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a36      	ldr	r2, [pc, #216]	; (8003ff8 <HAL_UART_MspInit+0xf8>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d12c      	bne.n	8003f7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	61bb      	str	r3, [r7, #24]
 8003f26:	4b35      	ldr	r3, [pc, #212]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	4a34      	ldr	r2, [pc, #208]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	6413      	str	r3, [r2, #64]	; 0x40
 8003f32:	4b32      	ldr	r3, [pc, #200]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	2300      	movs	r3, #0
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	4b2e      	ldr	r3, [pc, #184]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	4a2d      	ldr	r2, [pc, #180]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	617b      	str	r3, [r7, #20]
 8003f58:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f5e:	2302      	movs	r3, #2
 8003f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f66:	2303      	movs	r3, #3
 8003f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f6a:	2307      	movs	r3, #7
 8003f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f6e:	f107 031c 	add.w	r3, r7, #28
 8003f72:	4619      	mov	r1, r3
 8003f74:	4822      	ldr	r0, [pc, #136]	; (8004000 <HAL_UART_MspInit+0x100>)
 8003f76:	f000 fbb9 	bl	80046ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003f7a:	e038      	b.n	8003fee <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a20      	ldr	r2, [pc, #128]	; (8004004 <HAL_UART_MspInit+0x104>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d133      	bne.n	8003fee <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003f86:	2300      	movs	r3, #0
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	4b1c      	ldr	r3, [pc, #112]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f90:	f043 0320 	orr.w	r3, r3, #32
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	4b19      	ldr	r3, [pc, #100]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	4a14      	ldr	r2, [pc, #80]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003fac:	f043 0304 	orr.w	r3, r3, #4
 8003fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <HAL_UART_MspInit+0xfc>)
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fbe:	23c0      	movs	r3, #192	; 0xc0
 8003fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003fce:	2308      	movs	r3, #8
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fd2:	f107 031c 	add.w	r3, r7, #28
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	480b      	ldr	r0, [pc, #44]	; (8004008 <HAL_UART_MspInit+0x108>)
 8003fda:	f000 fb87 	bl	80046ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	2047      	movs	r0, #71	; 0x47
 8003fe4:	f000 fab9 	bl	800455a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003fe8:	2047      	movs	r0, #71	; 0x47
 8003fea:	f000 fad2 	bl	8004592 <HAL_NVIC_EnableIRQ>
}
 8003fee:	bf00      	nop
 8003ff0:	3730      	adds	r7, #48	; 0x30
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40004400 	.word	0x40004400
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40020000 	.word	0x40020000
 8004004:	40011400 	.word	0x40011400
 8004008:	40020800 	.word	0x40020800

0800400c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004010:	e7fe      	b.n	8004010 <NMI_Handler+0x4>

08004012 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004012:	b480      	push	{r7}
 8004014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004016:	e7fe      	b.n	8004016 <HardFault_Handler+0x4>

08004018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800401c:	e7fe      	b.n	800401c <MemManage_Handler+0x4>

0800401e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800401e:	b480      	push	{r7}
 8004020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004022:	e7fe      	b.n	8004022 <BusFault_Handler+0x4>

08004024 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004028:	e7fe      	b.n	8004028 <UsageFault_Handler+0x4>

0800402a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800402a:	b480      	push	{r7}
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800402e:	bf00      	nop
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800403c:	bf00      	nop
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004046:	b480      	push	{r7}
 8004048:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800404a:	bf00      	nop
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004058:	f000 f960 	bl	800431c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800405c:	bf00      	nop
 800405e:	bd80      	pop	{r7, pc}

08004060 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004064:	4802      	ldr	r0, [pc, #8]	; (8004070 <USART6_IRQHandler+0x10>)
 8004066:	f002 fe4d 	bl	8006d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800406a:	bf00      	nop
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	200003fc 	.word	0x200003fc

08004074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return 1;
 8004078:	2301      	movs	r3, #1
}
 800407a:	4618      	mov	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <_kill>:

int _kill(int pid, int sig)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800408e:	f004 fd0d 	bl	8008aac <__errno>
 8004092:	4603      	mov	r3, r0
 8004094:	2216      	movs	r2, #22
 8004096:	601a      	str	r2, [r3, #0]
  return -1;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <_exit>:

void _exit (int status)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80040ac:	f04f 31ff 	mov.w	r1, #4294967295
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f7ff ffe7 	bl	8004084 <_kill>
  while (1) {}    /* Make sure we hang here */
 80040b6:	e7fe      	b.n	80040b6 <_exit+0x12>

080040b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	e00a      	b.n	80040e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80040ca:	f3af 8000 	nop.w
 80040ce:	4601      	mov	r1, r0
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	60ba      	str	r2, [r7, #8]
 80040d6:	b2ca      	uxtb	r2, r1
 80040d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3301      	adds	r3, #1
 80040de:	617b      	str	r3, [r7, #20]
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	dbf0      	blt.n	80040ca <_read+0x12>
  }

  return len;
 80040e8:	687b      	ldr	r3, [r7, #4]
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3718      	adds	r7, #24
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
 8004102:	e009      	b.n	8004118 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1c5a      	adds	r2, r3, #1
 8004108:	60ba      	str	r2, [r7, #8]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	429a      	cmp	r2, r3
 800411e:	dbf1      	blt.n	8004104 <_write+0x12>
  }
  return len;
 8004120:	687b      	ldr	r3, [r7, #4]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3718      	adds	r7, #24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <_close>:

int _close(int file)
{
 800412a:	b480      	push	{r7}
 800412c:	b083      	sub	sp, #12
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004152:	605a      	str	r2, [r3, #4]
  return 0;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <_isatty>:

int _isatty(int file)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800416a:	2301      	movs	r3, #1
}
 800416c:	4618      	mov	r0, r3
 800416e:	370c      	adds	r7, #12
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
	...

08004194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800419c:	4a14      	ldr	r2, [pc, #80]	; (80041f0 <_sbrk+0x5c>)
 800419e:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <_sbrk+0x60>)
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041a8:	4b13      	ldr	r3, [pc, #76]	; (80041f8 <_sbrk+0x64>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d102      	bne.n	80041b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <_sbrk+0x64>)
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <_sbrk+0x68>)
 80041b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <_sbrk+0x64>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d207      	bcs.n	80041d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041c4:	f004 fc72 	bl	8008aac <__errno>
 80041c8:	4603      	mov	r3, r0
 80041ca:	220c      	movs	r2, #12
 80041cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e009      	b.n	80041e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041da:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <_sbrk+0x64>)
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <_sbrk+0x64>)
 80041e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20020000 	.word	0x20020000
 80041f4:	00000400 	.word	0x00000400
 80041f8:	20000690 	.word	0x20000690
 80041fc:	200007e8 	.word	0x200007e8

08004200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004204:	4b06      	ldr	r3, [pc, #24]	; (8004220 <SystemInit+0x20>)
 8004206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420a:	4a05      	ldr	r2, [pc, #20]	; (8004220 <SystemInit+0x20>)
 800420c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004214:	bf00      	nop
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	e000ed00 	.word	0xe000ed00

08004224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800425c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004228:	f7ff ffea 	bl	8004200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800422c:	480c      	ldr	r0, [pc, #48]	; (8004260 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800422e:	490d      	ldr	r1, [pc, #52]	; (8004264 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004230:	4a0d      	ldr	r2, [pc, #52]	; (8004268 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004234:	e002      	b.n	800423c <LoopCopyDataInit>

08004236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800423a:	3304      	adds	r3, #4

0800423c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800423c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800423e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004240:	d3f9      	bcc.n	8004236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004244:	4c0a      	ldr	r4, [pc, #40]	; (8004270 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004248:	e001      	b.n	800424e <LoopFillZerobss>

0800424a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800424a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800424c:	3204      	adds	r2, #4

0800424e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800424e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004250:	d3fb      	bcc.n	800424a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8004252:	f004 fc31 	bl	8008ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004256:	f7fe fe2f 	bl	8002eb8 <main>
  bx  lr    
 800425a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800425c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004264:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8004268:	0800c068 	.word	0x0800c068
  ldr r2, =_sbss
 800426c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8004270:	200007e4 	.word	0x200007e4

08004274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004274:	e7fe      	b.n	8004274 <ADC_IRQHandler>
	...

08004278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800427c:	4b0e      	ldr	r3, [pc, #56]	; (80042b8 <HAL_Init+0x40>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a0d      	ldr	r2, [pc, #52]	; (80042b8 <HAL_Init+0x40>)
 8004282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_Init+0x40>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a0a      	ldr	r2, [pc, #40]	; (80042b8 <HAL_Init+0x40>)
 800428e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_Init+0x40>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a07      	ldr	r2, [pc, #28]	; (80042b8 <HAL_Init+0x40>)
 800429a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800429e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80042a0:	2003      	movs	r0, #3
 80042a2:	f000 f94f 	bl	8004544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80042a6:	200f      	movs	r0, #15
 80042a8:	f000 f808 	bl	80042bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80042ac:	f7ff fd96 	bl	8003ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023c00 	.word	0x40023c00

080042bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042c4:	4b12      	ldr	r3, [pc, #72]	; (8004310 <HAL_InitTick+0x54>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	4b12      	ldr	r3, [pc, #72]	; (8004314 <HAL_InitTick+0x58>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	4619      	mov	r1, r3
 80042ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f967 	bl	80045ae <HAL_SYSTICK_Config>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e00e      	b.n	8004308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b0f      	cmp	r3, #15
 80042ee:	d80a      	bhi.n	8004306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042f0:	2200      	movs	r2, #0
 80042f2:	6879      	ldr	r1, [r7, #4]
 80042f4:	f04f 30ff 	mov.w	r0, #4294967295
 80042f8:	f000 f92f 	bl	800455a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042fc:	4a06      	ldr	r2, [pc, #24]	; (8004318 <HAL_InitTick+0x5c>)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	e000      	b.n	8004308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000068 	.word	0x20000068
 8004314:	20000070 	.word	0x20000070
 8004318:	2000006c 	.word	0x2000006c

0800431c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <HAL_IncTick+0x20>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	461a      	mov	r2, r3
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <HAL_IncTick+0x24>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4413      	add	r3, r2
 800432c:	4a04      	ldr	r2, [pc, #16]	; (8004340 <HAL_IncTick+0x24>)
 800432e:	6013      	str	r3, [r2, #0]
}
 8004330:	bf00      	nop
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	20000070 	.word	0x20000070
 8004340:	20000694 	.word	0x20000694

08004344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
  return uwTick;
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <HAL_GetTick+0x14>)
 800434a:	681b      	ldr	r3, [r3, #0]
}
 800434c:	4618      	mov	r0, r3
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000694 	.word	0x20000694

0800435c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7ff ffee 	bl	8004344 <HAL_GetTick>
 8004368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d005      	beq.n	8004382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <HAL_Delay+0x44>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4413      	add	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004382:	bf00      	nop
 8004384:	f7ff ffde 	bl	8004344 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d8f7      	bhi.n	8004384 <HAL_Delay+0x28>
  {
  }
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000070 	.word	0x20000070

080043a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043b4:	4b0c      	ldr	r3, [pc, #48]	; (80043e8 <__NVIC_SetPriorityGrouping+0x44>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80043c0:	4013      	ands	r3, r2
 80043c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80043d6:	4a04      	ldr	r2, [pc, #16]	; (80043e8 <__NVIC_SetPriorityGrouping+0x44>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	60d3      	str	r3, [r2, #12]
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	e000ed00 	.word	0xe000ed00

080043ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043f0:	4b04      	ldr	r3, [pc, #16]	; (8004404 <__NVIC_GetPriorityGrouping+0x18>)
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	0a1b      	lsrs	r3, r3, #8
 80043f6:	f003 0307 	and.w	r3, r3, #7
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	e000ed00 	.word	0xe000ed00

08004408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004416:	2b00      	cmp	r3, #0
 8004418:	db0b      	blt.n	8004432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800441a:	79fb      	ldrb	r3, [r7, #7]
 800441c:	f003 021f 	and.w	r2, r3, #31
 8004420:	4907      	ldr	r1, [pc, #28]	; (8004440 <__NVIC_EnableIRQ+0x38>)
 8004422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2001      	movs	r0, #1
 800442a:	fa00 f202 	lsl.w	r2, r0, r2
 800442e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	e000e100 	.word	0xe000e100

08004444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	6039      	str	r1, [r7, #0]
 800444e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004454:	2b00      	cmp	r3, #0
 8004456:	db0a      	blt.n	800446e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	b2da      	uxtb	r2, r3
 800445c:	490c      	ldr	r1, [pc, #48]	; (8004490 <__NVIC_SetPriority+0x4c>)
 800445e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004462:	0112      	lsls	r2, r2, #4
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	440b      	add	r3, r1
 8004468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800446c:	e00a      	b.n	8004484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	4908      	ldr	r1, [pc, #32]	; (8004494 <__NVIC_SetPriority+0x50>)
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	3b04      	subs	r3, #4
 800447c:	0112      	lsls	r2, r2, #4
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	440b      	add	r3, r1
 8004482:	761a      	strb	r2, [r3, #24]
}
 8004484:	bf00      	nop
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	e000e100 	.word	0xe000e100
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004498:	b480      	push	{r7}
 800449a:	b089      	sub	sp, #36	; 0x24
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	f1c3 0307 	rsb	r3, r3, #7
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	bf28      	it	cs
 80044b6:	2304      	movcs	r3, #4
 80044b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	3304      	adds	r3, #4
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d902      	bls.n	80044c8 <NVIC_EncodePriority+0x30>
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3b03      	subs	r3, #3
 80044c6:	e000      	b.n	80044ca <NVIC_EncodePriority+0x32>
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044cc:	f04f 32ff 	mov.w	r2, #4294967295
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	43da      	mvns	r2, r3
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	401a      	ands	r2, r3
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044e0:	f04f 31ff 	mov.w	r1, #4294967295
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	43d9      	mvns	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044f0:	4313      	orrs	r3, r2
         );
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3724      	adds	r7, #36	; 0x24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3b01      	subs	r3, #1
 800450c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004510:	d301      	bcc.n	8004516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004512:	2301      	movs	r3, #1
 8004514:	e00f      	b.n	8004536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <SysTick_Config+0x40>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3b01      	subs	r3, #1
 800451c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800451e:	210f      	movs	r1, #15
 8004520:	f04f 30ff 	mov.w	r0, #4294967295
 8004524:	f7ff ff8e 	bl	8004444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004528:	4b05      	ldr	r3, [pc, #20]	; (8004540 <SysTick_Config+0x40>)
 800452a:	2200      	movs	r2, #0
 800452c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800452e:	4b04      	ldr	r3, [pc, #16]	; (8004540 <SysTick_Config+0x40>)
 8004530:	2207      	movs	r2, #7
 8004532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	e000e010 	.word	0xe000e010

08004544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f7ff ff29 	bl	80043a4 <__NVIC_SetPriorityGrouping>
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	4603      	mov	r3, r0
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800456c:	f7ff ff3e 	bl	80043ec <__NVIC_GetPriorityGrouping>
 8004570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	6978      	ldr	r0, [r7, #20]
 8004578:	f7ff ff8e 	bl	8004498 <NVIC_EncodePriority>
 800457c:	4602      	mov	r2, r0
 800457e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004582:	4611      	mov	r1, r2
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff ff5d 	bl	8004444 <__NVIC_SetPriority>
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b082      	sub	sp, #8
 8004596:	af00      	add	r7, sp, #0
 8004598:	4603      	mov	r3, r0
 800459a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7ff ff31 	bl	8004408 <__NVIC_EnableIRQ>
}
 80045a6:	bf00      	nop
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b082      	sub	sp, #8
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff ffa2 	bl	8004500 <SysTick_Config>
 80045bc:	4603      	mov	r3, r0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3708      	adds	r7, #8
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}

080045c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b084      	sub	sp, #16
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045d4:	f7ff feb6 	bl	8004344 <HAL_GetTick>
 80045d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d008      	beq.n	80045f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e052      	b.n	800469e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0216 	bic.w	r2, r2, #22
 8004606:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695a      	ldr	r2, [r3, #20]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004616:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d103      	bne.n	8004628 <HAL_DMA_Abort+0x62>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0208 	bic.w	r2, r2, #8
 8004636:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004648:	e013      	b.n	8004672 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800464a:	f7ff fe7b 	bl	8004344 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b05      	cmp	r3, #5
 8004656:	d90c      	bls.n	8004672 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2203      	movs	r2, #3
 8004662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e015      	b.n	800469e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e4      	bne.n	800464a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004684:	223f      	movs	r2, #63	; 0x3f
 8004686:	409a      	lsls	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d004      	beq.n	80046c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2280      	movs	r2, #128	; 0x80
 80046be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e00c      	b.n	80046de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2205      	movs	r2, #5
 80046c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0201 	bic.w	r2, r2, #1
 80046da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	; 0x24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004702:	2300      	movs	r3, #0
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e165      	b.n	80049d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004708:	2201      	movs	r2, #1
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	429a      	cmp	r2, r3
 8004722:	f040 8154 	bne.w	80049ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f003 0303 	and.w	r3, r3, #3
 800472e:	2b01      	cmp	r3, #1
 8004730:	d005      	beq.n	800473e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800473a:	2b02      	cmp	r3, #2
 800473c:	d130      	bne.n	80047a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	2203      	movs	r2, #3
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	43db      	mvns	r3, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4013      	ands	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	4313      	orrs	r3, r2
 8004766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004774:	2201      	movs	r2, #1
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 0201 	and.w	r2, r3, #1
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4313      	orrs	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 0303 	and.w	r3, r3, #3
 80047a8:	2b03      	cmp	r3, #3
 80047aa:	d017      	beq.n	80047dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	2203      	movs	r2, #3
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	43db      	mvns	r3, r3
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	4013      	ands	r3, r2
 80047c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	689a      	ldr	r2, [r3, #8]
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f003 0303 	and.w	r3, r3, #3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d123      	bne.n	8004830 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	08da      	lsrs	r2, r3, #3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3208      	adds	r2, #8
 80047f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	220f      	movs	r2, #15
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	69ba      	ldr	r2, [r7, #24]
 8004808:	4013      	ands	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691a      	ldr	r2, [r3, #16]
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4313      	orrs	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	08da      	lsrs	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3208      	adds	r2, #8
 800482a:	69b9      	ldr	r1, [r7, #24]
 800482c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	2203      	movs	r2, #3
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f003 0203 	and.w	r2, r3, #3
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	4313      	orrs	r3, r2
 800485c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 80ae 	beq.w	80049ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
 8004876:	4b5d      	ldr	r3, [pc, #372]	; (80049ec <HAL_GPIO_Init+0x300>)
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	4a5c      	ldr	r2, [pc, #368]	; (80049ec <HAL_GPIO_Init+0x300>)
 800487c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004880:	6453      	str	r3, [r2, #68]	; 0x44
 8004882:	4b5a      	ldr	r3, [pc, #360]	; (80049ec <HAL_GPIO_Init+0x300>)
 8004884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800488e:	4a58      	ldr	r2, [pc, #352]	; (80049f0 <HAL_GPIO_Init+0x304>)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	089b      	lsrs	r3, r3, #2
 8004894:	3302      	adds	r3, #2
 8004896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	f003 0303 	and.w	r3, r3, #3
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	220f      	movs	r2, #15
 80048a6:	fa02 f303 	lsl.w	r3, r2, r3
 80048aa:	43db      	mvns	r3, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4013      	ands	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a4f      	ldr	r2, [pc, #316]	; (80049f4 <HAL_GPIO_Init+0x308>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d025      	beq.n	8004906 <HAL_GPIO_Init+0x21a>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a4e      	ldr	r2, [pc, #312]	; (80049f8 <HAL_GPIO_Init+0x30c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d01f      	beq.n	8004902 <HAL_GPIO_Init+0x216>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4d      	ldr	r2, [pc, #308]	; (80049fc <HAL_GPIO_Init+0x310>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d019      	beq.n	80048fe <HAL_GPIO_Init+0x212>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a4c      	ldr	r2, [pc, #304]	; (8004a00 <HAL_GPIO_Init+0x314>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d013      	beq.n	80048fa <HAL_GPIO_Init+0x20e>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <HAL_GPIO_Init+0x318>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d00d      	beq.n	80048f6 <HAL_GPIO_Init+0x20a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4a      	ldr	r2, [pc, #296]	; (8004a08 <HAL_GPIO_Init+0x31c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d007      	beq.n	80048f2 <HAL_GPIO_Init+0x206>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a49      	ldr	r2, [pc, #292]	; (8004a0c <HAL_GPIO_Init+0x320>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <HAL_GPIO_Init+0x202>
 80048ea:	2306      	movs	r3, #6
 80048ec:	e00c      	b.n	8004908 <HAL_GPIO_Init+0x21c>
 80048ee:	2307      	movs	r3, #7
 80048f0:	e00a      	b.n	8004908 <HAL_GPIO_Init+0x21c>
 80048f2:	2305      	movs	r3, #5
 80048f4:	e008      	b.n	8004908 <HAL_GPIO_Init+0x21c>
 80048f6:	2304      	movs	r3, #4
 80048f8:	e006      	b.n	8004908 <HAL_GPIO_Init+0x21c>
 80048fa:	2303      	movs	r3, #3
 80048fc:	e004      	b.n	8004908 <HAL_GPIO_Init+0x21c>
 80048fe:	2302      	movs	r3, #2
 8004900:	e002      	b.n	8004908 <HAL_GPIO_Init+0x21c>
 8004902:	2301      	movs	r3, #1
 8004904:	e000      	b.n	8004908 <HAL_GPIO_Init+0x21c>
 8004906:	2300      	movs	r3, #0
 8004908:	69fa      	ldr	r2, [r7, #28]
 800490a:	f002 0203 	and.w	r2, r2, #3
 800490e:	0092      	lsls	r2, r2, #2
 8004910:	4093      	lsls	r3, r2
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004918:	4935      	ldr	r1, [pc, #212]	; (80049f0 <HAL_GPIO_Init+0x304>)
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	3302      	adds	r3, #2
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004926:	4b3a      	ldr	r3, [pc, #232]	; (8004a10 <HAL_GPIO_Init+0x324>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d003      	beq.n	800494a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004942:	69ba      	ldr	r2, [r7, #24]
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800494a:	4a31      	ldr	r2, [pc, #196]	; (8004a10 <HAL_GPIO_Init+0x324>)
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004950:	4b2f      	ldr	r3, [pc, #188]	; (8004a10 <HAL_GPIO_Init+0x324>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	43db      	mvns	r3, r3
 800495a:	69ba      	ldr	r2, [r7, #24]
 800495c:	4013      	ands	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800496c:	69ba      	ldr	r2, [r7, #24]
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4313      	orrs	r3, r2
 8004972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004974:	4a26      	ldr	r2, [pc, #152]	; (8004a10 <HAL_GPIO_Init+0x324>)
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800497a:	4b25      	ldr	r3, [pc, #148]	; (8004a10 <HAL_GPIO_Init+0x324>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	43db      	mvns	r3, r3
 8004984:	69ba      	ldr	r2, [r7, #24]
 8004986:	4013      	ands	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004996:	69ba      	ldr	r2, [r7, #24]
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	4313      	orrs	r3, r2
 800499c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800499e:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_GPIO_Init+0x324>)
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049a4:	4b1a      	ldr	r3, [pc, #104]	; (8004a10 <HAL_GPIO_Init+0x324>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	43db      	mvns	r3, r3
 80049ae:	69ba      	ldr	r2, [r7, #24]
 80049b0:	4013      	ands	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d003      	beq.n	80049c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049c8:	4a11      	ldr	r2, [pc, #68]	; (8004a10 <HAL_GPIO_Init+0x324>)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	3301      	adds	r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	f67f ae96 	bls.w	8004708 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3724      	adds	r7, #36	; 0x24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40013800 	.word	0x40013800
 80049f4:	40020000 	.word	0x40020000
 80049f8:	40020400 	.word	0x40020400
 80049fc:	40020800 	.word	0x40020800
 8004a00:	40020c00 	.word	0x40020c00
 8004a04:	40021000 	.word	0x40021000
 8004a08:	40021400 	.word	0x40021400
 8004a0c:	40021800 	.word	0x40021800
 8004a10:	40013c00 	.word	0x40013c00

08004a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
 8004a20:	4613      	mov	r3, r2
 8004a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a24:	787b      	ldrb	r3, [r7, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a30:	e003      	b.n	8004a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
	...

08004a48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d101      	bne.n	8004a5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e12b      	b.n	8004cb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d106      	bne.n	8004a74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff f9dc 	bl	8003e2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2224      	movs	r2, #36	; 0x24
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0201 	bic.w	r2, r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aaa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aac:	f001 f8e2 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8004ab0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	4a81      	ldr	r2, [pc, #516]	; (8004cbc <HAL_I2C_Init+0x274>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d807      	bhi.n	8004acc <HAL_I2C_Init+0x84>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4a80      	ldr	r2, [pc, #512]	; (8004cc0 <HAL_I2C_Init+0x278>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	bf94      	ite	ls
 8004ac4:	2301      	movls	r3, #1
 8004ac6:	2300      	movhi	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e006      	b.n	8004ada <HAL_I2C_Init+0x92>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	4a7d      	ldr	r2, [pc, #500]	; (8004cc4 <HAL_I2C_Init+0x27c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	bf94      	ite	ls
 8004ad4:	2301      	movls	r3, #1
 8004ad6:	2300      	movhi	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e0e7      	b.n	8004cb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	4a78      	ldr	r2, [pc, #480]	; (8004cc8 <HAL_I2C_Init+0x280>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	0c9b      	lsrs	r3, r3, #18
 8004aec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	4a6a      	ldr	r2, [pc, #424]	; (8004cbc <HAL_I2C_Init+0x274>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d802      	bhi.n	8004b1c <HAL_I2C_Init+0xd4>
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3301      	adds	r3, #1
 8004b1a:	e009      	b.n	8004b30 <HAL_I2C_Init+0xe8>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	4a69      	ldr	r2, [pc, #420]	; (8004ccc <HAL_I2C_Init+0x284>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	3301      	adds	r3, #1
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6812      	ldr	r2, [r2, #0]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	495c      	ldr	r1, [pc, #368]	; (8004cbc <HAL_I2C_Init+0x274>)
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	d819      	bhi.n	8004b84 <HAL_I2C_Init+0x13c>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1e59      	subs	r1, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b5e:	1c59      	adds	r1, r3, #1
 8004b60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b64:	400b      	ands	r3, r1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_I2C_Init+0x138>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1e59      	subs	r1, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b7e:	e051      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004b80:	2304      	movs	r3, #4
 8004b82:	e04f      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d111      	bne.n	8004bb0 <HAL_I2C_Init+0x168>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	1e58      	subs	r0, r3, #1
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6859      	ldr	r1, [r3, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	440b      	add	r3, r1
 8004b9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e012      	b.n	8004bd6 <HAL_I2C_Init+0x18e>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	1e58      	subs	r0, r3, #1
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6859      	ldr	r1, [r3, #4]
 8004bb8:	460b      	mov	r3, r1
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	0099      	lsls	r1, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_I2C_Init+0x196>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e022      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10e      	bne.n	8004c04 <HAL_I2C_Init+0x1bc>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1e58      	subs	r0, r3, #1
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6859      	ldr	r1, [r3, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	005b      	lsls	r3, r3, #1
 8004bf2:	440b      	add	r3, r1
 8004bf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c02:	e00f      	b.n	8004c24 <HAL_I2C_Init+0x1dc>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	1e58      	subs	r0, r3, #1
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6859      	ldr	r1, [r3, #4]
 8004c0c:	460b      	mov	r3, r1
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	440b      	add	r3, r1
 8004c12:	0099      	lsls	r1, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	6809      	ldr	r1, [r1, #0]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	69da      	ldr	r2, [r3, #28]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	6911      	ldr	r1, [r2, #16]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68d2      	ldr	r2, [r2, #12]
 8004c5e:	4311      	orrs	r1, r2
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	6812      	ldr	r2, [r2, #0]
 8004c64:	430b      	orrs	r3, r1
 8004c66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	430a      	orrs	r2, r1
 8004c82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0201 	orr.w	r2, r2, #1
 8004c92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	000186a0 	.word	0x000186a0
 8004cc0:	001e847f 	.word	0x001e847f
 8004cc4:	003d08ff 	.word	0x003d08ff
 8004cc8:	431bde83 	.word	0x431bde83
 8004ccc:	10624dd3 	.word	0x10624dd3

08004cd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af02      	add	r7, sp, #8
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	4608      	mov	r0, r1
 8004cda:	4611      	mov	r1, r2
 8004cdc:	461a      	mov	r2, r3
 8004cde:	4603      	mov	r3, r0
 8004ce0:	817b      	strh	r3, [r7, #10]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	813b      	strh	r3, [r7, #8]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cea:	f7ff fb2b 	bl	8004344 <HAL_GetTick>
 8004cee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	f040 80d9 	bne.w	8004eb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	9300      	str	r3, [sp, #0]
 8004d02:	2319      	movs	r3, #25
 8004d04:	2201      	movs	r2, #1
 8004d06:	496d      	ldr	r1, [pc, #436]	; (8004ebc <HAL_I2C_Mem_Write+0x1ec>)
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f000 fc8b 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d001      	beq.n	8004d18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
 8004d16:	e0cc      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_I2C_Mem_Write+0x56>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0c5      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d007      	beq.n	8004d4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2221      	movs	r2, #33	; 0x21
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2240      	movs	r2, #64	; 0x40
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4a4d      	ldr	r2, [pc, #308]	; (8004ec0 <HAL_I2C_Mem_Write+0x1f0>)
 8004d8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d8e:	88f8      	ldrh	r0, [r7, #6]
 8004d90:	893a      	ldrh	r2, [r7, #8]
 8004d92:	8979      	ldrh	r1, [r7, #10]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	9301      	str	r3, [sp, #4]
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	9300      	str	r3, [sp, #0]
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 fac2 	bl	8005328 <I2C_RequestMemoryWrite>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d052      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e081      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db2:	68f8      	ldr	r0, [r7, #12]
 8004db4:	f000 fd50 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00d      	beq.n	8004dda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b04      	cmp	r3, #4
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e06b      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	781a      	ldrb	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	1c5a      	adds	r2, r3, #1
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	3b01      	subs	r3, #1
 8004e04:	b29a      	uxth	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b04      	cmp	r3, #4
 8004e16:	d11b      	bne.n	8004e50 <HAL_I2C_Mem_Write+0x180>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d017      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	781a      	ldrb	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	b29a      	uxth	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1aa      	bne.n	8004dae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e58:	697a      	ldr	r2, [r7, #20]
 8004e5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 fd43 	bl	80058e8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	2b04      	cmp	r3, #4
 8004e6e:	d107      	bne.n	8004e80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e016      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eac:	2300      	movs	r3, #0
 8004eae:	e000      	b.n	8004eb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004eb0:	2302      	movs	r3, #2
  }
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	00100002 	.word	0x00100002
 8004ec0:	ffff0000 	.word	0xffff0000

08004ec4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b08c      	sub	sp, #48	; 0x30
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	4608      	mov	r0, r1
 8004ece:	4611      	mov	r1, r2
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	817b      	strh	r3, [r7, #10]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	813b      	strh	r3, [r7, #8]
 8004eda:	4613      	mov	r3, r2
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ede:	f7ff fa31 	bl	8004344 <HAL_GetTick>
 8004ee2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b20      	cmp	r3, #32
 8004eee:	f040 8214 	bne.w	800531a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	2319      	movs	r3, #25
 8004ef8:	2201      	movs	r2, #1
 8004efa:	497b      	ldr	r1, [pc, #492]	; (80050e8 <HAL_I2C_Mem_Read+0x224>)
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 fb91 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	e207      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d101      	bne.n	8004f1a <HAL_I2C_Mem_Read+0x56>
 8004f16:	2302      	movs	r3, #2
 8004f18:	e200      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d007      	beq.n	8004f40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0201 	orr.w	r2, r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2222      	movs	r2, #34	; 0x22
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2240      	movs	r2, #64	; 0x40
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	; (80050ec <HAL_I2C_Mem_Read+0x228>)
 8004f80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f82:	88f8      	ldrh	r0, [r7, #6]
 8004f84:	893a      	ldrh	r2, [r7, #8]
 8004f86:	8979      	ldrh	r1, [r7, #10]
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	9301      	str	r3, [sp, #4]
 8004f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4603      	mov	r3, r0
 8004f92:	68f8      	ldr	r0, [r7, #12]
 8004f94:	f000 fa5e 	bl	8005454 <I2C_RequestMemoryRead>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e1bc      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d113      	bne.n	8004fd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004faa:	2300      	movs	r3, #0
 8004fac:	623b      	str	r3, [r7, #32]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	695b      	ldr	r3, [r3, #20]
 8004fb4:	623b      	str	r3, [r7, #32]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	623b      	str	r3, [r7, #32]
 8004fbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fce:	601a      	str	r2, [r3, #0]
 8004fd0:	e190      	b.n	80052f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d11b      	bne.n	8005012 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	61fb      	str	r3, [r7, #28]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e170      	b.n	80052f4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005016:	2b02      	cmp	r3, #2
 8005018:	d11b      	bne.n	8005052 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005028:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	61bb      	str	r3, [r7, #24]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	e150      	b.n	80052f4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005052:	2300      	movs	r3, #0
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005068:	e144      	b.n	80052f4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800506e:	2b03      	cmp	r3, #3
 8005070:	f200 80f1 	bhi.w	8005256 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005078:	2b01      	cmp	r3, #1
 800507a:	d123      	bne.n	80050c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800507c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 fc79 	bl	8005978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e145      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050c2:	e117      	b.n	80052f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d14e      	bne.n	800516a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d2:	2200      	movs	r2, #0
 80050d4:	4906      	ldr	r1, [pc, #24]	; (80050f0 <HAL_I2C_Mem_Read+0x22c>)
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f000 faa4 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e11a      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
 80050e6:	bf00      	nop
 80050e8:	00100002 	.word	0x00100002
 80050ec:	ffff0000 	.word	0xffff0000
 80050f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005102:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691a      	ldr	r2, [r3, #16]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005120:	3b01      	subs	r3, #1
 8005122:	b29a      	uxth	r2, r3
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800512c:	b29b      	uxth	r3, r3
 800512e:	3b01      	subs	r3, #1
 8005130:	b29a      	uxth	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	b2d2      	uxtb	r2, r2
 8005142:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005168:	e0c4      	b.n	80052f4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	2200      	movs	r2, #0
 8005172:	496c      	ldr	r1, [pc, #432]	; (8005324 <HAL_I2C_Mem_Read+0x460>)
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f000 fa55 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d001      	beq.n	8005184 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0cb      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691a      	ldr	r2, [r3, #16]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	1c5a      	adds	r2, r3, #1
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	2200      	movs	r2, #0
 80051ce:	4955      	ldr	r1, [pc, #340]	; (8005324 <HAL_I2C_Mem_Read+0x460>)
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 fa27 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e09d      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523e:	3b01      	subs	r3, #1
 8005240:	b29a      	uxth	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005254:	e04e      	b.n	80052f4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fb8c 	bl	8005978 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e058      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	b2d2      	uxtb	r2, r2
 8005276:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	3b01      	subs	r3, #1
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005292:	b29b      	uxth	r3, r3
 8005294:	3b01      	subs	r3, #1
 8005296:	b29a      	uxth	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d124      	bne.n	80052f4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d107      	bne.n	80052c2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052c0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052de:	3b01      	subs	r3, #1
 80052e0:	b29a      	uxth	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	3b01      	subs	r3, #1
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f47f aeb6 	bne.w	800506a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	; 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	00010004 	.word	0x00010004

08005328 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af02      	add	r7, sp, #8
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	4608      	mov	r0, r1
 8005332:	4611      	mov	r1, r2
 8005334:	461a      	mov	r2, r3
 8005336:	4603      	mov	r3, r0
 8005338:	817b      	strh	r3, [r7, #10]
 800533a:	460b      	mov	r3, r1
 800533c:	813b      	strh	r3, [r7, #8]
 800533e:	4613      	mov	r3, r2
 8005340:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005350:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2200      	movs	r2, #0
 800535a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f960 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00d      	beq.n	8005386 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005374:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005378:	d103      	bne.n	8005382 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e05f      	b.n	8005446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005386:	897b      	ldrh	r3, [r7, #10]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005394:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005398:	6a3a      	ldr	r2, [r7, #32]
 800539a:	492d      	ldr	r1, [pc, #180]	; (8005450 <I2C_RequestMemoryWrite+0x128>)
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f9bb 	bl	8005718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d001      	beq.n	80053ac <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e04c      	b.n	8005446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ac:	2300      	movs	r3, #0
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	617b      	str	r3, [r7, #20]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053c4:	6a39      	ldr	r1, [r7, #32]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 fa46 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00d      	beq.n	80053ee <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d107      	bne.n	80053ea <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e02b      	b.n	8005446 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d105      	bne.n	8005400 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053f4:	893b      	ldrh	r3, [r7, #8]
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	611a      	str	r2, [r3, #16]
 80053fe:	e021      	b.n	8005444 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005400:	893b      	ldrh	r3, [r7, #8]
 8005402:	0a1b      	lsrs	r3, r3, #8
 8005404:	b29b      	uxth	r3, r3
 8005406:	b2da      	uxtb	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	6a39      	ldr	r1, [r7, #32]
 8005412:	68f8      	ldr	r0, [r7, #12]
 8005414:	f000 fa20 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d00d      	beq.n	800543a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	2b04      	cmp	r3, #4
 8005424:	d107      	bne.n	8005436 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681a      	ldr	r2, [r3, #0]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005434:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e005      	b.n	8005446 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800543a:	893b      	ldrh	r3, [r7, #8]
 800543c:	b2da      	uxtb	r2, r3
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	00010002 	.word	0x00010002

08005454 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af02      	add	r7, sp, #8
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	4608      	mov	r0, r1
 800545e:	4611      	mov	r1, r2
 8005460:	461a      	mov	r2, r3
 8005462:	4603      	mov	r3, r0
 8005464:	817b      	strh	r3, [r7, #10]
 8005466:	460b      	mov	r3, r1
 8005468:	813b      	strh	r3, [r7, #8]
 800546a:	4613      	mov	r3, r2
 800546c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800547c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800548c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	6a3b      	ldr	r3, [r7, #32]
 8005494:	2200      	movs	r2, #0
 8005496:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f000 f8c2 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00d      	beq.n	80054c2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b4:	d103      	bne.n	80054be <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e0aa      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054c2:	897b      	ldrh	r3, [r7, #10]
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d4:	6a3a      	ldr	r2, [r7, #32]
 80054d6:	4952      	ldr	r1, [pc, #328]	; (8005620 <I2C_RequestMemoryRead+0x1cc>)
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f000 f91d 	bl	8005718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e097      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	617b      	str	r3, [r7, #20]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	617b      	str	r3, [r7, #20]
 80054fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005500:	6a39      	ldr	r1, [r7, #32]
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 f9a8 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8005508:	4603      	mov	r3, r0
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00d      	beq.n	800552a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	2b04      	cmp	r3, #4
 8005514:	d107      	bne.n	8005526 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005524:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e076      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d105      	bne.n	800553c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005530:	893b      	ldrh	r3, [r7, #8]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	611a      	str	r2, [r3, #16]
 800553a:	e021      	b.n	8005580 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800553c:	893b      	ldrh	r3, [r7, #8]
 800553e:	0a1b      	lsrs	r3, r3, #8
 8005540:	b29b      	uxth	r3, r3
 8005542:	b2da      	uxtb	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800554a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554c:	6a39      	ldr	r1, [r7, #32]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f982 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00d      	beq.n	8005576 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	2b04      	cmp	r3, #4
 8005560:	d107      	bne.n	8005572 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005570:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e050      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005576:	893b      	ldrh	r3, [r7, #8]
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005582:	6a39      	ldr	r1, [r7, #32]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f967 	bl	8005858 <I2C_WaitOnTXEFlagUntilTimeout>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00d      	beq.n	80055ac <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	2b04      	cmp	r3, #4
 8005596:	d107      	bne.n	80055a8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e035      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ba:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055be:	9300      	str	r3, [sp, #0]
 80055c0:	6a3b      	ldr	r3, [r7, #32]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f82b 	bl	8005624 <I2C_WaitOnFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e2:	d103      	bne.n	80055ec <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e013      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055f0:	897b      	ldrh	r3, [r7, #10]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	f043 0301 	orr.w	r3, r3, #1
 80055f8:	b2da      	uxtb	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	4906      	ldr	r1, [pc, #24]	; (8005620 <I2C_RequestMemoryRead+0x1cc>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f886 	bl	8005718 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}
 8005620:	00010002 	.word	0x00010002

08005624 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	60b9      	str	r1, [r7, #8]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	4613      	mov	r3, r2
 8005632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005634:	e048      	b.n	80056c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563c:	d044      	beq.n	80056c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fe fe81 	bl	8004344 <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <I2C_WaitOnFlagUntilTimeout+0x30>
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d139      	bne.n	80056c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	0c1b      	lsrs	r3, r3, #16
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b01      	cmp	r3, #1
 800565c:	d10d      	bne.n	800567a <I2C_WaitOnFlagUntilTimeout+0x56>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	43da      	mvns	r2, r3
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4013      	ands	r3, r2
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	e00c      	b.n	8005694 <I2C_WaitOnFlagUntilTimeout+0x70>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	43da      	mvns	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	4013      	ands	r3, r2
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	429a      	cmp	r2, r3
 8005698:	d116      	bne.n	80056c8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	f043 0220 	orr.w	r2, r3, #32
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e023      	b.n	8005710 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	0c1b      	lsrs	r3, r3, #16
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d10d      	bne.n	80056ee <I2C_WaitOnFlagUntilTimeout+0xca>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	43da      	mvns	r2, r3
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4013      	ands	r3, r2
 80056de:	b29b      	uxth	r3, r3
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	461a      	mov	r2, r3
 80056ec:	e00c      	b.n	8005708 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	43da      	mvns	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	4013      	ands	r3, r2
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	79fb      	ldrb	r3, [r7, #7]
 800570a:	429a      	cmp	r2, r3
 800570c:	d093      	beq.n	8005636 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
 8005724:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005726:	e071      	b.n	800580c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005732:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005736:	d123      	bne.n	8005780 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005746:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005750:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	f043 0204 	orr.w	r2, r3, #4
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e067      	b.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005786:	d041      	beq.n	800580c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005788:	f7fe fddc 	bl	8004344 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d302      	bcc.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d136      	bne.n	800580c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	0c1b      	lsrs	r3, r3, #16
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d10c      	bne.n	80057c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	695b      	ldr	r3, [r3, #20]
 80057ae:	43da      	mvns	r2, r3
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4013      	ands	r3, r2
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	bf14      	ite	ne
 80057ba:	2301      	movne	r3, #1
 80057bc:	2300      	moveq	r3, #0
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	e00b      	b.n	80057da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	43da      	mvns	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4013      	ands	r3, r2
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	bf14      	ite	ne
 80057d4:	2301      	movne	r3, #1
 80057d6:	2300      	moveq	r3, #0
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d016      	beq.n	800580c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	f043 0220 	orr.w	r2, r3, #32
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e021      	b.n	8005850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10c      	bne.n	8005830 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	43da      	mvns	r2, r3
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	4013      	ands	r3, r2
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	e00b      	b.n	8005848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	43da      	mvns	r2, r3
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4013      	ands	r3, r2
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	bf14      	ite	ne
 8005842:	2301      	movne	r3, #1
 8005844:	2300      	moveq	r3, #0
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	f47f af6d 	bne.w	8005728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005864:	e034      	b.n	80058d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f8e3 	bl	8005a32 <I2C_IsAcknowledgeFailed>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e034      	b.n	80058e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587c:	d028      	beq.n	80058d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587e:	f7fe fd61 	bl	8004344 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	429a      	cmp	r2, r3
 800588c:	d302      	bcc.n	8005894 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d11d      	bne.n	80058d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800589e:	2b80      	cmp	r3, #128	; 0x80
 80058a0:	d016      	beq.n	80058d0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2220      	movs	r2, #32
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058bc:	f043 0220 	orr.w	r2, r3, #32
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e007      	b.n	80058e0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b80      	cmp	r3, #128	; 0x80
 80058dc:	d1c3      	bne.n	8005866 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80058de:	2300      	movs	r3, #0
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b084      	sub	sp, #16
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058f4:	e034      	b.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f89b 	bl	8005a32 <I2C_IsAcknowledgeFailed>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e034      	b.n	8005970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d028      	beq.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800590e:	f7fe fd19 	bl	8004344 <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	429a      	cmp	r2, r3
 800591c:	d302      	bcc.n	8005924 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d11d      	bne.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b04      	cmp	r3, #4
 8005930:	d016      	beq.n	8005960 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800594c:	f043 0220 	orr.w	r2, r3, #32
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e007      	b.n	8005970 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	f003 0304 	and.w	r3, r3, #4
 800596a:	2b04      	cmp	r3, #4
 800596c:	d1c3      	bne.n	80058f6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005984:	e049      	b.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b10      	cmp	r3, #16
 8005992:	d119      	bne.n	80059c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0210 	mvn.w	r2, #16
 800599c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	e030      	b.n	8005a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059c8:	f7fe fcbc 	bl	8004344 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d302      	bcc.n	80059de <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d11d      	bne.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d016      	beq.n	8005a1a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f043 0220 	orr.w	r2, r3, #32
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e007      	b.n	8005a2a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a24:	2b40      	cmp	r3, #64	; 0x40
 8005a26:	d1ae      	bne.n	8005986 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a32:	b480      	push	{r7}
 8005a34:	b083      	sub	sp, #12
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a48:	d11b      	bne.n	8005a82 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a52:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f043 0204 	orr.w	r2, r3, #4
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e000      	b.n	8005a84 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d101      	bne.n	8005aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e0cc      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005aa4:	4b68      	ldr	r3, [pc, #416]	; (8005c48 <HAL_RCC_ClockConfig+0x1b8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	683a      	ldr	r2, [r7, #0]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d90c      	bls.n	8005acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ab2:	4b65      	ldr	r3, [pc, #404]	; (8005c48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	b2d2      	uxtb	r2, r2
 8005ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aba:	4b63      	ldr	r3, [pc, #396]	; (8005c48 <HAL_RCC_ClockConfig+0x1b8>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 030f 	and.w	r3, r3, #15
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0b8      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ae4:	4b59      	ldr	r3, [pc, #356]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ae6:	689b      	ldr	r3, [r3, #8]
 8005ae8:	4a58      	ldr	r2, [pc, #352]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005afc:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	4a52      	ldr	r2, [pc, #328]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b08:	4b50      	ldr	r3, [pc, #320]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	494d      	ldr	r1, [pc, #308]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d044      	beq.n	8005bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2e:	4b47      	ldr	r3, [pc, #284]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d119      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e07f      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d003      	beq.n	8005b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b4a:	2b03      	cmp	r3, #3
 8005b4c:	d107      	bne.n	8005b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b4e:	4b3f      	ldr	r3, [pc, #252]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d109      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e06f      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b5e:	4b3b      	ldr	r3, [pc, #236]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e067      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b6e:	4b37      	ldr	r3, [pc, #220]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f023 0203 	bic.w	r2, r3, #3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	4934      	ldr	r1, [pc, #208]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b80:	f7fe fbe0 	bl	8004344 <HAL_GetTick>
 8005b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b86:	e00a      	b.n	8005b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b88:	f7fe fbdc 	bl	8004344 <HAL_GetTick>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	1ad3      	subs	r3, r2, r3
 8005b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e04f      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9e:	4b2b      	ldr	r3, [pc, #172]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 020c 	and.w	r2, r3, #12
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d1eb      	bne.n	8005b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb0:	4b25      	ldr	r3, [pc, #148]	; (8005c48 <HAL_RCC_ClockConfig+0x1b8>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 030f 	and.w	r3, r3, #15
 8005bb8:	683a      	ldr	r2, [r7, #0]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d20c      	bcs.n	8005bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bbe:	4b22      	ldr	r3, [pc, #136]	; (8005c48 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	b2d2      	uxtb	r2, r2
 8005bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc6:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <HAL_RCC_ClockConfig+0x1b8>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e032      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be4:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005be6:	689b      	ldr	r3, [r3, #8]
 8005be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4916      	ldr	r1, [pc, #88]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005c04:	689b      	ldr	r3, [r3, #8]
 8005c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	490e      	ldr	r1, [pc, #56]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c16:	f000 f855 	bl	8005cc4 <HAL_RCC_GetSysClockFreq>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <HAL_RCC_ClockConfig+0x1bc>)
 8005c1e:	689b      	ldr	r3, [r3, #8]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	490a      	ldr	r1, [pc, #40]	; (8005c50 <HAL_RCC_ClockConfig+0x1c0>)
 8005c28:	5ccb      	ldrb	r3, [r1, r3]
 8005c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2e:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <HAL_RCC_ClockConfig+0x1c4>)
 8005c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005c32:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_RCC_ClockConfig+0x1c8>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe fb40 	bl	80042bc <HAL_InitTick>

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40023c00 	.word	0x40023c00
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	0800bbe0 	.word	0x0800bbe0
 8005c54:	20000068 	.word	0x20000068
 8005c58:	2000006c 	.word	0x2000006c

08005c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b03      	ldr	r3, [pc, #12]	; (8005c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000068 	.word	0x20000068

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c78:	f7ff fff0 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	0a9b      	lsrs	r3, r3, #10
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4903      	ldr	r1, [pc, #12]	; (8005c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40023800 	.word	0x40023800
 8005c98:	0800bbf0 	.word	0x0800bbf0

08005c9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005ca0:	f7ff ffdc 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	4b05      	ldr	r3, [pc, #20]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	0b5b      	lsrs	r3, r3, #13
 8005cac:	f003 0307 	and.w	r3, r3, #7
 8005cb0:	4903      	ldr	r1, [pc, #12]	; (8005cc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cb2:	5ccb      	ldrb	r3, [r1, r3]
 8005cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	40023800 	.word	0x40023800
 8005cc0:	0800bbf0 	.word	0x0800bbf0

08005cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc8:	b0a6      	sub	sp, #152	; 0x98
 8005cca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005cea:	4bc8      	ldr	r3, [pc, #800]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	f003 030c 	and.w	r3, r3, #12
 8005cf2:	2b0c      	cmp	r3, #12
 8005cf4:	f200 817e 	bhi.w	8005ff4 <HAL_RCC_GetSysClockFreq+0x330>
 8005cf8:	a201      	add	r2, pc, #4	; (adr r2, 8005d00 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cfe:	bf00      	nop
 8005d00:	08005d35 	.word	0x08005d35
 8005d04:	08005ff5 	.word	0x08005ff5
 8005d08:	08005ff5 	.word	0x08005ff5
 8005d0c:	08005ff5 	.word	0x08005ff5
 8005d10:	08005d3d 	.word	0x08005d3d
 8005d14:	08005ff5 	.word	0x08005ff5
 8005d18:	08005ff5 	.word	0x08005ff5
 8005d1c:	08005ff5 	.word	0x08005ff5
 8005d20:	08005d45 	.word	0x08005d45
 8005d24:	08005ff5 	.word	0x08005ff5
 8005d28:	08005ff5 	.word	0x08005ff5
 8005d2c:	08005ff5 	.word	0x08005ff5
 8005d30:	08005eaf 	.word	0x08005eaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005d34:	4bb6      	ldr	r3, [pc, #728]	; (8006010 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8005d3a:	e15f      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005d3c:	4bb5      	ldr	r3, [pc, #724]	; (8006014 <HAL_RCC_GetSysClockFreq+0x350>)
 8005d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005d42:	e15b      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005d44:	4bb1      	ldr	r3, [pc, #708]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005d50:	4bae      	ldr	r3, [pc, #696]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d031      	beq.n	8005dc0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d5c:	4bab      	ldr	r3, [pc, #684]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	099b      	lsrs	r3, r3, #6
 8005d62:	2200      	movs	r2, #0
 8005d64:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d70:	2300      	movs	r3, #0
 8005d72:	667b      	str	r3, [r7, #100]	; 0x64
 8005d74:	4ba7      	ldr	r3, [pc, #668]	; (8006014 <HAL_RCC_GetSysClockFreq+0x350>)
 8005d76:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8005d7a:	462a      	mov	r2, r5
 8005d7c:	fb03 f202 	mul.w	r2, r3, r2
 8005d80:	2300      	movs	r3, #0
 8005d82:	4621      	mov	r1, r4
 8005d84:	fb01 f303 	mul.w	r3, r1, r3
 8005d88:	4413      	add	r3, r2
 8005d8a:	4aa2      	ldr	r2, [pc, #648]	; (8006014 <HAL_RCC_GetSysClockFreq+0x350>)
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	fba1 1202 	umull	r1, r2, r1, r2
 8005d92:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005d94:	460a      	mov	r2, r1
 8005d96:	67ba      	str	r2, [r7, #120]	; 0x78
 8005d98:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d9a:	4413      	add	r3, r2
 8005d9c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005da2:	2200      	movs	r2, #0
 8005da4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005da6:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005da8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005db0:	f7fa ffd2 	bl	8000d58 <__aeabi_uldivmod>
 8005db4:	4602      	mov	r2, r0
 8005db6:	460b      	mov	r3, r1
 8005db8:	4613      	mov	r3, r2
 8005dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005dbe:	e064      	b.n	8005e8a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005dc0:	4b92      	ldr	r3, [pc, #584]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	099b      	lsrs	r3, r3, #6
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	653b      	str	r3, [r7, #80]	; 0x50
 8005dca:	657a      	str	r2, [r7, #84]	; 0x54
 8005dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dd8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8005ddc:	4622      	mov	r2, r4
 8005dde:	462b      	mov	r3, r5
 8005de0:	f04f 0000 	mov.w	r0, #0
 8005de4:	f04f 0100 	mov.w	r1, #0
 8005de8:	0159      	lsls	r1, r3, #5
 8005dea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dee:	0150      	lsls	r0, r2, #5
 8005df0:	4602      	mov	r2, r0
 8005df2:	460b      	mov	r3, r1
 8005df4:	4621      	mov	r1, r4
 8005df6:	1a51      	subs	r1, r2, r1
 8005df8:	6139      	str	r1, [r7, #16]
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	eb63 0301 	sbc.w	r3, r3, r1
 8005e00:	617b      	str	r3, [r7, #20]
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	f04f 0300 	mov.w	r3, #0
 8005e0a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e0e:	4659      	mov	r1, fp
 8005e10:	018b      	lsls	r3, r1, #6
 8005e12:	4651      	mov	r1, sl
 8005e14:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005e18:	4651      	mov	r1, sl
 8005e1a:	018a      	lsls	r2, r1, #6
 8005e1c:	4651      	mov	r1, sl
 8005e1e:	ebb2 0801 	subs.w	r8, r2, r1
 8005e22:	4659      	mov	r1, fp
 8005e24:	eb63 0901 	sbc.w	r9, r3, r1
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e34:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e38:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3c:	4690      	mov	r8, r2
 8005e3e:	4699      	mov	r9, r3
 8005e40:	4623      	mov	r3, r4
 8005e42:	eb18 0303 	adds.w	r3, r8, r3
 8005e46:	60bb      	str	r3, [r7, #8]
 8005e48:	462b      	mov	r3, r5
 8005e4a:	eb49 0303 	adc.w	r3, r9, r3
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	f04f 0200 	mov.w	r2, #0
 8005e54:	f04f 0300 	mov.w	r3, #0
 8005e58:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	028b      	lsls	r3, r1, #10
 8005e60:	4621      	mov	r1, r4
 8005e62:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e66:	4621      	mov	r1, r4
 8005e68:	028a      	lsls	r2, r1, #10
 8005e6a:	4610      	mov	r0, r2
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e72:	2200      	movs	r2, #0
 8005e74:	643b      	str	r3, [r7, #64]	; 0x40
 8005e76:	647a      	str	r2, [r7, #68]	; 0x44
 8005e78:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e7c:	f7fa ff6c 	bl	8000d58 <__aeabi_uldivmod>
 8005e80:	4602      	mov	r2, r0
 8005e82:	460b      	mov	r3, r1
 8005e84:	4613      	mov	r3, r2
 8005e86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005e8a:	4b60      	ldr	r3, [pc, #384]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	0c1b      	lsrs	r3, r3, #16
 8005e90:	f003 0303 	and.w	r3, r3, #3
 8005e94:	3301      	adds	r3, #1
 8005e96:	005b      	lsls	r3, r3, #1
 8005e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 8005e9c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ea8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005eac:	e0a6      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005eae:	4b57      	ldr	r3, [pc, #348]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005eb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005eba:	4b54      	ldr	r3, [pc, #336]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d02a      	beq.n	8005f1c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ec6:	4b51      	ldr	r3, [pc, #324]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	099b      	lsrs	r3, r3, #6
 8005ecc:	2200      	movs	r2, #0
 8005ece:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ed0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ed8:	2100      	movs	r1, #0
 8005eda:	4b4e      	ldr	r3, [pc, #312]	; (8006014 <HAL_RCC_GetSysClockFreq+0x350>)
 8005edc:	fb03 f201 	mul.w	r2, r3, r1
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	fb00 f303 	mul.w	r3, r0, r3
 8005ee6:	4413      	add	r3, r2
 8005ee8:	4a4a      	ldr	r2, [pc, #296]	; (8006014 <HAL_RCC_GetSysClockFreq+0x350>)
 8005eea:	fba0 1202 	umull	r1, r2, r0, r2
 8005eee:	677a      	str	r2, [r7, #116]	; 0x74
 8005ef0:	460a      	mov	r2, r1
 8005ef2:	673a      	str	r2, [r7, #112]	; 0x70
 8005ef4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005ef6:	4413      	add	r3, r2
 8005ef8:	677b      	str	r3, [r7, #116]	; 0x74
 8005efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005efe:	2200      	movs	r2, #0
 8005f00:	633b      	str	r3, [r7, #48]	; 0x30
 8005f02:	637a      	str	r2, [r7, #52]	; 0x34
 8005f04:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005f08:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8005f0c:	f7fa ff24 	bl	8000d58 <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4613      	mov	r3, r2
 8005f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f1a:	e05b      	b.n	8005fd4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f1c:	4b3b      	ldr	r3, [pc, #236]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	099b      	lsrs	r3, r3, #6
 8005f22:	2200      	movs	r2, #0
 8005f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f26:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f2e:	623b      	str	r3, [r7, #32]
 8005f30:	2300      	movs	r3, #0
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
 8005f34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f38:	4642      	mov	r2, r8
 8005f3a:	464b      	mov	r3, r9
 8005f3c:	f04f 0000 	mov.w	r0, #0
 8005f40:	f04f 0100 	mov.w	r1, #0
 8005f44:	0159      	lsls	r1, r3, #5
 8005f46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f4a:	0150      	lsls	r0, r2, #5
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4641      	mov	r1, r8
 8005f52:	ebb2 0a01 	subs.w	sl, r2, r1
 8005f56:	4649      	mov	r1, r9
 8005f58:	eb63 0b01 	sbc.w	fp, r3, r1
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005f68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005f6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005f70:	ebb2 040a 	subs.w	r4, r2, sl
 8005f74:	eb63 050b 	sbc.w	r5, r3, fp
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	00eb      	lsls	r3, r5, #3
 8005f82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f86:	00e2      	lsls	r2, r4, #3
 8005f88:	4614      	mov	r4, r2
 8005f8a:	461d      	mov	r5, r3
 8005f8c:	4643      	mov	r3, r8
 8005f8e:	18e3      	adds	r3, r4, r3
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	464b      	mov	r3, r9
 8005f94:	eb45 0303 	adc.w	r3, r5, r3
 8005f98:	607b      	str	r3, [r7, #4]
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	f04f 0300 	mov.w	r3, #0
 8005fa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fa6:	4629      	mov	r1, r5
 8005fa8:	028b      	lsls	r3, r1, #10
 8005faa:	4621      	mov	r1, r4
 8005fac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	028a      	lsls	r2, r1, #10
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	61bb      	str	r3, [r7, #24]
 8005fc0:	61fa      	str	r2, [r7, #28]
 8005fc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fc6:	f7fa fec7 	bl	8000d58 <__aeabi_uldivmod>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	460b      	mov	r3, r1
 8005fce:	4613      	mov	r3, r2
 8005fd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	; (800600c <HAL_RCC_GetSysClockFreq+0x348>)
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	0f1b      	lsrs	r3, r3, #28
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8005fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005ff2:	e003      	b.n	8005ffc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ff4:	4b06      	ldr	r3, [pc, #24]	; (8006010 <HAL_RCC_GetSysClockFreq+0x34c>)
 8005ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8005ffa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ffc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8006000:	4618      	mov	r0, r3
 8006002:	3798      	adds	r7, #152	; 0x98
 8006004:	46bd      	mov	sp, r7
 8006006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800600a:	bf00      	nop
 800600c:	40023800 	.word	0x40023800
 8006010:	00f42400 	.word	0x00f42400
 8006014:	017d7840 	.word	0x017d7840

08006018 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e28d      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 8083 	beq.w	800613e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8006038:	4b94      	ldr	r3, [pc, #592]	; (800628c <HAL_RCC_OscConfig+0x274>)
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f003 030c 	and.w	r3, r3, #12
 8006040:	2b04      	cmp	r3, #4
 8006042:	d019      	beq.n	8006078 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006044:	4b91      	ldr	r3, [pc, #580]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800604c:	2b08      	cmp	r3, #8
 800604e:	d106      	bne.n	800605e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006050:	4b8e      	ldr	r3, [pc, #568]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006058:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800605c:	d00c      	beq.n	8006078 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800605e:	4b8b      	ldr	r3, [pc, #556]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8006066:	2b0c      	cmp	r3, #12
 8006068:	d112      	bne.n	8006090 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800606a:	4b88      	ldr	r3, [pc, #544]	; (800628c <HAL_RCC_OscConfig+0x274>)
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006076:	d10b      	bne.n	8006090 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006078:	4b84      	ldr	r3, [pc, #528]	; (800628c <HAL_RCC_OscConfig+0x274>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d05b      	beq.n	800613c <HAL_RCC_OscConfig+0x124>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d157      	bne.n	800613c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e25a      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006098:	d106      	bne.n	80060a8 <HAL_RCC_OscConfig+0x90>
 800609a:	4b7c      	ldr	r3, [pc, #496]	; (800628c <HAL_RCC_OscConfig+0x274>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a7b      	ldr	r2, [pc, #492]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a4:	6013      	str	r3, [r2, #0]
 80060a6:	e01d      	b.n	80060e4 <HAL_RCC_OscConfig+0xcc>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80060b0:	d10c      	bne.n	80060cc <HAL_RCC_OscConfig+0xb4>
 80060b2:	4b76      	ldr	r3, [pc, #472]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a75      	ldr	r2, [pc, #468]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	4b73      	ldr	r3, [pc, #460]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a72      	ldr	r2, [pc, #456]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060c8:	6013      	str	r3, [r2, #0]
 80060ca:	e00b      	b.n	80060e4 <HAL_RCC_OscConfig+0xcc>
 80060cc:	4b6f      	ldr	r3, [pc, #444]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a6e      	ldr	r2, [pc, #440]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	4b6c      	ldr	r3, [pc, #432]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a6b      	ldr	r2, [pc, #428]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80060de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d013      	beq.n	8006114 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ec:	f7fe f92a 	bl	8004344 <HAL_GetTick>
 80060f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060f2:	e008      	b.n	8006106 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060f4:	f7fe f926 	bl	8004344 <HAL_GetTick>
 80060f8:	4602      	mov	r2, r0
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	1ad3      	subs	r3, r2, r3
 80060fe:	2b64      	cmp	r3, #100	; 0x64
 8006100:	d901      	bls.n	8006106 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e21f      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006106:	4b61      	ldr	r3, [pc, #388]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d0f0      	beq.n	80060f4 <HAL_RCC_OscConfig+0xdc>
 8006112:	e014      	b.n	800613e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006114:	f7fe f916 	bl	8004344 <HAL_GetTick>
 8006118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800611a:	e008      	b.n	800612e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800611c:	f7fe f912 	bl	8004344 <HAL_GetTick>
 8006120:	4602      	mov	r2, r0
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	2b64      	cmp	r3, #100	; 0x64
 8006128:	d901      	bls.n	800612e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e20b      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800612e:	4b57      	ldr	r3, [pc, #348]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1f0      	bne.n	800611c <HAL_RCC_OscConfig+0x104>
 800613a:	e000      	b.n	800613e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800613c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d06f      	beq.n	800622a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800614a:	4b50      	ldr	r3, [pc, #320]	; (800628c <HAL_RCC_OscConfig+0x274>)
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	f003 030c 	and.w	r3, r3, #12
 8006152:	2b00      	cmp	r3, #0
 8006154:	d017      	beq.n	8006186 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006156:	4b4d      	ldr	r3, [pc, #308]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800615e:	2b08      	cmp	r3, #8
 8006160:	d105      	bne.n	800616e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006162:	4b4a      	ldr	r3, [pc, #296]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00b      	beq.n	8006186 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800616e:	4b47      	ldr	r3, [pc, #284]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8006176:	2b0c      	cmp	r3, #12
 8006178:	d11c      	bne.n	80061b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800617a:	4b44      	ldr	r3, [pc, #272]	; (800628c <HAL_RCC_OscConfig+0x274>)
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d116      	bne.n	80061b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006186:	4b41      	ldr	r3, [pc, #260]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <HAL_RCC_OscConfig+0x186>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d001      	beq.n	800619e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e1d3      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800619e:	4b3b      	ldr	r3, [pc, #236]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4937      	ldr	r1, [pc, #220]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061b2:	e03a      	b.n	800622a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d020      	beq.n	80061fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061bc:	4b34      	ldr	r3, [pc, #208]	; (8006290 <HAL_RCC_OscConfig+0x278>)
 80061be:	2201      	movs	r2, #1
 80061c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061c2:	f7fe f8bf 	bl	8004344 <HAL_GetTick>
 80061c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061c8:	e008      	b.n	80061dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061ca:	f7fe f8bb 	bl	8004344 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d901      	bls.n	80061dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80061d8:	2303      	movs	r3, #3
 80061da:	e1b4      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061dc:	4b2b      	ldr	r3, [pc, #172]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d0f0      	beq.n	80061ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061e8:	4b28      	ldr	r3, [pc, #160]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4925      	ldr	r1, [pc, #148]	; (800628c <HAL_RCC_OscConfig+0x274>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	600b      	str	r3, [r1, #0]
 80061fc:	e015      	b.n	800622a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061fe:	4b24      	ldr	r3, [pc, #144]	; (8006290 <HAL_RCC_OscConfig+0x278>)
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006204:	f7fe f89e 	bl	8004344 <HAL_GetTick>
 8006208:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800620a:	e008      	b.n	800621e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800620c:	f7fe f89a 	bl	8004344 <HAL_GetTick>
 8006210:	4602      	mov	r2, r0
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	1ad3      	subs	r3, r2, r3
 8006216:	2b02      	cmp	r3, #2
 8006218:	d901      	bls.n	800621e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800621a:	2303      	movs	r3, #3
 800621c:	e193      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800621e:	4b1b      	ldr	r3, [pc, #108]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0302 	and.w	r3, r3, #2
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1f0      	bne.n	800620c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0308 	and.w	r3, r3, #8
 8006232:	2b00      	cmp	r3, #0
 8006234:	d036      	beq.n	80062a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d016      	beq.n	800626c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800623e:	4b15      	ldr	r3, [pc, #84]	; (8006294 <HAL_RCC_OscConfig+0x27c>)
 8006240:	2201      	movs	r2, #1
 8006242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006244:	f7fe f87e 	bl	8004344 <HAL_GetTick>
 8006248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800624a:	e008      	b.n	800625e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800624c:	f7fe f87a 	bl	8004344 <HAL_GetTick>
 8006250:	4602      	mov	r2, r0
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	1ad3      	subs	r3, r2, r3
 8006256:	2b02      	cmp	r3, #2
 8006258:	d901      	bls.n	800625e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e173      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800625e:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_RCC_OscConfig+0x274>)
 8006260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0f0      	beq.n	800624c <HAL_RCC_OscConfig+0x234>
 800626a:	e01b      	b.n	80062a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800626c:	4b09      	ldr	r3, [pc, #36]	; (8006294 <HAL_RCC_OscConfig+0x27c>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006272:	f7fe f867 	bl	8004344 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006278:	e00e      	b.n	8006298 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800627a:	f7fe f863 	bl	8004344 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d907      	bls.n	8006298 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e15c      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
 800628c:	40023800 	.word	0x40023800
 8006290:	42470000 	.word	0x42470000
 8006294:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006298:	4b8a      	ldr	r3, [pc, #552]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 800629a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629c:	f003 0302 	and.w	r3, r3, #2
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d1ea      	bne.n	800627a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0304 	and.w	r3, r3, #4
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8097 	beq.w	80063e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062b2:	2300      	movs	r3, #0
 80062b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062b6:	4b83      	ldr	r3, [pc, #524]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10f      	bne.n	80062e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
 80062c6:	4b7f      	ldr	r3, [pc, #508]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	4a7e      	ldr	r2, [pc, #504]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80062cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d0:	6413      	str	r3, [r2, #64]	; 0x40
 80062d2:	4b7c      	ldr	r3, [pc, #496]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80062d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062da:	60bb      	str	r3, [r7, #8]
 80062dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80062de:	2301      	movs	r3, #1
 80062e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062e2:	4b79      	ldr	r3, [pc, #484]	; (80064c8 <HAL_RCC_OscConfig+0x4b0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d118      	bne.n	8006320 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80062ee:	4b76      	ldr	r3, [pc, #472]	; (80064c8 <HAL_RCC_OscConfig+0x4b0>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a75      	ldr	r2, [pc, #468]	; (80064c8 <HAL_RCC_OscConfig+0x4b0>)
 80062f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062fa:	f7fe f823 	bl	8004344 <HAL_GetTick>
 80062fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006300:	e008      	b.n	8006314 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006302:	f7fe f81f 	bl	8004344 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b02      	cmp	r3, #2
 800630e:	d901      	bls.n	8006314 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e118      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006314:	4b6c      	ldr	r3, [pc, #432]	; (80064c8 <HAL_RCC_OscConfig+0x4b0>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0f0      	beq.n	8006302 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d106      	bne.n	8006336 <HAL_RCC_OscConfig+0x31e>
 8006328:	4b66      	ldr	r3, [pc, #408]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 800632a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800632c:	4a65      	ldr	r2, [pc, #404]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 800632e:	f043 0301 	orr.w	r3, r3, #1
 8006332:	6713      	str	r3, [r2, #112]	; 0x70
 8006334:	e01c      	b.n	8006370 <HAL_RCC_OscConfig+0x358>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	2b05      	cmp	r3, #5
 800633c:	d10c      	bne.n	8006358 <HAL_RCC_OscConfig+0x340>
 800633e:	4b61      	ldr	r3, [pc, #388]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	4a60      	ldr	r2, [pc, #384]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 8006344:	f043 0304 	orr.w	r3, r3, #4
 8006348:	6713      	str	r3, [r2, #112]	; 0x70
 800634a:	4b5e      	ldr	r3, [pc, #376]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 800634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800634e:	4a5d      	ldr	r2, [pc, #372]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 8006350:	f043 0301 	orr.w	r3, r3, #1
 8006354:	6713      	str	r3, [r2, #112]	; 0x70
 8006356:	e00b      	b.n	8006370 <HAL_RCC_OscConfig+0x358>
 8006358:	4b5a      	ldr	r3, [pc, #360]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 800635a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635c:	4a59      	ldr	r2, [pc, #356]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 800635e:	f023 0301 	bic.w	r3, r3, #1
 8006362:	6713      	str	r3, [r2, #112]	; 0x70
 8006364:	4b57      	ldr	r3, [pc, #348]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 8006366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006368:	4a56      	ldr	r2, [pc, #344]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 800636a:	f023 0304 	bic.w	r3, r3, #4
 800636e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d015      	beq.n	80063a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006378:	f7fd ffe4 	bl	8004344 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800637e:	e00a      	b.n	8006396 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006380:	f7fd ffe0 	bl	8004344 <HAL_GetTick>
 8006384:	4602      	mov	r2, r0
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	1ad3      	subs	r3, r2, r3
 800638a:	f241 3288 	movw	r2, #5000	; 0x1388
 800638e:	4293      	cmp	r3, r2
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e0d7      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006396:	4b4b      	ldr	r3, [pc, #300]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 8006398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639a:	f003 0302 	and.w	r3, r3, #2
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0ee      	beq.n	8006380 <HAL_RCC_OscConfig+0x368>
 80063a2:	e014      	b.n	80063ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063a4:	f7fd ffce 	bl	8004344 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063aa:	e00a      	b.n	80063c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ac:	f7fd ffca 	bl	8004344 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e0c1      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063c2:	4b40      	ldr	r3, [pc, #256]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80063c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c6:	f003 0302 	and.w	r3, r3, #2
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1ee      	bne.n	80063ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d105      	bne.n	80063e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063d4:	4b3b      	ldr	r3, [pc, #236]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	4a3a      	ldr	r2, [pc, #232]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80063da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 80ad 	beq.w	8006544 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80063ea:	4b36      	ldr	r3, [pc, #216]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 030c 	and.w	r3, r3, #12
 80063f2:	2b08      	cmp	r3, #8
 80063f4:	d060      	beq.n	80064b8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d145      	bne.n	800648a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063fe:	4b33      	ldr	r3, [pc, #204]	; (80064cc <HAL_RCC_OscConfig+0x4b4>)
 8006400:	2200      	movs	r2, #0
 8006402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006404:	f7fd ff9e 	bl	8004344 <HAL_GetTick>
 8006408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640a:	e008      	b.n	800641e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640c:	f7fd ff9a 	bl	8004344 <HAL_GetTick>
 8006410:	4602      	mov	r2, r0
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	2b02      	cmp	r3, #2
 8006418:	d901      	bls.n	800641e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e093      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800641e:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006426:	2b00      	cmp	r3, #0
 8006428:	d1f0      	bne.n	800640c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	69da      	ldr	r2, [r3, #28]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	431a      	orrs	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	019b      	lsls	r3, r3, #6
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006440:	085b      	lsrs	r3, r3, #1
 8006442:	3b01      	subs	r3, #1
 8006444:	041b      	lsls	r3, r3, #16
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	061b      	lsls	r3, r3, #24
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006454:	071b      	lsls	r3, r3, #28
 8006456:	491b      	ldr	r1, [pc, #108]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 8006458:	4313      	orrs	r3, r2
 800645a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800645c:	4b1b      	ldr	r3, [pc, #108]	; (80064cc <HAL_RCC_OscConfig+0x4b4>)
 800645e:	2201      	movs	r2, #1
 8006460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006462:	f7fd ff6f 	bl	8004344 <HAL_GetTick>
 8006466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006468:	e008      	b.n	800647c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800646a:	f7fd ff6b 	bl	8004344 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e064      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800647c:	4b11      	ldr	r3, [pc, #68]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d0f0      	beq.n	800646a <HAL_RCC_OscConfig+0x452>
 8006488:	e05c      	b.n	8006544 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648a:	4b10      	ldr	r3, [pc, #64]	; (80064cc <HAL_RCC_OscConfig+0x4b4>)
 800648c:	2200      	movs	r2, #0
 800648e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006490:	f7fd ff58 	bl	8004344 <HAL_GetTick>
 8006494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006496:	e008      	b.n	80064aa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006498:	f7fd ff54 	bl	8004344 <HAL_GetTick>
 800649c:	4602      	mov	r2, r0
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	d901      	bls.n	80064aa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80064a6:	2303      	movs	r3, #3
 80064a8:	e04d      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064aa:	4b06      	ldr	r3, [pc, #24]	; (80064c4 <HAL_RCC_OscConfig+0x4ac>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1f0      	bne.n	8006498 <HAL_RCC_OscConfig+0x480>
 80064b6:	e045      	b.n	8006544 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699b      	ldr	r3, [r3, #24]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d107      	bne.n	80064d0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e040      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
 80064c4:	40023800 	.word	0x40023800
 80064c8:	40007000 	.word	0x40007000
 80064cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064d0:	4b1f      	ldr	r3, [pc, #124]	; (8006550 <HAL_RCC_OscConfig+0x538>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d030      	beq.n	8006540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d129      	bne.n	8006540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d122      	bne.n	8006540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064fa:	68fa      	ldr	r2, [r7, #12]
 80064fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006500:	4013      	ands	r3, r2
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006506:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006508:	4293      	cmp	r3, r2
 800650a:	d119      	bne.n	8006540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	3b01      	subs	r3, #1
 800651a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800651c:	429a      	cmp	r2, r3
 800651e:	d10f      	bne.n	8006540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800652c:	429a      	cmp	r2, r3
 800652e:	d107      	bne.n	8006540 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800653c:	429a      	cmp	r2, r3
 800653e:	d001      	beq.n	8006544 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e000      	b.n	8006546 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3718      	adds	r7, #24
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40023800 	.word	0x40023800

08006554 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e041      	b.n	80065ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800656c:	b2db      	uxtb	r3, r3
 800656e:	2b00      	cmp	r3, #0
 8006570:	d106      	bne.n	8006580 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fd fc9e 	bl	8003ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	3304      	adds	r3, #4
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f000 f8f4 	bl	8006780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3708      	adds	r7, #8
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b084      	sub	sp, #16
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_TIM_ConfigClockSource+0x1c>
 800660a:	2302      	movs	r3, #2
 800660c:	e0b4      	b.n	8006778 <HAL_TIM_ConfigClockSource+0x186>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800662c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006634:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	d03e      	beq.n	80066c6 <HAL_TIM_ConfigClockSource+0xd4>
 8006648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664c:	f200 8087 	bhi.w	800675e <HAL_TIM_ConfigClockSource+0x16c>
 8006650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006654:	f000 8086 	beq.w	8006764 <HAL_TIM_ConfigClockSource+0x172>
 8006658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800665c:	d87f      	bhi.n	800675e <HAL_TIM_ConfigClockSource+0x16c>
 800665e:	2b70      	cmp	r3, #112	; 0x70
 8006660:	d01a      	beq.n	8006698 <HAL_TIM_ConfigClockSource+0xa6>
 8006662:	2b70      	cmp	r3, #112	; 0x70
 8006664:	d87b      	bhi.n	800675e <HAL_TIM_ConfigClockSource+0x16c>
 8006666:	2b60      	cmp	r3, #96	; 0x60
 8006668:	d050      	beq.n	800670c <HAL_TIM_ConfigClockSource+0x11a>
 800666a:	2b60      	cmp	r3, #96	; 0x60
 800666c:	d877      	bhi.n	800675e <HAL_TIM_ConfigClockSource+0x16c>
 800666e:	2b50      	cmp	r3, #80	; 0x50
 8006670:	d03c      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0xfa>
 8006672:	2b50      	cmp	r3, #80	; 0x50
 8006674:	d873      	bhi.n	800675e <HAL_TIM_ConfigClockSource+0x16c>
 8006676:	2b40      	cmp	r3, #64	; 0x40
 8006678:	d058      	beq.n	800672c <HAL_TIM_ConfigClockSource+0x13a>
 800667a:	2b40      	cmp	r3, #64	; 0x40
 800667c:	d86f      	bhi.n	800675e <HAL_TIM_ConfigClockSource+0x16c>
 800667e:	2b30      	cmp	r3, #48	; 0x30
 8006680:	d064      	beq.n	800674c <HAL_TIM_ConfigClockSource+0x15a>
 8006682:	2b30      	cmp	r3, #48	; 0x30
 8006684:	d86b      	bhi.n	800675e <HAL_TIM_ConfigClockSource+0x16c>
 8006686:	2b20      	cmp	r3, #32
 8006688:	d060      	beq.n	800674c <HAL_TIM_ConfigClockSource+0x15a>
 800668a:	2b20      	cmp	r3, #32
 800668c:	d867      	bhi.n	800675e <HAL_TIM_ConfigClockSource+0x16c>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d05c      	beq.n	800674c <HAL_TIM_ConfigClockSource+0x15a>
 8006692:	2b10      	cmp	r3, #16
 8006694:	d05a      	beq.n	800674c <HAL_TIM_ConfigClockSource+0x15a>
 8006696:	e062      	b.n	800675e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066a8:	f000 f990 	bl	80069cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	609a      	str	r2, [r3, #8]
      break;
 80066c4:	e04f      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066d6:	f000 f979 	bl	80069cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	689a      	ldr	r2, [r3, #8]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80066e8:	609a      	str	r2, [r3, #8]
      break;
 80066ea:	e03c      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80066f8:	461a      	mov	r2, r3
 80066fa:	f000 f8ed 	bl	80068d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2150      	movs	r1, #80	; 0x50
 8006704:	4618      	mov	r0, r3
 8006706:	f000 f946 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 800670a:	e02c      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006718:	461a      	mov	r2, r3
 800671a:	f000 f90c 	bl	8006936 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	2160      	movs	r1, #96	; 0x60
 8006724:	4618      	mov	r0, r3
 8006726:	f000 f936 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 800672a:	e01c      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006738:	461a      	mov	r2, r3
 800673a:	f000 f8cd 	bl	80068d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2140      	movs	r1, #64	; 0x40
 8006744:	4618      	mov	r0, r3
 8006746:	f000 f926 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 800674a:	e00c      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f000 f91d 	bl	8006996 <TIM_ITRx_SetConfig>
      break;
 800675c:	e003      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	73fb      	strb	r3, [r7, #15]
      break;
 8006762:	e000      	b.n	8006766 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006764:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006776:	7bfb      	ldrb	r3, [r7, #15]
}
 8006778:	4618      	mov	r0, r3
 800677a:	3710      	adds	r7, #16
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a46      	ldr	r2, [pc, #280]	; (80068ac <TIM_Base_SetConfig+0x12c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d013      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800679e:	d00f      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a43      	ldr	r2, [pc, #268]	; (80068b0 <TIM_Base_SetConfig+0x130>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d00b      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a42      	ldr	r2, [pc, #264]	; (80068b4 <TIM_Base_SetConfig+0x134>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d007      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4a41      	ldr	r2, [pc, #260]	; (80068b8 <TIM_Base_SetConfig+0x138>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d003      	beq.n	80067c0 <TIM_Base_SetConfig+0x40>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	4a40      	ldr	r2, [pc, #256]	; (80068bc <TIM_Base_SetConfig+0x13c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d108      	bne.n	80067d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a35      	ldr	r2, [pc, #212]	; (80068ac <TIM_Base_SetConfig+0x12c>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d02b      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067e0:	d027      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a32      	ldr	r2, [pc, #200]	; (80068b0 <TIM_Base_SetConfig+0x130>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d023      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a31      	ldr	r2, [pc, #196]	; (80068b4 <TIM_Base_SetConfig+0x134>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d01f      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a30      	ldr	r2, [pc, #192]	; (80068b8 <TIM_Base_SetConfig+0x138>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d01b      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2f      	ldr	r2, [pc, #188]	; (80068bc <TIM_Base_SetConfig+0x13c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d017      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2e      	ldr	r2, [pc, #184]	; (80068c0 <TIM_Base_SetConfig+0x140>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d013      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a2d      	ldr	r2, [pc, #180]	; (80068c4 <TIM_Base_SetConfig+0x144>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d00f      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a2c      	ldr	r2, [pc, #176]	; (80068c8 <TIM_Base_SetConfig+0x148>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d00b      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a2b      	ldr	r2, [pc, #172]	; (80068cc <TIM_Base_SetConfig+0x14c>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d007      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2a      	ldr	r2, [pc, #168]	; (80068d0 <TIM_Base_SetConfig+0x150>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_Base_SetConfig+0xb2>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a29      	ldr	r2, [pc, #164]	; (80068d4 <TIM_Base_SetConfig+0x154>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d108      	bne.n	8006844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	4313      	orrs	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	4313      	orrs	r3, r2
 8006850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68fa      	ldr	r2, [r7, #12]
 8006856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a10      	ldr	r2, [pc, #64]	; (80068ac <TIM_Base_SetConfig+0x12c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_Base_SetConfig+0xf8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a12      	ldr	r2, [pc, #72]	; (80068bc <TIM_Base_SetConfig+0x13c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d103      	bne.n	8006880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b01      	cmp	r3, #1
 8006890:	d105      	bne.n	800689e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	f023 0201 	bic.w	r2, r3, #1
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	611a      	str	r2, [r3, #16]
  }
}
 800689e:	bf00      	nop
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	40010000 	.word	0x40010000
 80068b0:	40000400 	.word	0x40000400
 80068b4:	40000800 	.word	0x40000800
 80068b8:	40000c00 	.word	0x40000c00
 80068bc:	40010400 	.word	0x40010400
 80068c0:	40014000 	.word	0x40014000
 80068c4:	40014400 	.word	0x40014400
 80068c8:	40014800 	.word	0x40014800
 80068cc:	40001800 	.word	0x40001800
 80068d0:	40001c00 	.word	0x40001c00
 80068d4:	40002000 	.word	0x40002000

080068d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f023 0201 	bic.w	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	f023 030a 	bic.w	r3, r3, #10
 8006914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	621a      	str	r2, [r3, #32]
}
 800692a:	bf00      	nop
 800692c:	371c      	adds	r7, #28
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006936:	b480      	push	{r7}
 8006938:	b087      	sub	sp, #28
 800693a:	af00      	add	r7, sp, #0
 800693c:	60f8      	str	r0, [r7, #12]
 800693e:	60b9      	str	r1, [r7, #8]
 8006940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6a1b      	ldr	r3, [r3, #32]
 8006946:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6a1b      	ldr	r3, [r3, #32]
 800694c:	f023 0210 	bic.w	r2, r3, #16
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006960:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	031b      	lsls	r3, r3, #12
 8006966:	693a      	ldr	r2, [r7, #16]
 8006968:	4313      	orrs	r3, r2
 800696a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006972:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	697a      	ldr	r2, [r7, #20]
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	693a      	ldr	r2, [r7, #16]
 8006982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	621a      	str	r2, [r3, #32]
}
 800698a:	bf00      	nop
 800698c:	371c      	adds	r7, #28
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr

08006996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006996:	b480      	push	{r7}
 8006998:	b085      	sub	sp, #20
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
 800699e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	f043 0307 	orr.w	r3, r3, #7
 80069b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	609a      	str	r2, [r3, #8]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b087      	sub	sp, #28
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	021a      	lsls	r2, r3, #8
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	697a      	ldr	r2, [r7, #20]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	697a      	ldr	r2, [r7, #20]
 80069fe:	609a      	str	r2, [r3, #8]
}
 8006a00:	bf00      	nop
 8006a02:	371c      	adds	r7, #28
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d101      	bne.n	8006a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a20:	2302      	movs	r3, #2
 8006a22:	e05a      	b.n	8006ada <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a21      	ldr	r2, [pc, #132]	; (8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d022      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a70:	d01d      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a1d      	ldr	r2, [pc, #116]	; (8006aec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d018      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1b      	ldr	r2, [pc, #108]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d013      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1a      	ldr	r2, [pc, #104]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d00e      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a18      	ldr	r2, [pc, #96]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d009      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a17      	ldr	r2, [pc, #92]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d004      	beq.n	8006aae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a15      	ldr	r2, [pc, #84]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d10c      	bne.n	8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	68ba      	ldr	r2, [r7, #8]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010000 	.word	0x40010000
 8006aec:	40000400 	.word	0x40000400
 8006af0:	40000800 	.word	0x40000800
 8006af4:	40000c00 	.word	0x40000c00
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40014000 	.word	0x40014000
 8006b00:	40001800 	.word	0x40001800

08006b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e042      	b.n	8006b9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d106      	bne.n	8006b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2200      	movs	r2, #0
 8006b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7fd f9e8 	bl	8003f00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2224      	movs	r2, #36	; 0x24
 8006b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fdbd 	bl	80076c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691a      	ldr	r2, [r3, #16]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	695a      	ldr	r2, [r3, #20]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68da      	ldr	r2, [r3, #12]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2220      	movs	r2, #32
 8006b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af02      	add	r7, sp, #8
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b20      	cmp	r3, #32
 8006bc2:	d175      	bne.n	8006cb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <HAL_UART_Transmit+0x2c>
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d101      	bne.n	8006bd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e06e      	b.n	8006cb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2221      	movs	r2, #33	; 0x21
 8006bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006be2:	f7fd fbaf 	bl	8004344 <HAL_GetTick>
 8006be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	88fa      	ldrh	r2, [r7, #6]
 8006bec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	88fa      	ldrh	r2, [r7, #6]
 8006bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfc:	d108      	bne.n	8006c10 <HAL_UART_Transmit+0x6c>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d104      	bne.n	8006c10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	e003      	b.n	8006c18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c18:	e02e      	b.n	8006c78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	2200      	movs	r2, #0
 8006c22:	2180      	movs	r1, #128	; 0x80
 8006c24:	68f8      	ldr	r0, [r7, #12]
 8006c26:	f000 fb1f 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2220      	movs	r2, #32
 8006c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e03a      	b.n	8006cb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d10b      	bne.n	8006c5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	461a      	mov	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c52:	69bb      	ldr	r3, [r7, #24]
 8006c54:	3302      	adds	r3, #2
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e007      	b.n	8006c6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	781a      	ldrb	r2, [r3, #0]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	3301      	adds	r3, #1
 8006c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	3b01      	subs	r3, #1
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1cb      	bne.n	8006c1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	2140      	movs	r1, #64	; 0x40
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 faeb 	bl	8007268 <UART_WaitOnFlagUntilTimeout>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d005      	beq.n	8006ca4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2220      	movs	r2, #32
 8006c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e006      	b.n	8006cb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006cac:	2300      	movs	r3, #0
 8006cae:	e000      	b.n	8006cb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006cb0:	2302      	movs	r3, #2
  }
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3720      	adds	r7, #32
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}

08006cba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006cba:	b580      	push	{r7, lr}
 8006cbc:	b084      	sub	sp, #16
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	60f8      	str	r0, [r7, #12]
 8006cc2:	60b9      	str	r1, [r7, #8]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b20      	cmp	r3, #32
 8006cd2:	d112      	bne.n	8006cfa <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_UART_Receive_IT+0x26>
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e00b      	b.n	8006cfc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	461a      	mov	r2, r3
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fb12 	bl	800731a <UART_Start_Receive_IT>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	e000      	b.n	8006cfc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006cfa:	2302      	movs	r3, #2
  }
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b0ba      	sub	sp, #232	; 0xe8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	695b      	ldr	r3, [r3, #20]
 8006d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3a:	f003 030f 	and.w	r3, r3, #15
 8006d3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006d42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10f      	bne.n	8006d6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f003 0320 	and.w	r3, r3, #32
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d009      	beq.n	8006d6a <HAL_UART_IRQHandler+0x66>
 8006d56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d003      	beq.n	8006d6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fbf2 	bl	800754c <UART_Receive_IT>
      return;
 8006d68:	e25b      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006d6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 80de 	beq.w	8006f30 <HAL_UART_IRQHandler+0x22c>
 8006d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d106      	bne.n	8006d8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d84:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f000 80d1 	beq.w	8006f30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00b      	beq.n	8006db2 <HAL_UART_IRQHandler+0xae>
 8006d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d005      	beq.n	8006db2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006daa:	f043 0201 	orr.w	r2, r3, #1
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db6:	f003 0304 	and.w	r3, r3, #4
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00b      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xd2>
 8006dbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dce:	f043 0202 	orr.w	r2, r3, #2
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dda:	f003 0302 	and.w	r3, r3, #2
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <HAL_UART_IRQHandler+0xf6>
 8006de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006de6:	f003 0301 	and.w	r3, r3, #1
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d005      	beq.n	8006dfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df2:	f043 0204 	orr.w	r2, r3, #4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d011      	beq.n	8006e2a <HAL_UART_IRQHandler+0x126>
 8006e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d105      	bne.n	8006e1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006e12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d005      	beq.n	8006e2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e22:	f043 0208 	orr.w	r2, r3, #8
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 81f2 	beq.w	8007218 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d008      	beq.n	8006e52 <HAL_UART_IRQHandler+0x14e>
 8006e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e44:	f003 0320 	and.w	r3, r3, #32
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d002      	beq.n	8006e52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fb7d 	bl	800754c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5c:	2b40      	cmp	r3, #64	; 0x40
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6e:	f003 0308 	and.w	r3, r3, #8
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d103      	bne.n	8006e7e <HAL_UART_IRQHandler+0x17a>
 8006e76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d04f      	beq.n	8006f1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa85 	bl	800738e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8e:	2b40      	cmp	r3, #64	; 0x40
 8006e90:	d141      	bne.n	8006f16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ea0:	e853 3f00 	ldrex	r3, [r3]
 8006ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ea8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3314      	adds	r3, #20
 8006eba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006ebe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006eca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ed6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1d9      	bne.n	8006e92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d013      	beq.n	8006f0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	4a7e      	ldr	r2, [pc, #504]	; (80070e4 <HAL_UART_IRQHandler+0x3e0>)
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fd fbd7 	bl	80046a6 <HAL_DMA_Abort_IT>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d016      	beq.n	8006f2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f08:	4610      	mov	r0, r2
 8006f0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f0c:	e00e      	b.n	8006f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 f994 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f14:	e00a      	b.n	8006f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 f990 	bl	800723c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1c:	e006      	b.n	8006f2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f98c 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006f2a:	e175      	b.n	8007218 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	bf00      	nop
    return;
 8006f2e:	e173      	b.n	8007218 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	f040 814f 	bne.w	80071d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f000 8148 	beq.w	80071d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 8141 	beq.w	80071d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f56:	2300      	movs	r3, #0
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f76:	2b40      	cmp	r3, #64	; 0x40
 8006f78:	f040 80b6 	bne.w	80070e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8145 	beq.w	800721c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	f080 813e 	bcs.w	800721c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fa6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fac:	69db      	ldr	r3, [r3, #28]
 8006fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb2:	f000 8088 	beq.w	80070c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	330c      	adds	r3, #12
 8006fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fc4:	e853 3f00 	ldrex	r3, [r3]
 8006fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	330c      	adds	r3, #12
 8006fde:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006fe2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fea:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1d9      	bne.n	8006fb6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	3314      	adds	r3, #20
 8007008:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007012:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007014:	f023 0301 	bic.w	r3, r3, #1
 8007018:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3314      	adds	r3, #20
 8007022:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007026:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800702a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800702e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007032:	e841 2300 	strex	r3, r2, [r1]
 8007036:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007038:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1e1      	bne.n	8007002 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	3314      	adds	r3, #20
 8007044:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007046:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007048:	e853 3f00 	ldrex	r3, [r3]
 800704c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800704e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	3314      	adds	r3, #20
 800705e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007062:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007064:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007068:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e3      	bne.n	800703e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	330c      	adds	r3, #12
 800708a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007096:	f023 0310 	bic.w	r3, r3, #16
 800709a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80070a8:	65ba      	str	r2, [r7, #88]	; 0x58
 80070aa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e3      	bne.n	8007084 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fd fa80 	bl	80045c6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2202      	movs	r2, #2
 80070ca:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	b29b      	uxth	r3, r3
 80070da:	4619      	mov	r1, r3
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8b7 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80070e2:	e09b      	b.n	800721c <HAL_UART_IRQHandler+0x518>
 80070e4:	08007455 	.word	0x08007455
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 808e 	beq.w	8007220 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8089 	beq.w	8007220 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	330c      	adds	r3, #12
 8007114:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007118:	e853 3f00 	ldrex	r3, [r3]
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800711e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007120:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007124:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	330c      	adds	r3, #12
 800712e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007132:	647a      	str	r2, [r7, #68]	; 0x44
 8007134:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007136:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007140:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1e3      	bne.n	800710e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3314      	adds	r3, #20
 800714c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007150:	e853 3f00 	ldrex	r3, [r3]
 8007154:	623b      	str	r3, [r7, #32]
   return(result);
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	f023 0301 	bic.w	r3, r3, #1
 800715c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3314      	adds	r3, #20
 8007166:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800716a:	633a      	str	r2, [r7, #48]	; 0x30
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e3      	bne.n	8007146 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2220      	movs	r2, #32
 8007182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	330c      	adds	r3, #12
 8007192:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	60fb      	str	r3, [r7, #12]
   return(result);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0310 	bic.w	r3, r3, #16
 80071a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	330c      	adds	r3, #12
 80071ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80071b0:	61fa      	str	r2, [r7, #28]
 80071b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b4:	69b9      	ldr	r1, [r7, #24]
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	e841 2300 	strex	r3, r2, [r1]
 80071bc:	617b      	str	r3, [r7, #20]
   return(result);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1e3      	bne.n	800718c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2202      	movs	r2, #2
 80071c8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 f83d 	bl	8007250 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80071d6:	e023      	b.n	8007220 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d009      	beq.n	80071f8 <HAL_UART_IRQHandler+0x4f4>
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d003      	beq.n	80071f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f943 	bl	800747c <UART_Transmit_IT>
    return;
 80071f6:	e014      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d00e      	beq.n	8007222 <HAL_UART_IRQHandler+0x51e>
 8007204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d008      	beq.n	8007222 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 f983 	bl	800751c <UART_EndTransmit_IT>
    return;
 8007216:	e004      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
    return;
 8007218:	bf00      	nop
 800721a:	e002      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
      return;
 800721c:	bf00      	nop
 800721e:	e000      	b.n	8007222 <HAL_UART_IRQHandler+0x51e>
      return;
 8007220:	bf00      	nop
  }
}
 8007222:	37e8      	adds	r7, #232	; 0xe8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	603b      	str	r3, [r7, #0]
 8007274:	4613      	mov	r3, r2
 8007276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007278:	e03b      	b.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d037      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007282:	f7fd f85f 	bl	8004344 <HAL_GetTick>
 8007286:	4602      	mov	r2, r0
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	1ad3      	subs	r3, r2, r3
 800728c:	6a3a      	ldr	r2, [r7, #32]
 800728e:	429a      	cmp	r2, r3
 8007290:	d302      	bcc.n	8007298 <UART_WaitOnFlagUntilTimeout+0x30>
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e03a      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d023      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	2b80      	cmp	r3, #128	; 0x80
 80072ae:	d020      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2b40      	cmp	r3, #64	; 0x40
 80072b4:	d01d      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0308 	and.w	r3, r3, #8
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d116      	bne.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80072c4:	2300      	movs	r3, #0
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	617b      	str	r3, [r7, #20]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f857 	bl	800738e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2208      	movs	r2, #8
 80072e4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e00f      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4013      	ands	r3, r2
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	429a      	cmp	r2, r3
 8007300:	bf0c      	ite	eq
 8007302:	2301      	moveq	r3, #1
 8007304:	2300      	movne	r3, #0
 8007306:	b2db      	uxtb	r3, r3
 8007308:	461a      	mov	r2, r3
 800730a:	79fb      	ldrb	r3, [r7, #7]
 800730c:	429a      	cmp	r2, r3
 800730e:	d0b4      	beq.n	800727a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3718      	adds	r7, #24
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800731a:	b480      	push	{r7}
 800731c:	b085      	sub	sp, #20
 800731e:	af00      	add	r7, sp, #0
 8007320:	60f8      	str	r0, [r7, #12]
 8007322:	60b9      	str	r1, [r7, #8]
 8007324:	4613      	mov	r3, r2
 8007326:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	88fa      	ldrh	r2, [r7, #6]
 8007332:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	88fa      	ldrh	r2, [r7, #6]
 8007338:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2222      	movs	r2, #34	; 0x22
 8007344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d007      	beq.n	8007360 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800735e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	695a      	ldr	r2, [r3, #20]
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68da      	ldr	r2, [r3, #12]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f042 0220 	orr.w	r2, r2, #32
 800737e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800738e:	b480      	push	{r7}
 8007390:	b095      	sub	sp, #84	; 0x54
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	330c      	adds	r3, #12
 800739c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800739e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a0:	e853 3f00 	ldrex	r3, [r3]
 80073a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	330c      	adds	r3, #12
 80073b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80073b6:	643a      	str	r2, [r7, #64]	; 0x40
 80073b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073be:	e841 2300 	strex	r3, r2, [r1]
 80073c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e5      	bne.n	8007396 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	3314      	adds	r3, #20
 80073d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	e853 3f00 	ldrex	r3, [r3]
 80073d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073da:	69fb      	ldr	r3, [r7, #28]
 80073dc:	f023 0301 	bic.w	r3, r3, #1
 80073e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3314      	adds	r3, #20
 80073e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f2:	e841 2300 	strex	r3, r2, [r1]
 80073f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1e5      	bne.n	80073ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	2b01      	cmp	r3, #1
 8007404:	d119      	bne.n	800743a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	330c      	adds	r3, #12
 800740c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	e853 3f00 	ldrex	r3, [r3]
 8007414:	60bb      	str	r3, [r7, #8]
   return(result);
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	f023 0310 	bic.w	r3, r3, #16
 800741c:	647b      	str	r3, [r7, #68]	; 0x44
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	330c      	adds	r3, #12
 8007424:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007426:	61ba      	str	r2, [r7, #24]
 8007428:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742a:	6979      	ldr	r1, [r7, #20]
 800742c:	69ba      	ldr	r2, [r7, #24]
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	613b      	str	r3, [r7, #16]
   return(result);
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e5      	bne.n	8007406 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007448:	bf00      	nop
 800744a:	3754      	adds	r7, #84	; 0x54
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b084      	sub	sp, #16
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f7ff fee4 	bl	800723c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007474:	bf00      	nop
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}

0800747c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b21      	cmp	r3, #33	; 0x21
 800748e:	d13e      	bne.n	800750e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007498:	d114      	bne.n	80074c4 <UART_Transmit_IT+0x48>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d110      	bne.n	80074c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	881b      	ldrh	r3, [r3, #0]
 80074ac:	461a      	mov	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	1c9a      	adds	r2, r3, #2
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	621a      	str	r2, [r3, #32]
 80074c2:	e008      	b.n	80074d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	1c59      	adds	r1, r3, #1
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	6211      	str	r1, [r2, #32]
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074da:	b29b      	uxth	r3, r3
 80074dc:	3b01      	subs	r3, #1
 80074de:	b29b      	uxth	r3, r3
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	4619      	mov	r1, r3
 80074e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10f      	bne.n	800750a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80074f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007508:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800750a:	2300      	movs	r3, #0
 800750c:	e000      	b.n	8007510 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800750e:	2302      	movs	r3, #2
  }
}
 8007510:	4618      	mov	r0, r3
 8007512:	3714      	adds	r7, #20
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr

0800751c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68da      	ldr	r2, [r3, #12]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007532:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff fe73 	bl	8007228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b08c      	sub	sp, #48	; 0x30
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b22      	cmp	r3, #34	; 0x22
 800755e:	f040 80ae 	bne.w	80076be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800756a:	d117      	bne.n	800759c <UART_Receive_IT+0x50>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d113      	bne.n	800759c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	b29b      	uxth	r3, r3
 8007586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800758a:	b29a      	uxth	r2, r3
 800758c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	1c9a      	adds	r2, r3, #2
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	629a      	str	r2, [r3, #40]	; 0x28
 800759a:	e026      	b.n	80075ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	d007      	beq.n	80075c0 <UART_Receive_IT+0x74>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <UART_Receive_IT+0x82>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	691b      	ldr	r3, [r3, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d106      	bne.n	80075ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ca:	701a      	strb	r2, [r3, #0]
 80075cc:	e008      	b.n	80075e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075da:	b2da      	uxtb	r2, r3
 80075dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e4:	1c5a      	adds	r2, r3, #1
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	4619      	mov	r1, r3
 80075f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d15d      	bne.n	80076ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	68da      	ldr	r2, [r3, #12]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0220 	bic.w	r2, r2, #32
 800760c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800761c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	695a      	ldr	r2, [r3, #20]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0201 	bic.w	r2, r2, #1
 800762c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2220      	movs	r2, #32
 8007632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007640:	2b01      	cmp	r3, #1
 8007642:	d135      	bne.n	80076b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2200      	movs	r2, #0
 8007648:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	613b      	str	r3, [r7, #16]
   return(result);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f023 0310 	bic.w	r3, r3, #16
 8007660:	627b      	str	r3, [r7, #36]	; 0x24
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	330c      	adds	r3, #12
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	623a      	str	r2, [r7, #32]
 800766c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766e:	69f9      	ldr	r1, [r7, #28]
 8007670:	6a3a      	ldr	r2, [r7, #32]
 8007672:	e841 2300 	strex	r3, r2, [r1]
 8007676:	61bb      	str	r3, [r7, #24]
   return(result);
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1e5      	bne.n	800764a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b10      	cmp	r3, #16
 800768a:	d10a      	bne.n	80076a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800768c:	2300      	movs	r3, #0
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	60fb      	str	r3, [r7, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80076a6:	4619      	mov	r1, r3
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f7ff fdd1 	bl	8007250 <HAL_UARTEx_RxEventCallback>
 80076ae:	e002      	b.n	80076b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7fb fbc3 	bl	8002e3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	e002      	b.n	80076c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80076ba:	2300      	movs	r3, #0
 80076bc:	e000      	b.n	80076c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80076be:	2302      	movs	r3, #2
  }
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3730      	adds	r7, #48	; 0x30
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076cc:	b0c0      	sub	sp, #256	; 0x100
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80076e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e4:	68d9      	ldr	r1, [r3, #12]
 80076e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	ea40 0301 	orr.w	r3, r0, r1
 80076f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80076f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	431a      	orrs	r2, r3
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007704:	695b      	ldr	r3, [r3, #20]
 8007706:	431a      	orrs	r2, r3
 8007708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007720:	f021 010c 	bic.w	r1, r1, #12
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800772e:	430b      	orrs	r3, r1
 8007730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	695b      	ldr	r3, [r3, #20]
 800773a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800773e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007742:	6999      	ldr	r1, [r3, #24]
 8007744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	ea40 0301 	orr.w	r3, r0, r1
 800774e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	4b8f      	ldr	r3, [pc, #572]	; (8007994 <UART_SetConfig+0x2cc>)
 8007758:	429a      	cmp	r2, r3
 800775a:	d005      	beq.n	8007768 <UART_SetConfig+0xa0>
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b8d      	ldr	r3, [pc, #564]	; (8007998 <UART_SetConfig+0x2d0>)
 8007764:	429a      	cmp	r2, r3
 8007766:	d104      	bne.n	8007772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007768:	f7fe fa98 	bl	8005c9c <HAL_RCC_GetPCLK2Freq>
 800776c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007770:	e003      	b.n	800777a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007772:	f7fe fa7f 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8007776:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777e:	69db      	ldr	r3, [r3, #28]
 8007780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007784:	f040 810c 	bne.w	80079a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800778c:	2200      	movs	r2, #0
 800778e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007792:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800779a:	4622      	mov	r2, r4
 800779c:	462b      	mov	r3, r5
 800779e:	1891      	adds	r1, r2, r2
 80077a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80077a2:	415b      	adcs	r3, r3
 80077a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80077aa:	4621      	mov	r1, r4
 80077ac:	eb12 0801 	adds.w	r8, r2, r1
 80077b0:	4629      	mov	r1, r5
 80077b2:	eb43 0901 	adc.w	r9, r3, r1
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	f04f 0300 	mov.w	r3, #0
 80077be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077ca:	4690      	mov	r8, r2
 80077cc:	4699      	mov	r9, r3
 80077ce:	4623      	mov	r3, r4
 80077d0:	eb18 0303 	adds.w	r3, r8, r3
 80077d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077d8:	462b      	mov	r3, r5
 80077da:	eb49 0303 	adc.w	r3, r9, r3
 80077de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80077e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80077ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80077f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80077f6:	460b      	mov	r3, r1
 80077f8:	18db      	adds	r3, r3, r3
 80077fa:	653b      	str	r3, [r7, #80]	; 0x50
 80077fc:	4613      	mov	r3, r2
 80077fe:	eb42 0303 	adc.w	r3, r2, r3
 8007802:	657b      	str	r3, [r7, #84]	; 0x54
 8007804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800780c:	f7f9 faa4 	bl	8000d58 <__aeabi_uldivmod>
 8007810:	4602      	mov	r2, r0
 8007812:	460b      	mov	r3, r1
 8007814:	4b61      	ldr	r3, [pc, #388]	; (800799c <UART_SetConfig+0x2d4>)
 8007816:	fba3 2302 	umull	r2, r3, r3, r2
 800781a:	095b      	lsrs	r3, r3, #5
 800781c:	011c      	lsls	r4, r3, #4
 800781e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007822:	2200      	movs	r2, #0
 8007824:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007828:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800782c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	1891      	adds	r1, r2, r2
 8007836:	64b9      	str	r1, [r7, #72]	; 0x48
 8007838:	415b      	adcs	r3, r3
 800783a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800783c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007840:	4641      	mov	r1, r8
 8007842:	eb12 0a01 	adds.w	sl, r2, r1
 8007846:	4649      	mov	r1, r9
 8007848:	eb43 0b01 	adc.w	fp, r3, r1
 800784c:	f04f 0200 	mov.w	r2, #0
 8007850:	f04f 0300 	mov.w	r3, #0
 8007854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800785c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007860:	4692      	mov	sl, r2
 8007862:	469b      	mov	fp, r3
 8007864:	4643      	mov	r3, r8
 8007866:	eb1a 0303 	adds.w	r3, sl, r3
 800786a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800786e:	464b      	mov	r3, r9
 8007870:	eb4b 0303 	adc.w	r3, fp, r3
 8007874:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007884:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800788c:	460b      	mov	r3, r1
 800788e:	18db      	adds	r3, r3, r3
 8007890:	643b      	str	r3, [r7, #64]	; 0x40
 8007892:	4613      	mov	r3, r2
 8007894:	eb42 0303 	adc.w	r3, r2, r3
 8007898:	647b      	str	r3, [r7, #68]	; 0x44
 800789a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800789e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80078a2:	f7f9 fa59 	bl	8000d58 <__aeabi_uldivmod>
 80078a6:	4602      	mov	r2, r0
 80078a8:	460b      	mov	r3, r1
 80078aa:	4611      	mov	r1, r2
 80078ac:	4b3b      	ldr	r3, [pc, #236]	; (800799c <UART_SetConfig+0x2d4>)
 80078ae:	fba3 2301 	umull	r2, r3, r3, r1
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	2264      	movs	r2, #100	; 0x64
 80078b6:	fb02 f303 	mul.w	r3, r2, r3
 80078ba:	1acb      	subs	r3, r1, r3
 80078bc:	00db      	lsls	r3, r3, #3
 80078be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80078c2:	4b36      	ldr	r3, [pc, #216]	; (800799c <UART_SetConfig+0x2d4>)
 80078c4:	fba3 2302 	umull	r2, r3, r3, r2
 80078c8:	095b      	lsrs	r3, r3, #5
 80078ca:	005b      	lsls	r3, r3, #1
 80078cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80078d0:	441c      	add	r4, r3
 80078d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078d6:	2200      	movs	r2, #0
 80078d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80078e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80078e4:	4642      	mov	r2, r8
 80078e6:	464b      	mov	r3, r9
 80078e8:	1891      	adds	r1, r2, r2
 80078ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80078ec:	415b      	adcs	r3, r3
 80078ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078f4:	4641      	mov	r1, r8
 80078f6:	1851      	adds	r1, r2, r1
 80078f8:	6339      	str	r1, [r7, #48]	; 0x30
 80078fa:	4649      	mov	r1, r9
 80078fc:	414b      	adcs	r3, r1
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800790c:	4659      	mov	r1, fp
 800790e:	00cb      	lsls	r3, r1, #3
 8007910:	4651      	mov	r1, sl
 8007912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007916:	4651      	mov	r1, sl
 8007918:	00ca      	lsls	r2, r1, #3
 800791a:	4610      	mov	r0, r2
 800791c:	4619      	mov	r1, r3
 800791e:	4603      	mov	r3, r0
 8007920:	4642      	mov	r2, r8
 8007922:	189b      	adds	r3, r3, r2
 8007924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007928:	464b      	mov	r3, r9
 800792a:	460a      	mov	r2, r1
 800792c:	eb42 0303 	adc.w	r3, r2, r3
 8007930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007940:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007948:	460b      	mov	r3, r1
 800794a:	18db      	adds	r3, r3, r3
 800794c:	62bb      	str	r3, [r7, #40]	; 0x28
 800794e:	4613      	mov	r3, r2
 8007950:	eb42 0303 	adc.w	r3, r2, r3
 8007954:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800795a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800795e:	f7f9 f9fb 	bl	8000d58 <__aeabi_uldivmod>
 8007962:	4602      	mov	r2, r0
 8007964:	460b      	mov	r3, r1
 8007966:	4b0d      	ldr	r3, [pc, #52]	; (800799c <UART_SetConfig+0x2d4>)
 8007968:	fba3 1302 	umull	r1, r3, r3, r2
 800796c:	095b      	lsrs	r3, r3, #5
 800796e:	2164      	movs	r1, #100	; 0x64
 8007970:	fb01 f303 	mul.w	r3, r1, r3
 8007974:	1ad3      	subs	r3, r2, r3
 8007976:	00db      	lsls	r3, r3, #3
 8007978:	3332      	adds	r3, #50	; 0x32
 800797a:	4a08      	ldr	r2, [pc, #32]	; (800799c <UART_SetConfig+0x2d4>)
 800797c:	fba2 2303 	umull	r2, r3, r2, r3
 8007980:	095b      	lsrs	r3, r3, #5
 8007982:	f003 0207 	and.w	r2, r3, #7
 8007986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4422      	add	r2, r4
 800798e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007990:	e106      	b.n	8007ba0 <UART_SetConfig+0x4d8>
 8007992:	bf00      	nop
 8007994:	40011000 	.word	0x40011000
 8007998:	40011400 	.word	0x40011400
 800799c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079a4:	2200      	movs	r2, #0
 80079a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80079aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80079ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80079b2:	4642      	mov	r2, r8
 80079b4:	464b      	mov	r3, r9
 80079b6:	1891      	adds	r1, r2, r2
 80079b8:	6239      	str	r1, [r7, #32]
 80079ba:	415b      	adcs	r3, r3
 80079bc:	627b      	str	r3, [r7, #36]	; 0x24
 80079be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079c2:	4641      	mov	r1, r8
 80079c4:	1854      	adds	r4, r2, r1
 80079c6:	4649      	mov	r1, r9
 80079c8:	eb43 0501 	adc.w	r5, r3, r1
 80079cc:	f04f 0200 	mov.w	r2, #0
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	00eb      	lsls	r3, r5, #3
 80079d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079da:	00e2      	lsls	r2, r4, #3
 80079dc:	4614      	mov	r4, r2
 80079de:	461d      	mov	r5, r3
 80079e0:	4643      	mov	r3, r8
 80079e2:	18e3      	adds	r3, r4, r3
 80079e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80079e8:	464b      	mov	r3, r9
 80079ea:	eb45 0303 	adc.w	r3, r5, r3
 80079ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80079f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80079fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a02:	f04f 0200 	mov.w	r2, #0
 8007a06:	f04f 0300 	mov.w	r3, #0
 8007a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007a0e:	4629      	mov	r1, r5
 8007a10:	008b      	lsls	r3, r1, #2
 8007a12:	4621      	mov	r1, r4
 8007a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a18:	4621      	mov	r1, r4
 8007a1a:	008a      	lsls	r2, r1, #2
 8007a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007a20:	f7f9 f99a 	bl	8000d58 <__aeabi_uldivmod>
 8007a24:	4602      	mov	r2, r0
 8007a26:	460b      	mov	r3, r1
 8007a28:	4b60      	ldr	r3, [pc, #384]	; (8007bac <UART_SetConfig+0x4e4>)
 8007a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8007a2e:	095b      	lsrs	r3, r3, #5
 8007a30:	011c      	lsls	r4, r3, #4
 8007a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007a3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	1891      	adds	r1, r2, r2
 8007a4a:	61b9      	str	r1, [r7, #24]
 8007a4c:	415b      	adcs	r3, r3
 8007a4e:	61fb      	str	r3, [r7, #28]
 8007a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a54:	4641      	mov	r1, r8
 8007a56:	1851      	adds	r1, r2, r1
 8007a58:	6139      	str	r1, [r7, #16]
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	414b      	adcs	r3, r1
 8007a5e:	617b      	str	r3, [r7, #20]
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	00cb      	lsls	r3, r1, #3
 8007a70:	4651      	mov	r1, sl
 8007a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a76:	4651      	mov	r1, sl
 8007a78:	00ca      	lsls	r2, r1, #3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4642      	mov	r2, r8
 8007a82:	189b      	adds	r3, r3, r2
 8007a84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007a88:	464b      	mov	r3, r9
 8007a8a:	460a      	mov	r2, r1
 8007a8c:	eb42 0303 	adc.w	r3, r2, r3
 8007a90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	67bb      	str	r3, [r7, #120]	; 0x78
 8007a9e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007aa0:	f04f 0200 	mov.w	r2, #0
 8007aa4:	f04f 0300 	mov.w	r3, #0
 8007aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007aac:	4649      	mov	r1, r9
 8007aae:	008b      	lsls	r3, r1, #2
 8007ab0:	4641      	mov	r1, r8
 8007ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ab6:	4641      	mov	r1, r8
 8007ab8:	008a      	lsls	r2, r1, #2
 8007aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007abe:	f7f9 f94b 	bl	8000d58 <__aeabi_uldivmod>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	4b38      	ldr	r3, [pc, #224]	; (8007bac <UART_SetConfig+0x4e4>)
 8007aca:	fba3 2301 	umull	r2, r3, r3, r1
 8007ace:	095b      	lsrs	r3, r3, #5
 8007ad0:	2264      	movs	r2, #100	; 0x64
 8007ad2:	fb02 f303 	mul.w	r3, r2, r3
 8007ad6:	1acb      	subs	r3, r1, r3
 8007ad8:	011b      	lsls	r3, r3, #4
 8007ada:	3332      	adds	r3, #50	; 0x32
 8007adc:	4a33      	ldr	r2, [pc, #204]	; (8007bac <UART_SetConfig+0x4e4>)
 8007ade:	fba2 2303 	umull	r2, r3, r2, r3
 8007ae2:	095b      	lsrs	r3, r3, #5
 8007ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ae8:	441c      	add	r4, r3
 8007aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007aee:	2200      	movs	r2, #0
 8007af0:	673b      	str	r3, [r7, #112]	; 0x70
 8007af2:	677a      	str	r2, [r7, #116]	; 0x74
 8007af4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007af8:	4642      	mov	r2, r8
 8007afa:	464b      	mov	r3, r9
 8007afc:	1891      	adds	r1, r2, r2
 8007afe:	60b9      	str	r1, [r7, #8]
 8007b00:	415b      	adcs	r3, r3
 8007b02:	60fb      	str	r3, [r7, #12]
 8007b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b08:	4641      	mov	r1, r8
 8007b0a:	1851      	adds	r1, r2, r1
 8007b0c:	6039      	str	r1, [r7, #0]
 8007b0e:	4649      	mov	r1, r9
 8007b10:	414b      	adcs	r3, r1
 8007b12:	607b      	str	r3, [r7, #4]
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	f04f 0300 	mov.w	r3, #0
 8007b1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b20:	4659      	mov	r1, fp
 8007b22:	00cb      	lsls	r3, r1, #3
 8007b24:	4651      	mov	r1, sl
 8007b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b2a:	4651      	mov	r1, sl
 8007b2c:	00ca      	lsls	r2, r1, #3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	4619      	mov	r1, r3
 8007b32:	4603      	mov	r3, r0
 8007b34:	4642      	mov	r2, r8
 8007b36:	189b      	adds	r3, r3, r2
 8007b38:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b3a:	464b      	mov	r3, r9
 8007b3c:	460a      	mov	r2, r1
 8007b3e:	eb42 0303 	adc.w	r3, r2, r3
 8007b42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	663b      	str	r3, [r7, #96]	; 0x60
 8007b4e:	667a      	str	r2, [r7, #100]	; 0x64
 8007b50:	f04f 0200 	mov.w	r2, #0
 8007b54:	f04f 0300 	mov.w	r3, #0
 8007b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	008b      	lsls	r3, r1, #2
 8007b60:	4641      	mov	r1, r8
 8007b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b66:	4641      	mov	r1, r8
 8007b68:	008a      	lsls	r2, r1, #2
 8007b6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007b6e:	f7f9 f8f3 	bl	8000d58 <__aeabi_uldivmod>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4b0d      	ldr	r3, [pc, #52]	; (8007bac <UART_SetConfig+0x4e4>)
 8007b78:	fba3 1302 	umull	r1, r3, r3, r2
 8007b7c:	095b      	lsrs	r3, r3, #5
 8007b7e:	2164      	movs	r1, #100	; 0x64
 8007b80:	fb01 f303 	mul.w	r3, r1, r3
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	011b      	lsls	r3, r3, #4
 8007b88:	3332      	adds	r3, #50	; 0x32
 8007b8a:	4a08      	ldr	r2, [pc, #32]	; (8007bac <UART_SetConfig+0x4e4>)
 8007b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b90:	095b      	lsrs	r3, r3, #5
 8007b92:	f003 020f 	and.w	r2, r3, #15
 8007b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4422      	add	r2, r4
 8007b9e:	609a      	str	r2, [r3, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bac:	51eb851f 	.word	0x51eb851f

08007bb0 <sulp>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	460d      	mov	r5, r1
 8007bb6:	ec45 4b10 	vmov	d0, r4, r5
 8007bba:	4616      	mov	r6, r2
 8007bbc:	f001 ff8a 	bl	8009ad4 <__ulp>
 8007bc0:	ec51 0b10 	vmov	r0, r1, d0
 8007bc4:	b17e      	cbz	r6, 8007be6 <sulp+0x36>
 8007bc6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007bca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	dd09      	ble.n	8007be6 <sulp+0x36>
 8007bd2:	051b      	lsls	r3, r3, #20
 8007bd4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007bd8:	2400      	movs	r4, #0
 8007bda:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007bde:	4622      	mov	r2, r4
 8007be0:	462b      	mov	r3, r5
 8007be2:	f7f8 fd21 	bl	8000628 <__aeabi_dmul>
 8007be6:	bd70      	pop	{r4, r5, r6, pc}

08007be8 <_strtod_l>:
 8007be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	ed2d 8b02 	vpush	{d8}
 8007bf0:	b09b      	sub	sp, #108	; 0x6c
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	9213      	str	r2, [sp, #76]	; 0x4c
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	9216      	str	r2, [sp, #88]	; 0x58
 8007bfa:	460d      	mov	r5, r1
 8007bfc:	f04f 0800 	mov.w	r8, #0
 8007c00:	f04f 0900 	mov.w	r9, #0
 8007c04:	460a      	mov	r2, r1
 8007c06:	9215      	str	r2, [sp, #84]	; 0x54
 8007c08:	7811      	ldrb	r1, [r2, #0]
 8007c0a:	292b      	cmp	r1, #43	; 0x2b
 8007c0c:	d04c      	beq.n	8007ca8 <_strtod_l+0xc0>
 8007c0e:	d83a      	bhi.n	8007c86 <_strtod_l+0x9e>
 8007c10:	290d      	cmp	r1, #13
 8007c12:	d834      	bhi.n	8007c7e <_strtod_l+0x96>
 8007c14:	2908      	cmp	r1, #8
 8007c16:	d834      	bhi.n	8007c82 <_strtod_l+0x9a>
 8007c18:	2900      	cmp	r1, #0
 8007c1a:	d03d      	beq.n	8007c98 <_strtod_l+0xb0>
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	920a      	str	r2, [sp, #40]	; 0x28
 8007c20:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8007c22:	7832      	ldrb	r2, [r6, #0]
 8007c24:	2a30      	cmp	r2, #48	; 0x30
 8007c26:	f040 80b4 	bne.w	8007d92 <_strtod_l+0x1aa>
 8007c2a:	7872      	ldrb	r2, [r6, #1]
 8007c2c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007c30:	2a58      	cmp	r2, #88	; 0x58
 8007c32:	d170      	bne.n	8007d16 <_strtod_l+0x12e>
 8007c34:	9302      	str	r3, [sp, #8]
 8007c36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c38:	9301      	str	r3, [sp, #4]
 8007c3a:	ab16      	add	r3, sp, #88	; 0x58
 8007c3c:	9300      	str	r3, [sp, #0]
 8007c3e:	4a8e      	ldr	r2, [pc, #568]	; (8007e78 <_strtod_l+0x290>)
 8007c40:	ab17      	add	r3, sp, #92	; 0x5c
 8007c42:	a915      	add	r1, sp, #84	; 0x54
 8007c44:	4620      	mov	r0, r4
 8007c46:	f001 f82b 	bl	8008ca0 <__gethex>
 8007c4a:	f010 070f 	ands.w	r7, r0, #15
 8007c4e:	4605      	mov	r5, r0
 8007c50:	d005      	beq.n	8007c5e <_strtod_l+0x76>
 8007c52:	2f06      	cmp	r7, #6
 8007c54:	d12a      	bne.n	8007cac <_strtod_l+0xc4>
 8007c56:	3601      	adds	r6, #1
 8007c58:	2300      	movs	r3, #0
 8007c5a:	9615      	str	r6, [sp, #84]	; 0x54
 8007c5c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 857f 	bne.w	8008764 <_strtod_l+0xb7c>
 8007c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c68:	b1db      	cbz	r3, 8007ca2 <_strtod_l+0xba>
 8007c6a:	4642      	mov	r2, r8
 8007c6c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007c70:	ec43 2b10 	vmov	d0, r2, r3
 8007c74:	b01b      	add	sp, #108	; 0x6c
 8007c76:	ecbd 8b02 	vpop	{d8}
 8007c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c7e:	2920      	cmp	r1, #32
 8007c80:	d1cc      	bne.n	8007c1c <_strtod_l+0x34>
 8007c82:	3201      	adds	r2, #1
 8007c84:	e7bf      	b.n	8007c06 <_strtod_l+0x1e>
 8007c86:	292d      	cmp	r1, #45	; 0x2d
 8007c88:	d1c8      	bne.n	8007c1c <_strtod_l+0x34>
 8007c8a:	2101      	movs	r1, #1
 8007c8c:	910a      	str	r1, [sp, #40]	; 0x28
 8007c8e:	1c51      	adds	r1, r2, #1
 8007c90:	9115      	str	r1, [sp, #84]	; 0x54
 8007c92:	7852      	ldrb	r2, [r2, #1]
 8007c94:	2a00      	cmp	r2, #0
 8007c96:	d1c3      	bne.n	8007c20 <_strtod_l+0x38>
 8007c98:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007c9a:	9515      	str	r5, [sp, #84]	; 0x54
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f040 855f 	bne.w	8008760 <_strtod_l+0xb78>
 8007ca2:	4642      	mov	r2, r8
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	e7e3      	b.n	8007c70 <_strtod_l+0x88>
 8007ca8:	2100      	movs	r1, #0
 8007caa:	e7ef      	b.n	8007c8c <_strtod_l+0xa4>
 8007cac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007cae:	b13a      	cbz	r2, 8007cc0 <_strtod_l+0xd8>
 8007cb0:	2135      	movs	r1, #53	; 0x35
 8007cb2:	a818      	add	r0, sp, #96	; 0x60
 8007cb4:	f002 f80b 	bl	8009cce <__copybits>
 8007cb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f001 fbde 	bl	800947c <_Bfree>
 8007cc0:	3f01      	subs	r7, #1
 8007cc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cc4:	2f04      	cmp	r7, #4
 8007cc6:	d806      	bhi.n	8007cd6 <_strtod_l+0xee>
 8007cc8:	e8df f007 	tbb	[pc, r7]
 8007ccc:	201d0314 	.word	0x201d0314
 8007cd0:	14          	.byte	0x14
 8007cd1:	00          	.byte	0x00
 8007cd2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007cd6:	05e9      	lsls	r1, r5, #23
 8007cd8:	bf48      	it	mi
 8007cda:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007cde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ce2:	0d1b      	lsrs	r3, r3, #20
 8007ce4:	051b      	lsls	r3, r3, #20
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1b9      	bne.n	8007c5e <_strtod_l+0x76>
 8007cea:	f000 fedf 	bl	8008aac <__errno>
 8007cee:	2322      	movs	r3, #34	; 0x22
 8007cf0:	6003      	str	r3, [r0, #0]
 8007cf2:	e7b4      	b.n	8007c5e <_strtod_l+0x76>
 8007cf4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007cf8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007cfc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007d00:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007d04:	e7e7      	b.n	8007cd6 <_strtod_l+0xee>
 8007d06:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007e80 <_strtod_l+0x298>
 8007d0a:	e7e4      	b.n	8007cd6 <_strtod_l+0xee>
 8007d0c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007d10:	f04f 38ff 	mov.w	r8, #4294967295
 8007d14:	e7df      	b.n	8007cd6 <_strtod_l+0xee>
 8007d16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d18:	1c5a      	adds	r2, r3, #1
 8007d1a:	9215      	str	r2, [sp, #84]	; 0x54
 8007d1c:	785b      	ldrb	r3, [r3, #1]
 8007d1e:	2b30      	cmp	r3, #48	; 0x30
 8007d20:	d0f9      	beq.n	8007d16 <_strtod_l+0x12e>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d09b      	beq.n	8007c5e <_strtod_l+0x76>
 8007d26:	2301      	movs	r3, #1
 8007d28:	f04f 0a00 	mov.w	sl, #0
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d30:	930b      	str	r3, [sp, #44]	; 0x2c
 8007d32:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007d36:	46d3      	mov	fp, sl
 8007d38:	220a      	movs	r2, #10
 8007d3a:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007d3c:	7806      	ldrb	r6, [r0, #0]
 8007d3e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007d42:	b2d9      	uxtb	r1, r3
 8007d44:	2909      	cmp	r1, #9
 8007d46:	d926      	bls.n	8007d96 <_strtod_l+0x1ae>
 8007d48:	494c      	ldr	r1, [pc, #304]	; (8007e7c <_strtod_l+0x294>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	f000 fe55 	bl	80089fa <strncmp>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d030      	beq.n	8007db6 <_strtod_l+0x1ce>
 8007d54:	2000      	movs	r0, #0
 8007d56:	4632      	mov	r2, r6
 8007d58:	9005      	str	r0, [sp, #20]
 8007d5a:	465e      	mov	r6, fp
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2a65      	cmp	r2, #101	; 0x65
 8007d60:	d001      	beq.n	8007d66 <_strtod_l+0x17e>
 8007d62:	2a45      	cmp	r2, #69	; 0x45
 8007d64:	d113      	bne.n	8007d8e <_strtod_l+0x1a6>
 8007d66:	b91e      	cbnz	r6, 8007d70 <_strtod_l+0x188>
 8007d68:	9a04      	ldr	r2, [sp, #16]
 8007d6a:	4302      	orrs	r2, r0
 8007d6c:	d094      	beq.n	8007c98 <_strtod_l+0xb0>
 8007d6e:	2600      	movs	r6, #0
 8007d70:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007d72:	1c6a      	adds	r2, r5, #1
 8007d74:	9215      	str	r2, [sp, #84]	; 0x54
 8007d76:	786a      	ldrb	r2, [r5, #1]
 8007d78:	2a2b      	cmp	r2, #43	; 0x2b
 8007d7a:	d074      	beq.n	8007e66 <_strtod_l+0x27e>
 8007d7c:	2a2d      	cmp	r2, #45	; 0x2d
 8007d7e:	d078      	beq.n	8007e72 <_strtod_l+0x28a>
 8007d80:	f04f 0c00 	mov.w	ip, #0
 8007d84:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007d88:	2909      	cmp	r1, #9
 8007d8a:	d97f      	bls.n	8007e8c <_strtod_l+0x2a4>
 8007d8c:	9515      	str	r5, [sp, #84]	; 0x54
 8007d8e:	2700      	movs	r7, #0
 8007d90:	e09e      	b.n	8007ed0 <_strtod_l+0x2e8>
 8007d92:	2300      	movs	r3, #0
 8007d94:	e7c8      	b.n	8007d28 <_strtod_l+0x140>
 8007d96:	f1bb 0f08 	cmp.w	fp, #8
 8007d9a:	bfd8      	it	le
 8007d9c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007d9e:	f100 0001 	add.w	r0, r0, #1
 8007da2:	bfda      	itte	le
 8007da4:	fb02 3301 	mlale	r3, r2, r1, r3
 8007da8:	9309      	strle	r3, [sp, #36]	; 0x24
 8007daa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007dae:	f10b 0b01 	add.w	fp, fp, #1
 8007db2:	9015      	str	r0, [sp, #84]	; 0x54
 8007db4:	e7c1      	b.n	8007d3a <_strtod_l+0x152>
 8007db6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	9215      	str	r2, [sp, #84]	; 0x54
 8007dbc:	785a      	ldrb	r2, [r3, #1]
 8007dbe:	f1bb 0f00 	cmp.w	fp, #0
 8007dc2:	d037      	beq.n	8007e34 <_strtod_l+0x24c>
 8007dc4:	9005      	str	r0, [sp, #20]
 8007dc6:	465e      	mov	r6, fp
 8007dc8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d912      	bls.n	8007df6 <_strtod_l+0x20e>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e7c4      	b.n	8007d5e <_strtod_l+0x176>
 8007dd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	9215      	str	r2, [sp, #84]	; 0x54
 8007dda:	785a      	ldrb	r2, [r3, #1]
 8007ddc:	3001      	adds	r0, #1
 8007dde:	2a30      	cmp	r2, #48	; 0x30
 8007de0:	d0f8      	beq.n	8007dd4 <_strtod_l+0x1ec>
 8007de2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	f200 84c1 	bhi.w	800876e <_strtod_l+0xb86>
 8007dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dee:	9005      	str	r0, [sp, #20]
 8007df0:	2000      	movs	r0, #0
 8007df2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007df4:	4606      	mov	r6, r0
 8007df6:	3a30      	subs	r2, #48	; 0x30
 8007df8:	f100 0301 	add.w	r3, r0, #1
 8007dfc:	d014      	beq.n	8007e28 <_strtod_l+0x240>
 8007dfe:	9905      	ldr	r1, [sp, #20]
 8007e00:	4419      	add	r1, r3
 8007e02:	9105      	str	r1, [sp, #20]
 8007e04:	4633      	mov	r3, r6
 8007e06:	eb00 0c06 	add.w	ip, r0, r6
 8007e0a:	210a      	movs	r1, #10
 8007e0c:	4563      	cmp	r3, ip
 8007e0e:	d113      	bne.n	8007e38 <_strtod_l+0x250>
 8007e10:	1833      	adds	r3, r6, r0
 8007e12:	2b08      	cmp	r3, #8
 8007e14:	f106 0601 	add.w	r6, r6, #1
 8007e18:	4406      	add	r6, r0
 8007e1a:	dc1a      	bgt.n	8007e52 <_strtod_l+0x26a>
 8007e1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e1e:	230a      	movs	r3, #10
 8007e20:	fb03 2301 	mla	r3, r3, r1, r2
 8007e24:	9309      	str	r3, [sp, #36]	; 0x24
 8007e26:	2300      	movs	r3, #0
 8007e28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e2a:	1c51      	adds	r1, r2, #1
 8007e2c:	9115      	str	r1, [sp, #84]	; 0x54
 8007e2e:	7852      	ldrb	r2, [r2, #1]
 8007e30:	4618      	mov	r0, r3
 8007e32:	e7c9      	b.n	8007dc8 <_strtod_l+0x1e0>
 8007e34:	4658      	mov	r0, fp
 8007e36:	e7d2      	b.n	8007dde <_strtod_l+0x1f6>
 8007e38:	2b08      	cmp	r3, #8
 8007e3a:	f103 0301 	add.w	r3, r3, #1
 8007e3e:	dc03      	bgt.n	8007e48 <_strtod_l+0x260>
 8007e40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007e42:	434f      	muls	r7, r1
 8007e44:	9709      	str	r7, [sp, #36]	; 0x24
 8007e46:	e7e1      	b.n	8007e0c <_strtod_l+0x224>
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	bfd8      	it	le
 8007e4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007e50:	e7dc      	b.n	8007e0c <_strtod_l+0x224>
 8007e52:	2e10      	cmp	r6, #16
 8007e54:	bfdc      	itt	le
 8007e56:	230a      	movle	r3, #10
 8007e58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007e5c:	e7e3      	b.n	8007e26 <_strtod_l+0x23e>
 8007e5e:	2300      	movs	r3, #0
 8007e60:	9305      	str	r3, [sp, #20]
 8007e62:	2301      	movs	r3, #1
 8007e64:	e780      	b.n	8007d68 <_strtod_l+0x180>
 8007e66:	f04f 0c00 	mov.w	ip, #0
 8007e6a:	1caa      	adds	r2, r5, #2
 8007e6c:	9215      	str	r2, [sp, #84]	; 0x54
 8007e6e:	78aa      	ldrb	r2, [r5, #2]
 8007e70:	e788      	b.n	8007d84 <_strtod_l+0x19c>
 8007e72:	f04f 0c01 	mov.w	ip, #1
 8007e76:	e7f8      	b.n	8007e6a <_strtod_l+0x282>
 8007e78:	0800bc08 	.word	0x0800bc08
 8007e7c:	0800bbf8 	.word	0x0800bbf8
 8007e80:	7ff00000 	.word	0x7ff00000
 8007e84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007e86:	1c51      	adds	r1, r2, #1
 8007e88:	9115      	str	r1, [sp, #84]	; 0x54
 8007e8a:	7852      	ldrb	r2, [r2, #1]
 8007e8c:	2a30      	cmp	r2, #48	; 0x30
 8007e8e:	d0f9      	beq.n	8007e84 <_strtod_l+0x29c>
 8007e90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007e94:	2908      	cmp	r1, #8
 8007e96:	f63f af7a 	bhi.w	8007d8e <_strtod_l+0x1a6>
 8007e9a:	3a30      	subs	r2, #48	; 0x30
 8007e9c:	9208      	str	r2, [sp, #32]
 8007e9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007ea0:	920c      	str	r2, [sp, #48]	; 0x30
 8007ea2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007ea4:	1c57      	adds	r7, r2, #1
 8007ea6:	9715      	str	r7, [sp, #84]	; 0x54
 8007ea8:	7852      	ldrb	r2, [r2, #1]
 8007eaa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007eae:	f1be 0f09 	cmp.w	lr, #9
 8007eb2:	d938      	bls.n	8007f26 <_strtod_l+0x33e>
 8007eb4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007eb6:	1a7f      	subs	r7, r7, r1
 8007eb8:	2f08      	cmp	r7, #8
 8007eba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007ebe:	dc03      	bgt.n	8007ec8 <_strtod_l+0x2e0>
 8007ec0:	9908      	ldr	r1, [sp, #32]
 8007ec2:	428f      	cmp	r7, r1
 8007ec4:	bfa8      	it	ge
 8007ec6:	460f      	movge	r7, r1
 8007ec8:	f1bc 0f00 	cmp.w	ip, #0
 8007ecc:	d000      	beq.n	8007ed0 <_strtod_l+0x2e8>
 8007ece:	427f      	negs	r7, r7
 8007ed0:	2e00      	cmp	r6, #0
 8007ed2:	d14f      	bne.n	8007f74 <_strtod_l+0x38c>
 8007ed4:	9904      	ldr	r1, [sp, #16]
 8007ed6:	4301      	orrs	r1, r0
 8007ed8:	f47f aec1 	bne.w	8007c5e <_strtod_l+0x76>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f47f aedb 	bne.w	8007c98 <_strtod_l+0xb0>
 8007ee2:	2a69      	cmp	r2, #105	; 0x69
 8007ee4:	d029      	beq.n	8007f3a <_strtod_l+0x352>
 8007ee6:	dc26      	bgt.n	8007f36 <_strtod_l+0x34e>
 8007ee8:	2a49      	cmp	r2, #73	; 0x49
 8007eea:	d026      	beq.n	8007f3a <_strtod_l+0x352>
 8007eec:	2a4e      	cmp	r2, #78	; 0x4e
 8007eee:	f47f aed3 	bne.w	8007c98 <_strtod_l+0xb0>
 8007ef2:	499b      	ldr	r1, [pc, #620]	; (8008160 <_strtod_l+0x578>)
 8007ef4:	a815      	add	r0, sp, #84	; 0x54
 8007ef6:	f001 f913 	bl	8009120 <__match>
 8007efa:	2800      	cmp	r0, #0
 8007efc:	f43f aecc 	beq.w	8007c98 <_strtod_l+0xb0>
 8007f00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b28      	cmp	r3, #40	; 0x28
 8007f06:	d12f      	bne.n	8007f68 <_strtod_l+0x380>
 8007f08:	4996      	ldr	r1, [pc, #600]	; (8008164 <_strtod_l+0x57c>)
 8007f0a:	aa18      	add	r2, sp, #96	; 0x60
 8007f0c:	a815      	add	r0, sp, #84	; 0x54
 8007f0e:	f001 f91b 	bl	8009148 <__hexnan>
 8007f12:	2805      	cmp	r0, #5
 8007f14:	d128      	bne.n	8007f68 <_strtod_l+0x380>
 8007f16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007f18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007f20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007f24:	e69b      	b.n	8007c5e <_strtod_l+0x76>
 8007f26:	9f08      	ldr	r7, [sp, #32]
 8007f28:	210a      	movs	r1, #10
 8007f2a:	fb01 2107 	mla	r1, r1, r7, r2
 8007f2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007f32:	9208      	str	r2, [sp, #32]
 8007f34:	e7b5      	b.n	8007ea2 <_strtod_l+0x2ba>
 8007f36:	2a6e      	cmp	r2, #110	; 0x6e
 8007f38:	e7d9      	b.n	8007eee <_strtod_l+0x306>
 8007f3a:	498b      	ldr	r1, [pc, #556]	; (8008168 <_strtod_l+0x580>)
 8007f3c:	a815      	add	r0, sp, #84	; 0x54
 8007f3e:	f001 f8ef 	bl	8009120 <__match>
 8007f42:	2800      	cmp	r0, #0
 8007f44:	f43f aea8 	beq.w	8007c98 <_strtod_l+0xb0>
 8007f48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f4a:	4988      	ldr	r1, [pc, #544]	; (800816c <_strtod_l+0x584>)
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	a815      	add	r0, sp, #84	; 0x54
 8007f50:	9315      	str	r3, [sp, #84]	; 0x54
 8007f52:	f001 f8e5 	bl	8009120 <__match>
 8007f56:	b910      	cbnz	r0, 8007f5e <_strtod_l+0x376>
 8007f58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	9315      	str	r3, [sp, #84]	; 0x54
 8007f5e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800817c <_strtod_l+0x594>
 8007f62:	f04f 0800 	mov.w	r8, #0
 8007f66:	e67a      	b.n	8007c5e <_strtod_l+0x76>
 8007f68:	4881      	ldr	r0, [pc, #516]	; (8008170 <_strtod_l+0x588>)
 8007f6a:	f000 fddd 	bl	8008b28 <nan>
 8007f6e:	ec59 8b10 	vmov	r8, r9, d0
 8007f72:	e674      	b.n	8007c5e <_strtod_l+0x76>
 8007f74:	9b05      	ldr	r3, [sp, #20]
 8007f76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f78:	1afb      	subs	r3, r7, r3
 8007f7a:	f1bb 0f00 	cmp.w	fp, #0
 8007f7e:	bf08      	it	eq
 8007f80:	46b3      	moveq	fp, r6
 8007f82:	2e10      	cmp	r6, #16
 8007f84:	9308      	str	r3, [sp, #32]
 8007f86:	4635      	mov	r5, r6
 8007f88:	bfa8      	it	ge
 8007f8a:	2510      	movge	r5, #16
 8007f8c:	f7f8 fad2 	bl	8000534 <__aeabi_ui2d>
 8007f90:	2e09      	cmp	r6, #9
 8007f92:	4680      	mov	r8, r0
 8007f94:	4689      	mov	r9, r1
 8007f96:	dd13      	ble.n	8007fc0 <_strtod_l+0x3d8>
 8007f98:	4b76      	ldr	r3, [pc, #472]	; (8008174 <_strtod_l+0x58c>)
 8007f9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007f9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007fa2:	f7f8 fb41 	bl	8000628 <__aeabi_dmul>
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	4650      	mov	r0, sl
 8007faa:	4689      	mov	r9, r1
 8007fac:	f7f8 fac2 	bl	8000534 <__aeabi_ui2d>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	460b      	mov	r3, r1
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	f7f8 f980 	bl	80002bc <__adddf3>
 8007fbc:	4680      	mov	r8, r0
 8007fbe:	4689      	mov	r9, r1
 8007fc0:	2e0f      	cmp	r6, #15
 8007fc2:	dc38      	bgt.n	8008036 <_strtod_l+0x44e>
 8007fc4:	9b08      	ldr	r3, [sp, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f43f ae49 	beq.w	8007c5e <_strtod_l+0x76>
 8007fcc:	dd24      	ble.n	8008018 <_strtod_l+0x430>
 8007fce:	2b16      	cmp	r3, #22
 8007fd0:	dc0b      	bgt.n	8007fea <_strtod_l+0x402>
 8007fd2:	4968      	ldr	r1, [pc, #416]	; (8008174 <_strtod_l+0x58c>)
 8007fd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007fdc:	4642      	mov	r2, r8
 8007fde:	464b      	mov	r3, r9
 8007fe0:	f7f8 fb22 	bl	8000628 <__aeabi_dmul>
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	4689      	mov	r9, r1
 8007fe8:	e639      	b.n	8007c5e <_strtod_l+0x76>
 8007fea:	9a08      	ldr	r2, [sp, #32]
 8007fec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	db20      	blt.n	8008036 <_strtod_l+0x44e>
 8007ff4:	4c5f      	ldr	r4, [pc, #380]	; (8008174 <_strtod_l+0x58c>)
 8007ff6:	f1c6 060f 	rsb	r6, r6, #15
 8007ffa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007ffe:	4642      	mov	r2, r8
 8008000:	464b      	mov	r3, r9
 8008002:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008006:	f7f8 fb0f 	bl	8000628 <__aeabi_dmul>
 800800a:	9b08      	ldr	r3, [sp, #32]
 800800c:	1b9e      	subs	r6, r3, r6
 800800e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008012:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008016:	e7e3      	b.n	8007fe0 <_strtod_l+0x3f8>
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	3316      	adds	r3, #22
 800801c:	db0b      	blt.n	8008036 <_strtod_l+0x44e>
 800801e:	9b05      	ldr	r3, [sp, #20]
 8008020:	1bdf      	subs	r7, r3, r7
 8008022:	4b54      	ldr	r3, [pc, #336]	; (8008174 <_strtod_l+0x58c>)
 8008024:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8008028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800802c:	4640      	mov	r0, r8
 800802e:	4649      	mov	r1, r9
 8008030:	f7f8 fc24 	bl	800087c <__aeabi_ddiv>
 8008034:	e7d6      	b.n	8007fe4 <_strtod_l+0x3fc>
 8008036:	9b08      	ldr	r3, [sp, #32]
 8008038:	1b75      	subs	r5, r6, r5
 800803a:	441d      	add	r5, r3
 800803c:	2d00      	cmp	r5, #0
 800803e:	dd70      	ble.n	8008122 <_strtod_l+0x53a>
 8008040:	f015 030f 	ands.w	r3, r5, #15
 8008044:	d00a      	beq.n	800805c <_strtod_l+0x474>
 8008046:	494b      	ldr	r1, [pc, #300]	; (8008174 <_strtod_l+0x58c>)
 8008048:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800804c:	4642      	mov	r2, r8
 800804e:	464b      	mov	r3, r9
 8008050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008054:	f7f8 fae8 	bl	8000628 <__aeabi_dmul>
 8008058:	4680      	mov	r8, r0
 800805a:	4689      	mov	r9, r1
 800805c:	f035 050f 	bics.w	r5, r5, #15
 8008060:	d04d      	beq.n	80080fe <_strtod_l+0x516>
 8008062:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8008066:	dd22      	ble.n	80080ae <_strtod_l+0x4c6>
 8008068:	2500      	movs	r5, #0
 800806a:	46ab      	mov	fp, r5
 800806c:	9509      	str	r5, [sp, #36]	; 0x24
 800806e:	9505      	str	r5, [sp, #20]
 8008070:	2322      	movs	r3, #34	; 0x22
 8008072:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800817c <_strtod_l+0x594>
 8008076:	6023      	str	r3, [r4, #0]
 8008078:	f04f 0800 	mov.w	r8, #0
 800807c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800807e:	2b00      	cmp	r3, #0
 8008080:	f43f aded 	beq.w	8007c5e <_strtod_l+0x76>
 8008084:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008086:	4620      	mov	r0, r4
 8008088:	f001 f9f8 	bl	800947c <_Bfree>
 800808c:	9905      	ldr	r1, [sp, #20]
 800808e:	4620      	mov	r0, r4
 8008090:	f001 f9f4 	bl	800947c <_Bfree>
 8008094:	4659      	mov	r1, fp
 8008096:	4620      	mov	r0, r4
 8008098:	f001 f9f0 	bl	800947c <_Bfree>
 800809c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800809e:	4620      	mov	r0, r4
 80080a0:	f001 f9ec 	bl	800947c <_Bfree>
 80080a4:	4629      	mov	r1, r5
 80080a6:	4620      	mov	r0, r4
 80080a8:	f001 f9e8 	bl	800947c <_Bfree>
 80080ac:	e5d7      	b.n	8007c5e <_strtod_l+0x76>
 80080ae:	4b32      	ldr	r3, [pc, #200]	; (8008178 <_strtod_l+0x590>)
 80080b0:	9304      	str	r3, [sp, #16]
 80080b2:	2300      	movs	r3, #0
 80080b4:	112d      	asrs	r5, r5, #4
 80080b6:	4640      	mov	r0, r8
 80080b8:	4649      	mov	r1, r9
 80080ba:	469a      	mov	sl, r3
 80080bc:	2d01      	cmp	r5, #1
 80080be:	dc21      	bgt.n	8008104 <_strtod_l+0x51c>
 80080c0:	b10b      	cbz	r3, 80080c6 <_strtod_l+0x4de>
 80080c2:	4680      	mov	r8, r0
 80080c4:	4689      	mov	r9, r1
 80080c6:	492c      	ldr	r1, [pc, #176]	; (8008178 <_strtod_l+0x590>)
 80080c8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80080cc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80080d0:	4642      	mov	r2, r8
 80080d2:	464b      	mov	r3, r9
 80080d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080d8:	f7f8 faa6 	bl	8000628 <__aeabi_dmul>
 80080dc:	4b27      	ldr	r3, [pc, #156]	; (800817c <_strtod_l+0x594>)
 80080de:	460a      	mov	r2, r1
 80080e0:	400b      	ands	r3, r1
 80080e2:	4927      	ldr	r1, [pc, #156]	; (8008180 <_strtod_l+0x598>)
 80080e4:	428b      	cmp	r3, r1
 80080e6:	4680      	mov	r8, r0
 80080e8:	d8be      	bhi.n	8008068 <_strtod_l+0x480>
 80080ea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80080ee:	428b      	cmp	r3, r1
 80080f0:	bf86      	itte	hi
 80080f2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8008184 <_strtod_l+0x59c>
 80080f6:	f04f 38ff 	movhi.w	r8, #4294967295
 80080fa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80080fe:	2300      	movs	r3, #0
 8008100:	9304      	str	r3, [sp, #16]
 8008102:	e07b      	b.n	80081fc <_strtod_l+0x614>
 8008104:	07ea      	lsls	r2, r5, #31
 8008106:	d505      	bpl.n	8008114 <_strtod_l+0x52c>
 8008108:	9b04      	ldr	r3, [sp, #16]
 800810a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810e:	f7f8 fa8b 	bl	8000628 <__aeabi_dmul>
 8008112:	2301      	movs	r3, #1
 8008114:	9a04      	ldr	r2, [sp, #16]
 8008116:	3208      	adds	r2, #8
 8008118:	f10a 0a01 	add.w	sl, sl, #1
 800811c:	106d      	asrs	r5, r5, #1
 800811e:	9204      	str	r2, [sp, #16]
 8008120:	e7cc      	b.n	80080bc <_strtod_l+0x4d4>
 8008122:	d0ec      	beq.n	80080fe <_strtod_l+0x516>
 8008124:	426d      	negs	r5, r5
 8008126:	f015 020f 	ands.w	r2, r5, #15
 800812a:	d00a      	beq.n	8008142 <_strtod_l+0x55a>
 800812c:	4b11      	ldr	r3, [pc, #68]	; (8008174 <_strtod_l+0x58c>)
 800812e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008132:	4640      	mov	r0, r8
 8008134:	4649      	mov	r1, r9
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	f7f8 fb9f 	bl	800087c <__aeabi_ddiv>
 800813e:	4680      	mov	r8, r0
 8008140:	4689      	mov	r9, r1
 8008142:	112d      	asrs	r5, r5, #4
 8008144:	d0db      	beq.n	80080fe <_strtod_l+0x516>
 8008146:	2d1f      	cmp	r5, #31
 8008148:	dd1e      	ble.n	8008188 <_strtod_l+0x5a0>
 800814a:	2500      	movs	r5, #0
 800814c:	46ab      	mov	fp, r5
 800814e:	9509      	str	r5, [sp, #36]	; 0x24
 8008150:	9505      	str	r5, [sp, #20]
 8008152:	2322      	movs	r3, #34	; 0x22
 8008154:	f04f 0800 	mov.w	r8, #0
 8008158:	f04f 0900 	mov.w	r9, #0
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	e78d      	b.n	800807c <_strtod_l+0x494>
 8008160:	0800bc03 	.word	0x0800bc03
 8008164:	0800bc1c 	.word	0x0800bc1c
 8008168:	0800bbfa 	.word	0x0800bbfa
 800816c:	0800bbfd 	.word	0x0800bbfd
 8008170:	0800bf80 	.word	0x0800bf80
 8008174:	0800bd70 	.word	0x0800bd70
 8008178:	0800bd48 	.word	0x0800bd48
 800817c:	7ff00000 	.word	0x7ff00000
 8008180:	7ca00000 	.word	0x7ca00000
 8008184:	7fefffff 	.word	0x7fefffff
 8008188:	f015 0310 	ands.w	r3, r5, #16
 800818c:	bf18      	it	ne
 800818e:	236a      	movne	r3, #106	; 0x6a
 8008190:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8008534 <_strtod_l+0x94c>
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	4640      	mov	r0, r8
 8008198:	4649      	mov	r1, r9
 800819a:	2300      	movs	r3, #0
 800819c:	07ea      	lsls	r2, r5, #31
 800819e:	d504      	bpl.n	80081aa <_strtod_l+0x5c2>
 80081a0:	e9da 2300 	ldrd	r2, r3, [sl]
 80081a4:	f7f8 fa40 	bl	8000628 <__aeabi_dmul>
 80081a8:	2301      	movs	r3, #1
 80081aa:	106d      	asrs	r5, r5, #1
 80081ac:	f10a 0a08 	add.w	sl, sl, #8
 80081b0:	d1f4      	bne.n	800819c <_strtod_l+0x5b4>
 80081b2:	b10b      	cbz	r3, 80081b8 <_strtod_l+0x5d0>
 80081b4:	4680      	mov	r8, r0
 80081b6:	4689      	mov	r9, r1
 80081b8:	9b04      	ldr	r3, [sp, #16]
 80081ba:	b1bb      	cbz	r3, 80081ec <_strtod_l+0x604>
 80081bc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80081c0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	4649      	mov	r1, r9
 80081c8:	dd10      	ble.n	80081ec <_strtod_l+0x604>
 80081ca:	2b1f      	cmp	r3, #31
 80081cc:	f340 811e 	ble.w	800840c <_strtod_l+0x824>
 80081d0:	2b34      	cmp	r3, #52	; 0x34
 80081d2:	bfde      	ittt	le
 80081d4:	f04f 33ff 	movle.w	r3, #4294967295
 80081d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80081dc:	4093      	lslle	r3, r2
 80081de:	f04f 0800 	mov.w	r8, #0
 80081e2:	bfcc      	ite	gt
 80081e4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80081e8:	ea03 0901 	andle.w	r9, r3, r1
 80081ec:	2200      	movs	r2, #0
 80081ee:	2300      	movs	r3, #0
 80081f0:	4640      	mov	r0, r8
 80081f2:	4649      	mov	r1, r9
 80081f4:	f7f8 fc80 	bl	8000af8 <__aeabi_dcmpeq>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d1a6      	bne.n	800814a <_strtod_l+0x562>
 80081fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008202:	4633      	mov	r3, r6
 8008204:	465a      	mov	r2, fp
 8008206:	4620      	mov	r0, r4
 8008208:	f001 f9a0 	bl	800954c <__s2b>
 800820c:	9009      	str	r0, [sp, #36]	; 0x24
 800820e:	2800      	cmp	r0, #0
 8008210:	f43f af2a 	beq.w	8008068 <_strtod_l+0x480>
 8008214:	9a08      	ldr	r2, [sp, #32]
 8008216:	9b05      	ldr	r3, [sp, #20]
 8008218:	2a00      	cmp	r2, #0
 800821a:	eba3 0307 	sub.w	r3, r3, r7
 800821e:	bfa8      	it	ge
 8008220:	2300      	movge	r3, #0
 8008222:	930c      	str	r3, [sp, #48]	; 0x30
 8008224:	2500      	movs	r5, #0
 8008226:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800822a:	9312      	str	r3, [sp, #72]	; 0x48
 800822c:	46ab      	mov	fp, r5
 800822e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008230:	4620      	mov	r0, r4
 8008232:	6859      	ldr	r1, [r3, #4]
 8008234:	f001 f8e2 	bl	80093fc <_Balloc>
 8008238:	9005      	str	r0, [sp, #20]
 800823a:	2800      	cmp	r0, #0
 800823c:	f43f af18 	beq.w	8008070 <_strtod_l+0x488>
 8008240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	3202      	adds	r2, #2
 8008246:	f103 010c 	add.w	r1, r3, #12
 800824a:	0092      	lsls	r2, r2, #2
 800824c:	300c      	adds	r0, #12
 800824e:	f000 fc5a 	bl	8008b06 <memcpy>
 8008252:	ec49 8b10 	vmov	d0, r8, r9
 8008256:	aa18      	add	r2, sp, #96	; 0x60
 8008258:	a917      	add	r1, sp, #92	; 0x5c
 800825a:	4620      	mov	r0, r4
 800825c:	f001 fcaa 	bl	8009bb4 <__d2b>
 8008260:	ec49 8b18 	vmov	d8, r8, r9
 8008264:	9016      	str	r0, [sp, #88]	; 0x58
 8008266:	2800      	cmp	r0, #0
 8008268:	f43f af02 	beq.w	8008070 <_strtod_l+0x488>
 800826c:	2101      	movs	r1, #1
 800826e:	4620      	mov	r0, r4
 8008270:	f001 fa04 	bl	800967c <__i2b>
 8008274:	4683      	mov	fp, r0
 8008276:	2800      	cmp	r0, #0
 8008278:	f43f aefa 	beq.w	8008070 <_strtod_l+0x488>
 800827c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800827e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008280:	2e00      	cmp	r6, #0
 8008282:	bfab      	itete	ge
 8008284:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8008286:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008288:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800828a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800828e:	bfac      	ite	ge
 8008290:	eb06 0a03 	addge.w	sl, r6, r3
 8008294:	1b9f      	sublt	r7, r3, r6
 8008296:	9b04      	ldr	r3, [sp, #16]
 8008298:	1af6      	subs	r6, r6, r3
 800829a:	4416      	add	r6, r2
 800829c:	4ba0      	ldr	r3, [pc, #640]	; (8008520 <_strtod_l+0x938>)
 800829e:	3e01      	subs	r6, #1
 80082a0:	429e      	cmp	r6, r3
 80082a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80082a6:	f280 80c4 	bge.w	8008432 <_strtod_l+0x84a>
 80082aa:	1b9b      	subs	r3, r3, r6
 80082ac:	2b1f      	cmp	r3, #31
 80082ae:	eba2 0203 	sub.w	r2, r2, r3
 80082b2:	f04f 0101 	mov.w	r1, #1
 80082b6:	f300 80b0 	bgt.w	800841a <_strtod_l+0x832>
 80082ba:	fa01 f303 	lsl.w	r3, r1, r3
 80082be:	930e      	str	r3, [sp, #56]	; 0x38
 80082c0:	2300      	movs	r3, #0
 80082c2:	930d      	str	r3, [sp, #52]	; 0x34
 80082c4:	eb0a 0602 	add.w	r6, sl, r2
 80082c8:	9b04      	ldr	r3, [sp, #16]
 80082ca:	45b2      	cmp	sl, r6
 80082cc:	4417      	add	r7, r2
 80082ce:	441f      	add	r7, r3
 80082d0:	4653      	mov	r3, sl
 80082d2:	bfa8      	it	ge
 80082d4:	4633      	movge	r3, r6
 80082d6:	42bb      	cmp	r3, r7
 80082d8:	bfa8      	it	ge
 80082da:	463b      	movge	r3, r7
 80082dc:	2b00      	cmp	r3, #0
 80082de:	bfc2      	ittt	gt
 80082e0:	1af6      	subgt	r6, r6, r3
 80082e2:	1aff      	subgt	r7, r7, r3
 80082e4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80082e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dd17      	ble.n	800831e <_strtod_l+0x736>
 80082ee:	4659      	mov	r1, fp
 80082f0:	461a      	mov	r2, r3
 80082f2:	4620      	mov	r0, r4
 80082f4:	f001 fa82 	bl	80097fc <__pow5mult>
 80082f8:	4683      	mov	fp, r0
 80082fa:	2800      	cmp	r0, #0
 80082fc:	f43f aeb8 	beq.w	8008070 <_strtod_l+0x488>
 8008300:	4601      	mov	r1, r0
 8008302:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008304:	4620      	mov	r0, r4
 8008306:	f001 f9cf 	bl	80096a8 <__multiply>
 800830a:	900b      	str	r0, [sp, #44]	; 0x2c
 800830c:	2800      	cmp	r0, #0
 800830e:	f43f aeaf 	beq.w	8008070 <_strtod_l+0x488>
 8008312:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008314:	4620      	mov	r0, r4
 8008316:	f001 f8b1 	bl	800947c <_Bfree>
 800831a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800831c:	9316      	str	r3, [sp, #88]	; 0x58
 800831e:	2e00      	cmp	r6, #0
 8008320:	f300 808c 	bgt.w	800843c <_strtod_l+0x854>
 8008324:	9b08      	ldr	r3, [sp, #32]
 8008326:	2b00      	cmp	r3, #0
 8008328:	dd08      	ble.n	800833c <_strtod_l+0x754>
 800832a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800832c:	9905      	ldr	r1, [sp, #20]
 800832e:	4620      	mov	r0, r4
 8008330:	f001 fa64 	bl	80097fc <__pow5mult>
 8008334:	9005      	str	r0, [sp, #20]
 8008336:	2800      	cmp	r0, #0
 8008338:	f43f ae9a 	beq.w	8008070 <_strtod_l+0x488>
 800833c:	2f00      	cmp	r7, #0
 800833e:	dd08      	ble.n	8008352 <_strtod_l+0x76a>
 8008340:	9905      	ldr	r1, [sp, #20]
 8008342:	463a      	mov	r2, r7
 8008344:	4620      	mov	r0, r4
 8008346:	f001 fab3 	bl	80098b0 <__lshift>
 800834a:	9005      	str	r0, [sp, #20]
 800834c:	2800      	cmp	r0, #0
 800834e:	f43f ae8f 	beq.w	8008070 <_strtod_l+0x488>
 8008352:	f1ba 0f00 	cmp.w	sl, #0
 8008356:	dd08      	ble.n	800836a <_strtod_l+0x782>
 8008358:	4659      	mov	r1, fp
 800835a:	4652      	mov	r2, sl
 800835c:	4620      	mov	r0, r4
 800835e:	f001 faa7 	bl	80098b0 <__lshift>
 8008362:	4683      	mov	fp, r0
 8008364:	2800      	cmp	r0, #0
 8008366:	f43f ae83 	beq.w	8008070 <_strtod_l+0x488>
 800836a:	9a05      	ldr	r2, [sp, #20]
 800836c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800836e:	4620      	mov	r0, r4
 8008370:	f001 fb26 	bl	80099c0 <__mdiff>
 8008374:	4605      	mov	r5, r0
 8008376:	2800      	cmp	r0, #0
 8008378:	f43f ae7a 	beq.w	8008070 <_strtod_l+0x488>
 800837c:	68c3      	ldr	r3, [r0, #12]
 800837e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008380:	2300      	movs	r3, #0
 8008382:	60c3      	str	r3, [r0, #12]
 8008384:	4659      	mov	r1, fp
 8008386:	f001 faff 	bl	8009988 <__mcmp>
 800838a:	2800      	cmp	r0, #0
 800838c:	da60      	bge.n	8008450 <_strtod_l+0x868>
 800838e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008390:	ea53 0308 	orrs.w	r3, r3, r8
 8008394:	f040 8084 	bne.w	80084a0 <_strtod_l+0x8b8>
 8008398:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800839c:	2b00      	cmp	r3, #0
 800839e:	d17f      	bne.n	80084a0 <_strtod_l+0x8b8>
 80083a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80083a4:	0d1b      	lsrs	r3, r3, #20
 80083a6:	051b      	lsls	r3, r3, #20
 80083a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80083ac:	d978      	bls.n	80084a0 <_strtod_l+0x8b8>
 80083ae:	696b      	ldr	r3, [r5, #20]
 80083b0:	b913      	cbnz	r3, 80083b8 <_strtod_l+0x7d0>
 80083b2:	692b      	ldr	r3, [r5, #16]
 80083b4:	2b01      	cmp	r3, #1
 80083b6:	dd73      	ble.n	80084a0 <_strtod_l+0x8b8>
 80083b8:	4629      	mov	r1, r5
 80083ba:	2201      	movs	r2, #1
 80083bc:	4620      	mov	r0, r4
 80083be:	f001 fa77 	bl	80098b0 <__lshift>
 80083c2:	4659      	mov	r1, fp
 80083c4:	4605      	mov	r5, r0
 80083c6:	f001 fadf 	bl	8009988 <__mcmp>
 80083ca:	2800      	cmp	r0, #0
 80083cc:	dd68      	ble.n	80084a0 <_strtod_l+0x8b8>
 80083ce:	9904      	ldr	r1, [sp, #16]
 80083d0:	4a54      	ldr	r2, [pc, #336]	; (8008524 <_strtod_l+0x93c>)
 80083d2:	464b      	mov	r3, r9
 80083d4:	2900      	cmp	r1, #0
 80083d6:	f000 8084 	beq.w	80084e2 <_strtod_l+0x8fa>
 80083da:	ea02 0109 	and.w	r1, r2, r9
 80083de:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80083e2:	dc7e      	bgt.n	80084e2 <_strtod_l+0x8fa>
 80083e4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80083e8:	f77f aeb3 	ble.w	8008152 <_strtod_l+0x56a>
 80083ec:	4b4e      	ldr	r3, [pc, #312]	; (8008528 <_strtod_l+0x940>)
 80083ee:	4640      	mov	r0, r8
 80083f0:	4649      	mov	r1, r9
 80083f2:	2200      	movs	r2, #0
 80083f4:	f7f8 f918 	bl	8000628 <__aeabi_dmul>
 80083f8:	4b4a      	ldr	r3, [pc, #296]	; (8008524 <_strtod_l+0x93c>)
 80083fa:	400b      	ands	r3, r1
 80083fc:	4680      	mov	r8, r0
 80083fe:	4689      	mov	r9, r1
 8008400:	2b00      	cmp	r3, #0
 8008402:	f47f ae3f 	bne.w	8008084 <_strtod_l+0x49c>
 8008406:	2322      	movs	r3, #34	; 0x22
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	e63b      	b.n	8008084 <_strtod_l+0x49c>
 800840c:	f04f 32ff 	mov.w	r2, #4294967295
 8008410:	fa02 f303 	lsl.w	r3, r2, r3
 8008414:	ea03 0808 	and.w	r8, r3, r8
 8008418:	e6e8      	b.n	80081ec <_strtod_l+0x604>
 800841a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800841e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8008422:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8008426:	36e2      	adds	r6, #226	; 0xe2
 8008428:	fa01 f306 	lsl.w	r3, r1, r6
 800842c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008430:	e748      	b.n	80082c4 <_strtod_l+0x6dc>
 8008432:	2100      	movs	r1, #0
 8008434:	2301      	movs	r3, #1
 8008436:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800843a:	e743      	b.n	80082c4 <_strtod_l+0x6dc>
 800843c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800843e:	4632      	mov	r2, r6
 8008440:	4620      	mov	r0, r4
 8008442:	f001 fa35 	bl	80098b0 <__lshift>
 8008446:	9016      	str	r0, [sp, #88]	; 0x58
 8008448:	2800      	cmp	r0, #0
 800844a:	f47f af6b 	bne.w	8008324 <_strtod_l+0x73c>
 800844e:	e60f      	b.n	8008070 <_strtod_l+0x488>
 8008450:	46ca      	mov	sl, r9
 8008452:	d171      	bne.n	8008538 <_strtod_l+0x950>
 8008454:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008456:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800845a:	b352      	cbz	r2, 80084b2 <_strtod_l+0x8ca>
 800845c:	4a33      	ldr	r2, [pc, #204]	; (800852c <_strtod_l+0x944>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d12a      	bne.n	80084b8 <_strtod_l+0x8d0>
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	4641      	mov	r1, r8
 8008466:	b1fb      	cbz	r3, 80084a8 <_strtod_l+0x8c0>
 8008468:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <_strtod_l+0x93c>)
 800846a:	ea09 0303 	and.w	r3, r9, r3
 800846e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008472:	f04f 32ff 	mov.w	r2, #4294967295
 8008476:	d81a      	bhi.n	80084ae <_strtod_l+0x8c6>
 8008478:	0d1b      	lsrs	r3, r3, #20
 800847a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	4299      	cmp	r1, r3
 8008484:	d118      	bne.n	80084b8 <_strtod_l+0x8d0>
 8008486:	4b2a      	ldr	r3, [pc, #168]	; (8008530 <_strtod_l+0x948>)
 8008488:	459a      	cmp	sl, r3
 800848a:	d102      	bne.n	8008492 <_strtod_l+0x8aa>
 800848c:	3101      	adds	r1, #1
 800848e:	f43f adef 	beq.w	8008070 <_strtod_l+0x488>
 8008492:	4b24      	ldr	r3, [pc, #144]	; (8008524 <_strtod_l+0x93c>)
 8008494:	ea0a 0303 	and.w	r3, sl, r3
 8008498:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800849c:	f04f 0800 	mov.w	r8, #0
 80084a0:	9b04      	ldr	r3, [sp, #16]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d1a2      	bne.n	80083ec <_strtod_l+0x804>
 80084a6:	e5ed      	b.n	8008084 <_strtod_l+0x49c>
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ac:	e7e9      	b.n	8008482 <_strtod_l+0x89a>
 80084ae:	4613      	mov	r3, r2
 80084b0:	e7e7      	b.n	8008482 <_strtod_l+0x89a>
 80084b2:	ea53 0308 	orrs.w	r3, r3, r8
 80084b6:	d08a      	beq.n	80083ce <_strtod_l+0x7e6>
 80084b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ba:	b1e3      	cbz	r3, 80084f6 <_strtod_l+0x90e>
 80084bc:	ea13 0f0a 	tst.w	r3, sl
 80084c0:	d0ee      	beq.n	80084a0 <_strtod_l+0x8b8>
 80084c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084c4:	9a04      	ldr	r2, [sp, #16]
 80084c6:	4640      	mov	r0, r8
 80084c8:	4649      	mov	r1, r9
 80084ca:	b1c3      	cbz	r3, 80084fe <_strtod_l+0x916>
 80084cc:	f7ff fb70 	bl	8007bb0 <sulp>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	ec51 0b18 	vmov	r0, r1, d8
 80084d8:	f7f7 fef0 	bl	80002bc <__adddf3>
 80084dc:	4680      	mov	r8, r0
 80084de:	4689      	mov	r9, r1
 80084e0:	e7de      	b.n	80084a0 <_strtod_l+0x8b8>
 80084e2:	4013      	ands	r3, r2
 80084e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80084e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80084ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80084f0:	f04f 38ff 	mov.w	r8, #4294967295
 80084f4:	e7d4      	b.n	80084a0 <_strtod_l+0x8b8>
 80084f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084f8:	ea13 0f08 	tst.w	r3, r8
 80084fc:	e7e0      	b.n	80084c0 <_strtod_l+0x8d8>
 80084fe:	f7ff fb57 	bl	8007bb0 <sulp>
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	ec51 0b18 	vmov	r0, r1, d8
 800850a:	f7f7 fed5 	bl	80002b8 <__aeabi_dsub>
 800850e:	2200      	movs	r2, #0
 8008510:	2300      	movs	r3, #0
 8008512:	4680      	mov	r8, r0
 8008514:	4689      	mov	r9, r1
 8008516:	f7f8 faef 	bl	8000af8 <__aeabi_dcmpeq>
 800851a:	2800      	cmp	r0, #0
 800851c:	d0c0      	beq.n	80084a0 <_strtod_l+0x8b8>
 800851e:	e618      	b.n	8008152 <_strtod_l+0x56a>
 8008520:	fffffc02 	.word	0xfffffc02
 8008524:	7ff00000 	.word	0x7ff00000
 8008528:	39500000 	.word	0x39500000
 800852c:	000fffff 	.word	0x000fffff
 8008530:	7fefffff 	.word	0x7fefffff
 8008534:	0800bc30 	.word	0x0800bc30
 8008538:	4659      	mov	r1, fp
 800853a:	4628      	mov	r0, r5
 800853c:	f001 fb94 	bl	8009c68 <__ratio>
 8008540:	ec57 6b10 	vmov	r6, r7, d0
 8008544:	ee10 0a10 	vmov	r0, s0
 8008548:	2200      	movs	r2, #0
 800854a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800854e:	4639      	mov	r1, r7
 8008550:	f7f8 fae6 	bl	8000b20 <__aeabi_dcmple>
 8008554:	2800      	cmp	r0, #0
 8008556:	d071      	beq.n	800863c <_strtod_l+0xa54>
 8008558:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800855a:	2b00      	cmp	r3, #0
 800855c:	d17c      	bne.n	8008658 <_strtod_l+0xa70>
 800855e:	f1b8 0f00 	cmp.w	r8, #0
 8008562:	d15a      	bne.n	800861a <_strtod_l+0xa32>
 8008564:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008568:	2b00      	cmp	r3, #0
 800856a:	d15d      	bne.n	8008628 <_strtod_l+0xa40>
 800856c:	4b90      	ldr	r3, [pc, #576]	; (80087b0 <_strtod_l+0xbc8>)
 800856e:	2200      	movs	r2, #0
 8008570:	4630      	mov	r0, r6
 8008572:	4639      	mov	r1, r7
 8008574:	f7f8 faca 	bl	8000b0c <__aeabi_dcmplt>
 8008578:	2800      	cmp	r0, #0
 800857a:	d15c      	bne.n	8008636 <_strtod_l+0xa4e>
 800857c:	4630      	mov	r0, r6
 800857e:	4639      	mov	r1, r7
 8008580:	4b8c      	ldr	r3, [pc, #560]	; (80087b4 <_strtod_l+0xbcc>)
 8008582:	2200      	movs	r2, #0
 8008584:	f7f8 f850 	bl	8000628 <__aeabi_dmul>
 8008588:	4606      	mov	r6, r0
 800858a:	460f      	mov	r7, r1
 800858c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008590:	9606      	str	r6, [sp, #24]
 8008592:	9307      	str	r3, [sp, #28]
 8008594:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008598:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800859c:	4b86      	ldr	r3, [pc, #536]	; (80087b8 <_strtod_l+0xbd0>)
 800859e:	ea0a 0303 	and.w	r3, sl, r3
 80085a2:	930d      	str	r3, [sp, #52]	; 0x34
 80085a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085a6:	4b85      	ldr	r3, [pc, #532]	; (80087bc <_strtod_l+0xbd4>)
 80085a8:	429a      	cmp	r2, r3
 80085aa:	f040 8090 	bne.w	80086ce <_strtod_l+0xae6>
 80085ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80085b2:	ec49 8b10 	vmov	d0, r8, r9
 80085b6:	f001 fa8d 	bl	8009ad4 <__ulp>
 80085ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085be:	ec51 0b10 	vmov	r0, r1, d0
 80085c2:	f7f8 f831 	bl	8000628 <__aeabi_dmul>
 80085c6:	4642      	mov	r2, r8
 80085c8:	464b      	mov	r3, r9
 80085ca:	f7f7 fe77 	bl	80002bc <__adddf3>
 80085ce:	460b      	mov	r3, r1
 80085d0:	4979      	ldr	r1, [pc, #484]	; (80087b8 <_strtod_l+0xbd0>)
 80085d2:	4a7b      	ldr	r2, [pc, #492]	; (80087c0 <_strtod_l+0xbd8>)
 80085d4:	4019      	ands	r1, r3
 80085d6:	4291      	cmp	r1, r2
 80085d8:	4680      	mov	r8, r0
 80085da:	d944      	bls.n	8008666 <_strtod_l+0xa7e>
 80085dc:	ee18 2a90 	vmov	r2, s17
 80085e0:	4b78      	ldr	r3, [pc, #480]	; (80087c4 <_strtod_l+0xbdc>)
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d104      	bne.n	80085f0 <_strtod_l+0xa08>
 80085e6:	ee18 3a10 	vmov	r3, s16
 80085ea:	3301      	adds	r3, #1
 80085ec:	f43f ad40 	beq.w	8008070 <_strtod_l+0x488>
 80085f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80087c4 <_strtod_l+0xbdc>
 80085f4:	f04f 38ff 	mov.w	r8, #4294967295
 80085f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80085fa:	4620      	mov	r0, r4
 80085fc:	f000 ff3e 	bl	800947c <_Bfree>
 8008600:	9905      	ldr	r1, [sp, #20]
 8008602:	4620      	mov	r0, r4
 8008604:	f000 ff3a 	bl	800947c <_Bfree>
 8008608:	4659      	mov	r1, fp
 800860a:	4620      	mov	r0, r4
 800860c:	f000 ff36 	bl	800947c <_Bfree>
 8008610:	4629      	mov	r1, r5
 8008612:	4620      	mov	r0, r4
 8008614:	f000 ff32 	bl	800947c <_Bfree>
 8008618:	e609      	b.n	800822e <_strtod_l+0x646>
 800861a:	f1b8 0f01 	cmp.w	r8, #1
 800861e:	d103      	bne.n	8008628 <_strtod_l+0xa40>
 8008620:	f1b9 0f00 	cmp.w	r9, #0
 8008624:	f43f ad95 	beq.w	8008152 <_strtod_l+0x56a>
 8008628:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008780 <_strtod_l+0xb98>
 800862c:	4f60      	ldr	r7, [pc, #384]	; (80087b0 <_strtod_l+0xbc8>)
 800862e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008632:	2600      	movs	r6, #0
 8008634:	e7ae      	b.n	8008594 <_strtod_l+0x9ac>
 8008636:	4f5f      	ldr	r7, [pc, #380]	; (80087b4 <_strtod_l+0xbcc>)
 8008638:	2600      	movs	r6, #0
 800863a:	e7a7      	b.n	800858c <_strtod_l+0x9a4>
 800863c:	4b5d      	ldr	r3, [pc, #372]	; (80087b4 <_strtod_l+0xbcc>)
 800863e:	4630      	mov	r0, r6
 8008640:	4639      	mov	r1, r7
 8008642:	2200      	movs	r2, #0
 8008644:	f7f7 fff0 	bl	8000628 <__aeabi_dmul>
 8008648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864a:	4606      	mov	r6, r0
 800864c:	460f      	mov	r7, r1
 800864e:	2b00      	cmp	r3, #0
 8008650:	d09c      	beq.n	800858c <_strtod_l+0x9a4>
 8008652:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008656:	e79d      	b.n	8008594 <_strtod_l+0x9ac>
 8008658:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008788 <_strtod_l+0xba0>
 800865c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008660:	ec57 6b17 	vmov	r6, r7, d7
 8008664:	e796      	b.n	8008594 <_strtod_l+0x9ac>
 8008666:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800866a:	9b04      	ldr	r3, [sp, #16]
 800866c:	46ca      	mov	sl, r9
 800866e:	2b00      	cmp	r3, #0
 8008670:	d1c2      	bne.n	80085f8 <_strtod_l+0xa10>
 8008672:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008676:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008678:	0d1b      	lsrs	r3, r3, #20
 800867a:	051b      	lsls	r3, r3, #20
 800867c:	429a      	cmp	r2, r3
 800867e:	d1bb      	bne.n	80085f8 <_strtod_l+0xa10>
 8008680:	4630      	mov	r0, r6
 8008682:	4639      	mov	r1, r7
 8008684:	f7f8 fb80 	bl	8000d88 <__aeabi_d2lz>
 8008688:	f7f7 ffa0 	bl	80005cc <__aeabi_l2d>
 800868c:	4602      	mov	r2, r0
 800868e:	460b      	mov	r3, r1
 8008690:	4630      	mov	r0, r6
 8008692:	4639      	mov	r1, r7
 8008694:	f7f7 fe10 	bl	80002b8 <__aeabi_dsub>
 8008698:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800869a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800869e:	ea43 0308 	orr.w	r3, r3, r8
 80086a2:	4313      	orrs	r3, r2
 80086a4:	4606      	mov	r6, r0
 80086a6:	460f      	mov	r7, r1
 80086a8:	d054      	beq.n	8008754 <_strtod_l+0xb6c>
 80086aa:	a339      	add	r3, pc, #228	; (adr r3, 8008790 <_strtod_l+0xba8>)
 80086ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b0:	f7f8 fa2c 	bl	8000b0c <__aeabi_dcmplt>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	f47f ace5 	bne.w	8008084 <_strtod_l+0x49c>
 80086ba:	a337      	add	r3, pc, #220	; (adr r3, 8008798 <_strtod_l+0xbb0>)
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	4630      	mov	r0, r6
 80086c2:	4639      	mov	r1, r7
 80086c4:	f7f8 fa40 	bl	8000b48 <__aeabi_dcmpgt>
 80086c8:	2800      	cmp	r0, #0
 80086ca:	d095      	beq.n	80085f8 <_strtod_l+0xa10>
 80086cc:	e4da      	b.n	8008084 <_strtod_l+0x49c>
 80086ce:	9b04      	ldr	r3, [sp, #16]
 80086d0:	b333      	cbz	r3, 8008720 <_strtod_l+0xb38>
 80086d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80086d8:	d822      	bhi.n	8008720 <_strtod_l+0xb38>
 80086da:	a331      	add	r3, pc, #196	; (adr r3, 80087a0 <_strtod_l+0xbb8>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	4630      	mov	r0, r6
 80086e2:	4639      	mov	r1, r7
 80086e4:	f7f8 fa1c 	bl	8000b20 <__aeabi_dcmple>
 80086e8:	b1a0      	cbz	r0, 8008714 <_strtod_l+0xb2c>
 80086ea:	4639      	mov	r1, r7
 80086ec:	4630      	mov	r0, r6
 80086ee:	f7f8 fa73 	bl	8000bd8 <__aeabi_d2uiz>
 80086f2:	2801      	cmp	r0, #1
 80086f4:	bf38      	it	cc
 80086f6:	2001      	movcc	r0, #1
 80086f8:	f7f7 ff1c 	bl	8000534 <__aeabi_ui2d>
 80086fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	bb23      	cbnz	r3, 800874e <_strtod_l+0xb66>
 8008704:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008708:	9010      	str	r0, [sp, #64]	; 0x40
 800870a:	9311      	str	r3, [sp, #68]	; 0x44
 800870c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008710:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008714:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008716:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008718:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800871c:	1a9b      	subs	r3, r3, r2
 800871e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008720:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008724:	eeb0 0a48 	vmov.f32	s0, s16
 8008728:	eef0 0a68 	vmov.f32	s1, s17
 800872c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008730:	f001 f9d0 	bl	8009ad4 <__ulp>
 8008734:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008738:	ec53 2b10 	vmov	r2, r3, d0
 800873c:	f7f7 ff74 	bl	8000628 <__aeabi_dmul>
 8008740:	ec53 2b18 	vmov	r2, r3, d8
 8008744:	f7f7 fdba 	bl	80002bc <__adddf3>
 8008748:	4680      	mov	r8, r0
 800874a:	4689      	mov	r9, r1
 800874c:	e78d      	b.n	800866a <_strtod_l+0xa82>
 800874e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008752:	e7db      	b.n	800870c <_strtod_l+0xb24>
 8008754:	a314      	add	r3, pc, #80	; (adr r3, 80087a8 <_strtod_l+0xbc0>)
 8008756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875a:	f7f8 f9d7 	bl	8000b0c <__aeabi_dcmplt>
 800875e:	e7b3      	b.n	80086c8 <_strtod_l+0xae0>
 8008760:	2300      	movs	r3, #0
 8008762:	930a      	str	r3, [sp, #40]	; 0x28
 8008764:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008766:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	f7ff ba7c 	b.w	8007c66 <_strtod_l+0x7e>
 800876e:	2a65      	cmp	r2, #101	; 0x65
 8008770:	f43f ab75 	beq.w	8007e5e <_strtod_l+0x276>
 8008774:	2a45      	cmp	r2, #69	; 0x45
 8008776:	f43f ab72 	beq.w	8007e5e <_strtod_l+0x276>
 800877a:	2301      	movs	r3, #1
 800877c:	f7ff bbaa 	b.w	8007ed4 <_strtod_l+0x2ec>
 8008780:	00000000 	.word	0x00000000
 8008784:	bff00000 	.word	0xbff00000
 8008788:	00000000 	.word	0x00000000
 800878c:	3ff00000 	.word	0x3ff00000
 8008790:	94a03595 	.word	0x94a03595
 8008794:	3fdfffff 	.word	0x3fdfffff
 8008798:	35afe535 	.word	0x35afe535
 800879c:	3fe00000 	.word	0x3fe00000
 80087a0:	ffc00000 	.word	0xffc00000
 80087a4:	41dfffff 	.word	0x41dfffff
 80087a8:	94a03595 	.word	0x94a03595
 80087ac:	3fcfffff 	.word	0x3fcfffff
 80087b0:	3ff00000 	.word	0x3ff00000
 80087b4:	3fe00000 	.word	0x3fe00000
 80087b8:	7ff00000 	.word	0x7ff00000
 80087bc:	7fe00000 	.word	0x7fe00000
 80087c0:	7c9fffff 	.word	0x7c9fffff
 80087c4:	7fefffff 	.word	0x7fefffff

080087c8 <strtod>:
 80087c8:	460a      	mov	r2, r1
 80087ca:	4601      	mov	r1, r0
 80087cc:	4802      	ldr	r0, [pc, #8]	; (80087d8 <strtod+0x10>)
 80087ce:	4b03      	ldr	r3, [pc, #12]	; (80087dc <strtod+0x14>)
 80087d0:	6800      	ldr	r0, [r0, #0]
 80087d2:	f7ff ba09 	b.w	8007be8 <_strtod_l>
 80087d6:	bf00      	nop
 80087d8:	20000238 	.word	0x20000238
 80087dc:	20000080 	.word	0x20000080

080087e0 <std>:
 80087e0:	2300      	movs	r3, #0
 80087e2:	b510      	push	{r4, lr}
 80087e4:	4604      	mov	r4, r0
 80087e6:	e9c0 3300 	strd	r3, r3, [r0]
 80087ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087ee:	6083      	str	r3, [r0, #8]
 80087f0:	8181      	strh	r1, [r0, #12]
 80087f2:	6643      	str	r3, [r0, #100]	; 0x64
 80087f4:	81c2      	strh	r2, [r0, #14]
 80087f6:	6183      	str	r3, [r0, #24]
 80087f8:	4619      	mov	r1, r3
 80087fa:	2208      	movs	r2, #8
 80087fc:	305c      	adds	r0, #92	; 0x5c
 80087fe:	f000 f8f4 	bl	80089ea <memset>
 8008802:	4b0d      	ldr	r3, [pc, #52]	; (8008838 <std+0x58>)
 8008804:	6263      	str	r3, [r4, #36]	; 0x24
 8008806:	4b0d      	ldr	r3, [pc, #52]	; (800883c <std+0x5c>)
 8008808:	62a3      	str	r3, [r4, #40]	; 0x28
 800880a:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <std+0x60>)
 800880c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800880e:	4b0d      	ldr	r3, [pc, #52]	; (8008844 <std+0x64>)
 8008810:	6323      	str	r3, [r4, #48]	; 0x30
 8008812:	4b0d      	ldr	r3, [pc, #52]	; (8008848 <std+0x68>)
 8008814:	6224      	str	r4, [r4, #32]
 8008816:	429c      	cmp	r4, r3
 8008818:	d006      	beq.n	8008828 <std+0x48>
 800881a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800881e:	4294      	cmp	r4, r2
 8008820:	d002      	beq.n	8008828 <std+0x48>
 8008822:	33d0      	adds	r3, #208	; 0xd0
 8008824:	429c      	cmp	r4, r3
 8008826:	d105      	bne.n	8008834 <std+0x54>
 8008828:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800882c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008830:	f000 b966 	b.w	8008b00 <__retarget_lock_init_recursive>
 8008834:	bd10      	pop	{r4, pc}
 8008836:	bf00      	nop
 8008838:	08008965 	.word	0x08008965
 800883c:	08008987 	.word	0x08008987
 8008840:	080089bf 	.word	0x080089bf
 8008844:	080089e3 	.word	0x080089e3
 8008848:	20000698 	.word	0x20000698

0800884c <stdio_exit_handler>:
 800884c:	4a02      	ldr	r2, [pc, #8]	; (8008858 <stdio_exit_handler+0xc>)
 800884e:	4903      	ldr	r1, [pc, #12]	; (800885c <stdio_exit_handler+0x10>)
 8008850:	4803      	ldr	r0, [pc, #12]	; (8008860 <stdio_exit_handler+0x14>)
 8008852:	f000 b869 	b.w	8008928 <_fwalk_sglue>
 8008856:	bf00      	nop
 8008858:	20000074 	.word	0x20000074
 800885c:	08009e7d 	.word	0x08009e7d
 8008860:	200001ec 	.word	0x200001ec

08008864 <cleanup_stdio>:
 8008864:	6841      	ldr	r1, [r0, #4]
 8008866:	4b0c      	ldr	r3, [pc, #48]	; (8008898 <cleanup_stdio+0x34>)
 8008868:	4299      	cmp	r1, r3
 800886a:	b510      	push	{r4, lr}
 800886c:	4604      	mov	r4, r0
 800886e:	d001      	beq.n	8008874 <cleanup_stdio+0x10>
 8008870:	f001 fb04 	bl	8009e7c <_fflush_r>
 8008874:	68a1      	ldr	r1, [r4, #8]
 8008876:	4b09      	ldr	r3, [pc, #36]	; (800889c <cleanup_stdio+0x38>)
 8008878:	4299      	cmp	r1, r3
 800887a:	d002      	beq.n	8008882 <cleanup_stdio+0x1e>
 800887c:	4620      	mov	r0, r4
 800887e:	f001 fafd 	bl	8009e7c <_fflush_r>
 8008882:	68e1      	ldr	r1, [r4, #12]
 8008884:	4b06      	ldr	r3, [pc, #24]	; (80088a0 <cleanup_stdio+0x3c>)
 8008886:	4299      	cmp	r1, r3
 8008888:	d004      	beq.n	8008894 <cleanup_stdio+0x30>
 800888a:	4620      	mov	r0, r4
 800888c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008890:	f001 baf4 	b.w	8009e7c <_fflush_r>
 8008894:	bd10      	pop	{r4, pc}
 8008896:	bf00      	nop
 8008898:	20000698 	.word	0x20000698
 800889c:	20000700 	.word	0x20000700
 80088a0:	20000768 	.word	0x20000768

080088a4 <global_stdio_init.part.0>:
 80088a4:	b510      	push	{r4, lr}
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <global_stdio_init.part.0+0x30>)
 80088a8:	4c0b      	ldr	r4, [pc, #44]	; (80088d8 <global_stdio_init.part.0+0x34>)
 80088aa:	4a0c      	ldr	r2, [pc, #48]	; (80088dc <global_stdio_init.part.0+0x38>)
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	4620      	mov	r0, r4
 80088b0:	2200      	movs	r2, #0
 80088b2:	2104      	movs	r1, #4
 80088b4:	f7ff ff94 	bl	80087e0 <std>
 80088b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80088bc:	2201      	movs	r2, #1
 80088be:	2109      	movs	r1, #9
 80088c0:	f7ff ff8e 	bl	80087e0 <std>
 80088c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80088c8:	2202      	movs	r2, #2
 80088ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088ce:	2112      	movs	r1, #18
 80088d0:	f7ff bf86 	b.w	80087e0 <std>
 80088d4:	200007d0 	.word	0x200007d0
 80088d8:	20000698 	.word	0x20000698
 80088dc:	0800884d 	.word	0x0800884d

080088e0 <__sfp_lock_acquire>:
 80088e0:	4801      	ldr	r0, [pc, #4]	; (80088e8 <__sfp_lock_acquire+0x8>)
 80088e2:	f000 b90e 	b.w	8008b02 <__retarget_lock_acquire_recursive>
 80088e6:	bf00      	nop
 80088e8:	200007d9 	.word	0x200007d9

080088ec <__sfp_lock_release>:
 80088ec:	4801      	ldr	r0, [pc, #4]	; (80088f4 <__sfp_lock_release+0x8>)
 80088ee:	f000 b909 	b.w	8008b04 <__retarget_lock_release_recursive>
 80088f2:	bf00      	nop
 80088f4:	200007d9 	.word	0x200007d9

080088f8 <__sinit>:
 80088f8:	b510      	push	{r4, lr}
 80088fa:	4604      	mov	r4, r0
 80088fc:	f7ff fff0 	bl	80088e0 <__sfp_lock_acquire>
 8008900:	6a23      	ldr	r3, [r4, #32]
 8008902:	b11b      	cbz	r3, 800890c <__sinit+0x14>
 8008904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008908:	f7ff bff0 	b.w	80088ec <__sfp_lock_release>
 800890c:	4b04      	ldr	r3, [pc, #16]	; (8008920 <__sinit+0x28>)
 800890e:	6223      	str	r3, [r4, #32]
 8008910:	4b04      	ldr	r3, [pc, #16]	; (8008924 <__sinit+0x2c>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1f5      	bne.n	8008904 <__sinit+0xc>
 8008918:	f7ff ffc4 	bl	80088a4 <global_stdio_init.part.0>
 800891c:	e7f2      	b.n	8008904 <__sinit+0xc>
 800891e:	bf00      	nop
 8008920:	08008865 	.word	0x08008865
 8008924:	200007d0 	.word	0x200007d0

08008928 <_fwalk_sglue>:
 8008928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800892c:	4607      	mov	r7, r0
 800892e:	4688      	mov	r8, r1
 8008930:	4614      	mov	r4, r2
 8008932:	2600      	movs	r6, #0
 8008934:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008938:	f1b9 0901 	subs.w	r9, r9, #1
 800893c:	d505      	bpl.n	800894a <_fwalk_sglue+0x22>
 800893e:	6824      	ldr	r4, [r4, #0]
 8008940:	2c00      	cmp	r4, #0
 8008942:	d1f7      	bne.n	8008934 <_fwalk_sglue+0xc>
 8008944:	4630      	mov	r0, r6
 8008946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894a:	89ab      	ldrh	r3, [r5, #12]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d907      	bls.n	8008960 <_fwalk_sglue+0x38>
 8008950:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008954:	3301      	adds	r3, #1
 8008956:	d003      	beq.n	8008960 <_fwalk_sglue+0x38>
 8008958:	4629      	mov	r1, r5
 800895a:	4638      	mov	r0, r7
 800895c:	47c0      	blx	r8
 800895e:	4306      	orrs	r6, r0
 8008960:	3568      	adds	r5, #104	; 0x68
 8008962:	e7e9      	b.n	8008938 <_fwalk_sglue+0x10>

08008964 <__sread>:
 8008964:	b510      	push	{r4, lr}
 8008966:	460c      	mov	r4, r1
 8008968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800896c:	f000 f87a 	bl	8008a64 <_read_r>
 8008970:	2800      	cmp	r0, #0
 8008972:	bfab      	itete	ge
 8008974:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008976:	89a3      	ldrhlt	r3, [r4, #12]
 8008978:	181b      	addge	r3, r3, r0
 800897a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800897e:	bfac      	ite	ge
 8008980:	6563      	strge	r3, [r4, #84]	; 0x54
 8008982:	81a3      	strhlt	r3, [r4, #12]
 8008984:	bd10      	pop	{r4, pc}

08008986 <__swrite>:
 8008986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898a:	461f      	mov	r7, r3
 800898c:	898b      	ldrh	r3, [r1, #12]
 800898e:	05db      	lsls	r3, r3, #23
 8008990:	4605      	mov	r5, r0
 8008992:	460c      	mov	r4, r1
 8008994:	4616      	mov	r6, r2
 8008996:	d505      	bpl.n	80089a4 <__swrite+0x1e>
 8008998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800899c:	2302      	movs	r3, #2
 800899e:	2200      	movs	r2, #0
 80089a0:	f000 f84e 	bl	8008a40 <_lseek_r>
 80089a4:	89a3      	ldrh	r3, [r4, #12]
 80089a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	4632      	mov	r2, r6
 80089b2:	463b      	mov	r3, r7
 80089b4:	4628      	mov	r0, r5
 80089b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089ba:	f000 b865 	b.w	8008a88 <_write_r>

080089be <__sseek>:
 80089be:	b510      	push	{r4, lr}
 80089c0:	460c      	mov	r4, r1
 80089c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c6:	f000 f83b 	bl	8008a40 <_lseek_r>
 80089ca:	1c43      	adds	r3, r0, #1
 80089cc:	89a3      	ldrh	r3, [r4, #12]
 80089ce:	bf15      	itete	ne
 80089d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80089d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80089d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80089da:	81a3      	strheq	r3, [r4, #12]
 80089dc:	bf18      	it	ne
 80089de:	81a3      	strhne	r3, [r4, #12]
 80089e0:	bd10      	pop	{r4, pc}

080089e2 <__sclose>:
 80089e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089e6:	f000 b81b 	b.w	8008a20 <_close_r>

080089ea <memset>:
 80089ea:	4402      	add	r2, r0
 80089ec:	4603      	mov	r3, r0
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d100      	bne.n	80089f4 <memset+0xa>
 80089f2:	4770      	bx	lr
 80089f4:	f803 1b01 	strb.w	r1, [r3], #1
 80089f8:	e7f9      	b.n	80089ee <memset+0x4>

080089fa <strncmp>:
 80089fa:	b510      	push	{r4, lr}
 80089fc:	b16a      	cbz	r2, 8008a1a <strncmp+0x20>
 80089fe:	3901      	subs	r1, #1
 8008a00:	1884      	adds	r4, r0, r2
 8008a02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a06:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d103      	bne.n	8008a16 <strncmp+0x1c>
 8008a0e:	42a0      	cmp	r0, r4
 8008a10:	d001      	beq.n	8008a16 <strncmp+0x1c>
 8008a12:	2a00      	cmp	r2, #0
 8008a14:	d1f5      	bne.n	8008a02 <strncmp+0x8>
 8008a16:	1ad0      	subs	r0, r2, r3
 8008a18:	bd10      	pop	{r4, pc}
 8008a1a:	4610      	mov	r0, r2
 8008a1c:	e7fc      	b.n	8008a18 <strncmp+0x1e>
	...

08008a20 <_close_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d06      	ldr	r5, [pc, #24]	; (8008a3c <_close_r+0x1c>)
 8008a24:	2300      	movs	r3, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	602b      	str	r3, [r5, #0]
 8008a2c:	f7fb fb7d 	bl	800412a <_close>
 8008a30:	1c43      	adds	r3, r0, #1
 8008a32:	d102      	bne.n	8008a3a <_close_r+0x1a>
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	b103      	cbz	r3, 8008a3a <_close_r+0x1a>
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	bd38      	pop	{r3, r4, r5, pc}
 8008a3c:	200007d4 	.word	0x200007d4

08008a40 <_lseek_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4d07      	ldr	r5, [pc, #28]	; (8008a60 <_lseek_r+0x20>)
 8008a44:	4604      	mov	r4, r0
 8008a46:	4608      	mov	r0, r1
 8008a48:	4611      	mov	r1, r2
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	602a      	str	r2, [r5, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f7fb fb92 	bl	8004178 <_lseek>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_lseek_r+0x1e>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_lseek_r+0x1e>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	200007d4 	.word	0x200007d4

08008a64 <_read_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	4d07      	ldr	r5, [pc, #28]	; (8008a84 <_read_r+0x20>)
 8008a68:	4604      	mov	r4, r0
 8008a6a:	4608      	mov	r0, r1
 8008a6c:	4611      	mov	r1, r2
 8008a6e:	2200      	movs	r2, #0
 8008a70:	602a      	str	r2, [r5, #0]
 8008a72:	461a      	mov	r2, r3
 8008a74:	f7fb fb20 	bl	80040b8 <_read>
 8008a78:	1c43      	adds	r3, r0, #1
 8008a7a:	d102      	bne.n	8008a82 <_read_r+0x1e>
 8008a7c:	682b      	ldr	r3, [r5, #0]
 8008a7e:	b103      	cbz	r3, 8008a82 <_read_r+0x1e>
 8008a80:	6023      	str	r3, [r4, #0]
 8008a82:	bd38      	pop	{r3, r4, r5, pc}
 8008a84:	200007d4 	.word	0x200007d4

08008a88 <_write_r>:
 8008a88:	b538      	push	{r3, r4, r5, lr}
 8008a8a:	4d07      	ldr	r5, [pc, #28]	; (8008aa8 <_write_r+0x20>)
 8008a8c:	4604      	mov	r4, r0
 8008a8e:	4608      	mov	r0, r1
 8008a90:	4611      	mov	r1, r2
 8008a92:	2200      	movs	r2, #0
 8008a94:	602a      	str	r2, [r5, #0]
 8008a96:	461a      	mov	r2, r3
 8008a98:	f7fb fb2b 	bl	80040f2 <_write>
 8008a9c:	1c43      	adds	r3, r0, #1
 8008a9e:	d102      	bne.n	8008aa6 <_write_r+0x1e>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	b103      	cbz	r3, 8008aa6 <_write_r+0x1e>
 8008aa4:	6023      	str	r3, [r4, #0]
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	200007d4 	.word	0x200007d4

08008aac <__errno>:
 8008aac:	4b01      	ldr	r3, [pc, #4]	; (8008ab4 <__errno+0x8>)
 8008aae:	6818      	ldr	r0, [r3, #0]
 8008ab0:	4770      	bx	lr
 8008ab2:	bf00      	nop
 8008ab4:	20000238 	.word	0x20000238

08008ab8 <__libc_init_array>:
 8008ab8:	b570      	push	{r4, r5, r6, lr}
 8008aba:	4d0d      	ldr	r5, [pc, #52]	; (8008af0 <__libc_init_array+0x38>)
 8008abc:	4c0d      	ldr	r4, [pc, #52]	; (8008af4 <__libc_init_array+0x3c>)
 8008abe:	1b64      	subs	r4, r4, r5
 8008ac0:	10a4      	asrs	r4, r4, #2
 8008ac2:	2600      	movs	r6, #0
 8008ac4:	42a6      	cmp	r6, r4
 8008ac6:	d109      	bne.n	8008adc <__libc_init_array+0x24>
 8008ac8:	4d0b      	ldr	r5, [pc, #44]	; (8008af8 <__libc_init_array+0x40>)
 8008aca:	4c0c      	ldr	r4, [pc, #48]	; (8008afc <__libc_init_array+0x44>)
 8008acc:	f003 f83a 	bl	800bb44 <_init>
 8008ad0:	1b64      	subs	r4, r4, r5
 8008ad2:	10a4      	asrs	r4, r4, #2
 8008ad4:	2600      	movs	r6, #0
 8008ad6:	42a6      	cmp	r6, r4
 8008ad8:	d105      	bne.n	8008ae6 <__libc_init_array+0x2e>
 8008ada:	bd70      	pop	{r4, r5, r6, pc}
 8008adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ae0:	4798      	blx	r3
 8008ae2:	3601      	adds	r6, #1
 8008ae4:	e7ee      	b.n	8008ac4 <__libc_init_array+0xc>
 8008ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aea:	4798      	blx	r3
 8008aec:	3601      	adds	r6, #1
 8008aee:	e7f2      	b.n	8008ad6 <__libc_init_array+0x1e>
 8008af0:	0800c060 	.word	0x0800c060
 8008af4:	0800c060 	.word	0x0800c060
 8008af8:	0800c060 	.word	0x0800c060
 8008afc:	0800c064 	.word	0x0800c064

08008b00 <__retarget_lock_init_recursive>:
 8008b00:	4770      	bx	lr

08008b02 <__retarget_lock_acquire_recursive>:
 8008b02:	4770      	bx	lr

08008b04 <__retarget_lock_release_recursive>:
 8008b04:	4770      	bx	lr

08008b06 <memcpy>:
 8008b06:	440a      	add	r2, r1
 8008b08:	4291      	cmp	r1, r2
 8008b0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b0e:	d100      	bne.n	8008b12 <memcpy+0xc>
 8008b10:	4770      	bx	lr
 8008b12:	b510      	push	{r4, lr}
 8008b14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b1c:	4291      	cmp	r1, r2
 8008b1e:	d1f9      	bne.n	8008b14 <memcpy+0xe>
 8008b20:	bd10      	pop	{r4, pc}
 8008b22:	0000      	movs	r0, r0
 8008b24:	0000      	movs	r0, r0
	...

08008b28 <nan>:
 8008b28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008b30 <nan+0x8>
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	00000000 	.word	0x00000000
 8008b34:	7ff80000 	.word	0x7ff80000

08008b38 <_free_r>:
 8008b38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b3a:	2900      	cmp	r1, #0
 8008b3c:	d044      	beq.n	8008bc8 <_free_r+0x90>
 8008b3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b42:	9001      	str	r0, [sp, #4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f1a1 0404 	sub.w	r4, r1, #4
 8008b4a:	bfb8      	it	lt
 8008b4c:	18e4      	addlt	r4, r4, r3
 8008b4e:	f000 fc49 	bl	80093e4 <__malloc_lock>
 8008b52:	4a1e      	ldr	r2, [pc, #120]	; (8008bcc <_free_r+0x94>)
 8008b54:	9801      	ldr	r0, [sp, #4]
 8008b56:	6813      	ldr	r3, [r2, #0]
 8008b58:	b933      	cbnz	r3, 8008b68 <_free_r+0x30>
 8008b5a:	6063      	str	r3, [r4, #4]
 8008b5c:	6014      	str	r4, [r2, #0]
 8008b5e:	b003      	add	sp, #12
 8008b60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b64:	f000 bc44 	b.w	80093f0 <__malloc_unlock>
 8008b68:	42a3      	cmp	r3, r4
 8008b6a:	d908      	bls.n	8008b7e <_free_r+0x46>
 8008b6c:	6825      	ldr	r5, [r4, #0]
 8008b6e:	1961      	adds	r1, r4, r5
 8008b70:	428b      	cmp	r3, r1
 8008b72:	bf01      	itttt	eq
 8008b74:	6819      	ldreq	r1, [r3, #0]
 8008b76:	685b      	ldreq	r3, [r3, #4]
 8008b78:	1949      	addeq	r1, r1, r5
 8008b7a:	6021      	streq	r1, [r4, #0]
 8008b7c:	e7ed      	b.n	8008b5a <_free_r+0x22>
 8008b7e:	461a      	mov	r2, r3
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	b10b      	cbz	r3, 8008b88 <_free_r+0x50>
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	d9fa      	bls.n	8008b7e <_free_r+0x46>
 8008b88:	6811      	ldr	r1, [r2, #0]
 8008b8a:	1855      	adds	r5, r2, r1
 8008b8c:	42a5      	cmp	r5, r4
 8008b8e:	d10b      	bne.n	8008ba8 <_free_r+0x70>
 8008b90:	6824      	ldr	r4, [r4, #0]
 8008b92:	4421      	add	r1, r4
 8008b94:	1854      	adds	r4, r2, r1
 8008b96:	42a3      	cmp	r3, r4
 8008b98:	6011      	str	r1, [r2, #0]
 8008b9a:	d1e0      	bne.n	8008b5e <_free_r+0x26>
 8008b9c:	681c      	ldr	r4, [r3, #0]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	6053      	str	r3, [r2, #4]
 8008ba2:	440c      	add	r4, r1
 8008ba4:	6014      	str	r4, [r2, #0]
 8008ba6:	e7da      	b.n	8008b5e <_free_r+0x26>
 8008ba8:	d902      	bls.n	8008bb0 <_free_r+0x78>
 8008baa:	230c      	movs	r3, #12
 8008bac:	6003      	str	r3, [r0, #0]
 8008bae:	e7d6      	b.n	8008b5e <_free_r+0x26>
 8008bb0:	6825      	ldr	r5, [r4, #0]
 8008bb2:	1961      	adds	r1, r4, r5
 8008bb4:	428b      	cmp	r3, r1
 8008bb6:	bf04      	itt	eq
 8008bb8:	6819      	ldreq	r1, [r3, #0]
 8008bba:	685b      	ldreq	r3, [r3, #4]
 8008bbc:	6063      	str	r3, [r4, #4]
 8008bbe:	bf04      	itt	eq
 8008bc0:	1949      	addeq	r1, r1, r5
 8008bc2:	6021      	streq	r1, [r4, #0]
 8008bc4:	6054      	str	r4, [r2, #4]
 8008bc6:	e7ca      	b.n	8008b5e <_free_r+0x26>
 8008bc8:	b003      	add	sp, #12
 8008bca:	bd30      	pop	{r4, r5, pc}
 8008bcc:	200007dc 	.word	0x200007dc

08008bd0 <rshift>:
 8008bd0:	6903      	ldr	r3, [r0, #16]
 8008bd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008bd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bda:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008bde:	f100 0414 	add.w	r4, r0, #20
 8008be2:	dd45      	ble.n	8008c70 <rshift+0xa0>
 8008be4:	f011 011f 	ands.w	r1, r1, #31
 8008be8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008bec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008bf0:	d10c      	bne.n	8008c0c <rshift+0x3c>
 8008bf2:	f100 0710 	add.w	r7, r0, #16
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	42b1      	cmp	r1, r6
 8008bfa:	d334      	bcc.n	8008c66 <rshift+0x96>
 8008bfc:	1a9b      	subs	r3, r3, r2
 8008bfe:	009b      	lsls	r3, r3, #2
 8008c00:	1eea      	subs	r2, r5, #3
 8008c02:	4296      	cmp	r6, r2
 8008c04:	bf38      	it	cc
 8008c06:	2300      	movcc	r3, #0
 8008c08:	4423      	add	r3, r4
 8008c0a:	e015      	b.n	8008c38 <rshift+0x68>
 8008c0c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c10:	f1c1 0820 	rsb	r8, r1, #32
 8008c14:	40cf      	lsrs	r7, r1
 8008c16:	f105 0e04 	add.w	lr, r5, #4
 8008c1a:	46a1      	mov	r9, r4
 8008c1c:	4576      	cmp	r6, lr
 8008c1e:	46f4      	mov	ip, lr
 8008c20:	d815      	bhi.n	8008c4e <rshift+0x7e>
 8008c22:	1a9a      	subs	r2, r3, r2
 8008c24:	0092      	lsls	r2, r2, #2
 8008c26:	3a04      	subs	r2, #4
 8008c28:	3501      	adds	r5, #1
 8008c2a:	42ae      	cmp	r6, r5
 8008c2c:	bf38      	it	cc
 8008c2e:	2200      	movcc	r2, #0
 8008c30:	18a3      	adds	r3, r4, r2
 8008c32:	50a7      	str	r7, [r4, r2]
 8008c34:	b107      	cbz	r7, 8008c38 <rshift+0x68>
 8008c36:	3304      	adds	r3, #4
 8008c38:	1b1a      	subs	r2, r3, r4
 8008c3a:	42a3      	cmp	r3, r4
 8008c3c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c40:	bf08      	it	eq
 8008c42:	2300      	moveq	r3, #0
 8008c44:	6102      	str	r2, [r0, #16]
 8008c46:	bf08      	it	eq
 8008c48:	6143      	streq	r3, [r0, #20]
 8008c4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c4e:	f8dc c000 	ldr.w	ip, [ip]
 8008c52:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c56:	ea4c 0707 	orr.w	r7, ip, r7
 8008c5a:	f849 7b04 	str.w	r7, [r9], #4
 8008c5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c62:	40cf      	lsrs	r7, r1
 8008c64:	e7da      	b.n	8008c1c <rshift+0x4c>
 8008c66:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c6a:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c6e:	e7c3      	b.n	8008bf8 <rshift+0x28>
 8008c70:	4623      	mov	r3, r4
 8008c72:	e7e1      	b.n	8008c38 <rshift+0x68>

08008c74 <__hexdig_fun>:
 8008c74:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008c78:	2b09      	cmp	r3, #9
 8008c7a:	d802      	bhi.n	8008c82 <__hexdig_fun+0xe>
 8008c7c:	3820      	subs	r0, #32
 8008c7e:	b2c0      	uxtb	r0, r0
 8008c80:	4770      	bx	lr
 8008c82:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008c86:	2b05      	cmp	r3, #5
 8008c88:	d801      	bhi.n	8008c8e <__hexdig_fun+0x1a>
 8008c8a:	3847      	subs	r0, #71	; 0x47
 8008c8c:	e7f7      	b.n	8008c7e <__hexdig_fun+0xa>
 8008c8e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008c92:	2b05      	cmp	r3, #5
 8008c94:	d801      	bhi.n	8008c9a <__hexdig_fun+0x26>
 8008c96:	3827      	subs	r0, #39	; 0x27
 8008c98:	e7f1      	b.n	8008c7e <__hexdig_fun+0xa>
 8008c9a:	2000      	movs	r0, #0
 8008c9c:	4770      	bx	lr
	...

08008ca0 <__gethex>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	4617      	mov	r7, r2
 8008ca6:	680a      	ldr	r2, [r1, #0]
 8008ca8:	b085      	sub	sp, #20
 8008caa:	f102 0b02 	add.w	fp, r2, #2
 8008cae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008cb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008cb6:	4681      	mov	r9, r0
 8008cb8:	468a      	mov	sl, r1
 8008cba:	9302      	str	r3, [sp, #8]
 8008cbc:	32fe      	adds	r2, #254	; 0xfe
 8008cbe:	eb02 030b 	add.w	r3, r2, fp
 8008cc2:	46d8      	mov	r8, fp
 8008cc4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	2830      	cmp	r0, #48	; 0x30
 8008ccc:	d0f7      	beq.n	8008cbe <__gethex+0x1e>
 8008cce:	f7ff ffd1 	bl	8008c74 <__hexdig_fun>
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d138      	bne.n	8008d4a <__gethex+0xaa>
 8008cd8:	49a7      	ldr	r1, [pc, #668]	; (8008f78 <__gethex+0x2d8>)
 8008cda:	2201      	movs	r2, #1
 8008cdc:	4640      	mov	r0, r8
 8008cde:	f7ff fe8c 	bl	80089fa <strncmp>
 8008ce2:	4606      	mov	r6, r0
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d169      	bne.n	8008dbc <__gethex+0x11c>
 8008ce8:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008cec:	465d      	mov	r5, fp
 8008cee:	f7ff ffc1 	bl	8008c74 <__hexdig_fun>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	d064      	beq.n	8008dc0 <__gethex+0x120>
 8008cf6:	465a      	mov	r2, fp
 8008cf8:	7810      	ldrb	r0, [r2, #0]
 8008cfa:	2830      	cmp	r0, #48	; 0x30
 8008cfc:	4690      	mov	r8, r2
 8008cfe:	f102 0201 	add.w	r2, r2, #1
 8008d02:	d0f9      	beq.n	8008cf8 <__gethex+0x58>
 8008d04:	f7ff ffb6 	bl	8008c74 <__hexdig_fun>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	fab0 f480 	clz	r4, r0
 8008d0e:	0964      	lsrs	r4, r4, #5
 8008d10:	465e      	mov	r6, fp
 8008d12:	9301      	str	r3, [sp, #4]
 8008d14:	4642      	mov	r2, r8
 8008d16:	4615      	mov	r5, r2
 8008d18:	3201      	adds	r2, #1
 8008d1a:	7828      	ldrb	r0, [r5, #0]
 8008d1c:	f7ff ffaa 	bl	8008c74 <__hexdig_fun>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1f8      	bne.n	8008d16 <__gethex+0x76>
 8008d24:	4994      	ldr	r1, [pc, #592]	; (8008f78 <__gethex+0x2d8>)
 8008d26:	2201      	movs	r2, #1
 8008d28:	4628      	mov	r0, r5
 8008d2a:	f7ff fe66 	bl	80089fa <strncmp>
 8008d2e:	b978      	cbnz	r0, 8008d50 <__gethex+0xb0>
 8008d30:	b946      	cbnz	r6, 8008d44 <__gethex+0xa4>
 8008d32:	1c6e      	adds	r6, r5, #1
 8008d34:	4632      	mov	r2, r6
 8008d36:	4615      	mov	r5, r2
 8008d38:	3201      	adds	r2, #1
 8008d3a:	7828      	ldrb	r0, [r5, #0]
 8008d3c:	f7ff ff9a 	bl	8008c74 <__hexdig_fun>
 8008d40:	2800      	cmp	r0, #0
 8008d42:	d1f8      	bne.n	8008d36 <__gethex+0x96>
 8008d44:	1b73      	subs	r3, r6, r5
 8008d46:	009e      	lsls	r6, r3, #2
 8008d48:	e004      	b.n	8008d54 <__gethex+0xb4>
 8008d4a:	2400      	movs	r4, #0
 8008d4c:	4626      	mov	r6, r4
 8008d4e:	e7e1      	b.n	8008d14 <__gethex+0x74>
 8008d50:	2e00      	cmp	r6, #0
 8008d52:	d1f7      	bne.n	8008d44 <__gethex+0xa4>
 8008d54:	782b      	ldrb	r3, [r5, #0]
 8008d56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d5a:	2b50      	cmp	r3, #80	; 0x50
 8008d5c:	d13d      	bne.n	8008dda <__gethex+0x13a>
 8008d5e:	786b      	ldrb	r3, [r5, #1]
 8008d60:	2b2b      	cmp	r3, #43	; 0x2b
 8008d62:	d02f      	beq.n	8008dc4 <__gethex+0x124>
 8008d64:	2b2d      	cmp	r3, #45	; 0x2d
 8008d66:	d031      	beq.n	8008dcc <__gethex+0x12c>
 8008d68:	1c69      	adds	r1, r5, #1
 8008d6a:	f04f 0b00 	mov.w	fp, #0
 8008d6e:	7808      	ldrb	r0, [r1, #0]
 8008d70:	f7ff ff80 	bl	8008c74 <__hexdig_fun>
 8008d74:	1e42      	subs	r2, r0, #1
 8008d76:	b2d2      	uxtb	r2, r2
 8008d78:	2a18      	cmp	r2, #24
 8008d7a:	d82e      	bhi.n	8008dda <__gethex+0x13a>
 8008d7c:	f1a0 0210 	sub.w	r2, r0, #16
 8008d80:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d84:	f7ff ff76 	bl	8008c74 <__hexdig_fun>
 8008d88:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d8c:	fa5f fc8c 	uxtb.w	ip, ip
 8008d90:	f1bc 0f18 	cmp.w	ip, #24
 8008d94:	d91d      	bls.n	8008dd2 <__gethex+0x132>
 8008d96:	f1bb 0f00 	cmp.w	fp, #0
 8008d9a:	d000      	beq.n	8008d9e <__gethex+0xfe>
 8008d9c:	4252      	negs	r2, r2
 8008d9e:	4416      	add	r6, r2
 8008da0:	f8ca 1000 	str.w	r1, [sl]
 8008da4:	b1dc      	cbz	r4, 8008dde <__gethex+0x13e>
 8008da6:	9b01      	ldr	r3, [sp, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bf14      	ite	ne
 8008dac:	f04f 0800 	movne.w	r8, #0
 8008db0:	f04f 0806 	moveq.w	r8, #6
 8008db4:	4640      	mov	r0, r8
 8008db6:	b005      	add	sp, #20
 8008db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dbc:	4645      	mov	r5, r8
 8008dbe:	4626      	mov	r6, r4
 8008dc0:	2401      	movs	r4, #1
 8008dc2:	e7c7      	b.n	8008d54 <__gethex+0xb4>
 8008dc4:	f04f 0b00 	mov.w	fp, #0
 8008dc8:	1ca9      	adds	r1, r5, #2
 8008dca:	e7d0      	b.n	8008d6e <__gethex+0xce>
 8008dcc:	f04f 0b01 	mov.w	fp, #1
 8008dd0:	e7fa      	b.n	8008dc8 <__gethex+0x128>
 8008dd2:	230a      	movs	r3, #10
 8008dd4:	fb03 0002 	mla	r0, r3, r2, r0
 8008dd8:	e7d0      	b.n	8008d7c <__gethex+0xdc>
 8008dda:	4629      	mov	r1, r5
 8008ddc:	e7e0      	b.n	8008da0 <__gethex+0x100>
 8008dde:	eba5 0308 	sub.w	r3, r5, r8
 8008de2:	3b01      	subs	r3, #1
 8008de4:	4621      	mov	r1, r4
 8008de6:	2b07      	cmp	r3, #7
 8008de8:	dc0a      	bgt.n	8008e00 <__gethex+0x160>
 8008dea:	4648      	mov	r0, r9
 8008dec:	f000 fb06 	bl	80093fc <_Balloc>
 8008df0:	4604      	mov	r4, r0
 8008df2:	b940      	cbnz	r0, 8008e06 <__gethex+0x166>
 8008df4:	4b61      	ldr	r3, [pc, #388]	; (8008f7c <__gethex+0x2dc>)
 8008df6:	4602      	mov	r2, r0
 8008df8:	21e4      	movs	r1, #228	; 0xe4
 8008dfa:	4861      	ldr	r0, [pc, #388]	; (8008f80 <__gethex+0x2e0>)
 8008dfc:	f001 f876 	bl	8009eec <__assert_func>
 8008e00:	3101      	adds	r1, #1
 8008e02:	105b      	asrs	r3, r3, #1
 8008e04:	e7ef      	b.n	8008de6 <__gethex+0x146>
 8008e06:	f100 0a14 	add.w	sl, r0, #20
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	495a      	ldr	r1, [pc, #360]	; (8008f78 <__gethex+0x2d8>)
 8008e0e:	f8cd a004 	str.w	sl, [sp, #4]
 8008e12:	469b      	mov	fp, r3
 8008e14:	45a8      	cmp	r8, r5
 8008e16:	d342      	bcc.n	8008e9e <__gethex+0x1fe>
 8008e18:	9801      	ldr	r0, [sp, #4]
 8008e1a:	f840 bb04 	str.w	fp, [r0], #4
 8008e1e:	eba0 000a 	sub.w	r0, r0, sl
 8008e22:	1080      	asrs	r0, r0, #2
 8008e24:	6120      	str	r0, [r4, #16]
 8008e26:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008e2a:	4658      	mov	r0, fp
 8008e2c:	f000 fbd8 	bl	80095e0 <__hi0bits>
 8008e30:	683d      	ldr	r5, [r7, #0]
 8008e32:	eba8 0000 	sub.w	r0, r8, r0
 8008e36:	42a8      	cmp	r0, r5
 8008e38:	dd59      	ble.n	8008eee <__gethex+0x24e>
 8008e3a:	eba0 0805 	sub.w	r8, r0, r5
 8008e3e:	4641      	mov	r1, r8
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 ff67 	bl	8009d14 <__any_on>
 8008e46:	4683      	mov	fp, r0
 8008e48:	b1b8      	cbz	r0, 8008e7a <__gethex+0x1da>
 8008e4a:	f108 33ff 	add.w	r3, r8, #4294967295
 8008e4e:	1159      	asrs	r1, r3, #5
 8008e50:	f003 021f 	and.w	r2, r3, #31
 8008e54:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e58:	f04f 0b01 	mov.w	fp, #1
 8008e5c:	fa0b f202 	lsl.w	r2, fp, r2
 8008e60:	420a      	tst	r2, r1
 8008e62:	d00a      	beq.n	8008e7a <__gethex+0x1da>
 8008e64:	455b      	cmp	r3, fp
 8008e66:	dd06      	ble.n	8008e76 <__gethex+0x1d6>
 8008e68:	f1a8 0102 	sub.w	r1, r8, #2
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 ff51 	bl	8009d14 <__any_on>
 8008e72:	2800      	cmp	r0, #0
 8008e74:	d138      	bne.n	8008ee8 <__gethex+0x248>
 8008e76:	f04f 0b02 	mov.w	fp, #2
 8008e7a:	4641      	mov	r1, r8
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f7ff fea7 	bl	8008bd0 <rshift>
 8008e82:	4446      	add	r6, r8
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	42b3      	cmp	r3, r6
 8008e88:	da41      	bge.n	8008f0e <__gethex+0x26e>
 8008e8a:	4621      	mov	r1, r4
 8008e8c:	4648      	mov	r0, r9
 8008e8e:	f000 faf5 	bl	800947c <_Bfree>
 8008e92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e94:	2300      	movs	r3, #0
 8008e96:	6013      	str	r3, [r2, #0]
 8008e98:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008e9c:	e78a      	b.n	8008db4 <__gethex+0x114>
 8008e9e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008ea2:	2a2e      	cmp	r2, #46	; 0x2e
 8008ea4:	d014      	beq.n	8008ed0 <__gethex+0x230>
 8008ea6:	2b20      	cmp	r3, #32
 8008ea8:	d106      	bne.n	8008eb8 <__gethex+0x218>
 8008eaa:	9b01      	ldr	r3, [sp, #4]
 8008eac:	f843 bb04 	str.w	fp, [r3], #4
 8008eb0:	f04f 0b00 	mov.w	fp, #0
 8008eb4:	9301      	str	r3, [sp, #4]
 8008eb6:	465b      	mov	r3, fp
 8008eb8:	7828      	ldrb	r0, [r5, #0]
 8008eba:	9303      	str	r3, [sp, #12]
 8008ebc:	f7ff feda 	bl	8008c74 <__hexdig_fun>
 8008ec0:	9b03      	ldr	r3, [sp, #12]
 8008ec2:	f000 000f 	and.w	r0, r0, #15
 8008ec6:	4098      	lsls	r0, r3
 8008ec8:	ea4b 0b00 	orr.w	fp, fp, r0
 8008ecc:	3304      	adds	r3, #4
 8008ece:	e7a1      	b.n	8008e14 <__gethex+0x174>
 8008ed0:	45a8      	cmp	r8, r5
 8008ed2:	d8e8      	bhi.n	8008ea6 <__gethex+0x206>
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	4628      	mov	r0, r5
 8008ed8:	9303      	str	r3, [sp, #12]
 8008eda:	f7ff fd8e 	bl	80089fa <strncmp>
 8008ede:	4926      	ldr	r1, [pc, #152]	; (8008f78 <__gethex+0x2d8>)
 8008ee0:	9b03      	ldr	r3, [sp, #12]
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	d1df      	bne.n	8008ea6 <__gethex+0x206>
 8008ee6:	e795      	b.n	8008e14 <__gethex+0x174>
 8008ee8:	f04f 0b03 	mov.w	fp, #3
 8008eec:	e7c5      	b.n	8008e7a <__gethex+0x1da>
 8008eee:	da0b      	bge.n	8008f08 <__gethex+0x268>
 8008ef0:	eba5 0800 	sub.w	r8, r5, r0
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	4642      	mov	r2, r8
 8008ef8:	4648      	mov	r0, r9
 8008efa:	f000 fcd9 	bl	80098b0 <__lshift>
 8008efe:	eba6 0608 	sub.w	r6, r6, r8
 8008f02:	4604      	mov	r4, r0
 8008f04:	f100 0a14 	add.w	sl, r0, #20
 8008f08:	f04f 0b00 	mov.w	fp, #0
 8008f0c:	e7ba      	b.n	8008e84 <__gethex+0x1e4>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	42b3      	cmp	r3, r6
 8008f12:	dd73      	ble.n	8008ffc <__gethex+0x35c>
 8008f14:	1b9e      	subs	r6, r3, r6
 8008f16:	42b5      	cmp	r5, r6
 8008f18:	dc34      	bgt.n	8008f84 <__gethex+0x2e4>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b02      	cmp	r3, #2
 8008f1e:	d023      	beq.n	8008f68 <__gethex+0x2c8>
 8008f20:	2b03      	cmp	r3, #3
 8008f22:	d025      	beq.n	8008f70 <__gethex+0x2d0>
 8008f24:	2b01      	cmp	r3, #1
 8008f26:	d115      	bne.n	8008f54 <__gethex+0x2b4>
 8008f28:	42b5      	cmp	r5, r6
 8008f2a:	d113      	bne.n	8008f54 <__gethex+0x2b4>
 8008f2c:	2d01      	cmp	r5, #1
 8008f2e:	d10b      	bne.n	8008f48 <__gethex+0x2a8>
 8008f30:	9a02      	ldr	r2, [sp, #8]
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	2301      	movs	r3, #1
 8008f38:	6123      	str	r3, [r4, #16]
 8008f3a:	f8ca 3000 	str.w	r3, [sl]
 8008f3e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f40:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008f44:	601c      	str	r4, [r3, #0]
 8008f46:	e735      	b.n	8008db4 <__gethex+0x114>
 8008f48:	1e69      	subs	r1, r5, #1
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 fee2 	bl	8009d14 <__any_on>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	d1ed      	bne.n	8008f30 <__gethex+0x290>
 8008f54:	4621      	mov	r1, r4
 8008f56:	4648      	mov	r0, r9
 8008f58:	f000 fa90 	bl	800947c <_Bfree>
 8008f5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f5e:	2300      	movs	r3, #0
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008f66:	e725      	b.n	8008db4 <__gethex+0x114>
 8008f68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d1f2      	bne.n	8008f54 <__gethex+0x2b4>
 8008f6e:	e7df      	b.n	8008f30 <__gethex+0x290>
 8008f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1dc      	bne.n	8008f30 <__gethex+0x290>
 8008f76:	e7ed      	b.n	8008f54 <__gethex+0x2b4>
 8008f78:	0800bbf8 	.word	0x0800bbf8
 8008f7c:	0800bc60 	.word	0x0800bc60
 8008f80:	0800bc71 	.word	0x0800bc71
 8008f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8008f88:	f1bb 0f00 	cmp.w	fp, #0
 8008f8c:	d133      	bne.n	8008ff6 <__gethex+0x356>
 8008f8e:	f1b8 0f00 	cmp.w	r8, #0
 8008f92:	d004      	beq.n	8008f9e <__gethex+0x2fe>
 8008f94:	4641      	mov	r1, r8
 8008f96:	4620      	mov	r0, r4
 8008f98:	f000 febc 	bl	8009d14 <__any_on>
 8008f9c:	4683      	mov	fp, r0
 8008f9e:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008fa8:	f008 081f 	and.w	r8, r8, #31
 8008fac:	fa03 f308 	lsl.w	r3, r3, r8
 8008fb0:	4213      	tst	r3, r2
 8008fb2:	4631      	mov	r1, r6
 8008fb4:	4620      	mov	r0, r4
 8008fb6:	bf18      	it	ne
 8008fb8:	f04b 0b02 	orrne.w	fp, fp, #2
 8008fbc:	1bad      	subs	r5, r5, r6
 8008fbe:	f7ff fe07 	bl	8008bd0 <rshift>
 8008fc2:	687e      	ldr	r6, [r7, #4]
 8008fc4:	f04f 0802 	mov.w	r8, #2
 8008fc8:	f1bb 0f00 	cmp.w	fp, #0
 8008fcc:	d04a      	beq.n	8009064 <__gethex+0x3c4>
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d016      	beq.n	8009002 <__gethex+0x362>
 8008fd4:	2b03      	cmp	r3, #3
 8008fd6:	d018      	beq.n	800900a <__gethex+0x36a>
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d109      	bne.n	8008ff0 <__gethex+0x350>
 8008fdc:	f01b 0f02 	tst.w	fp, #2
 8008fe0:	d006      	beq.n	8008ff0 <__gethex+0x350>
 8008fe2:	f8da 3000 	ldr.w	r3, [sl]
 8008fe6:	ea4b 0b03 	orr.w	fp, fp, r3
 8008fea:	f01b 0f01 	tst.w	fp, #1
 8008fee:	d10f      	bne.n	8009010 <__gethex+0x370>
 8008ff0:	f048 0810 	orr.w	r8, r8, #16
 8008ff4:	e036      	b.n	8009064 <__gethex+0x3c4>
 8008ff6:	f04f 0b01 	mov.w	fp, #1
 8008ffa:	e7d0      	b.n	8008f9e <__gethex+0x2fe>
 8008ffc:	f04f 0801 	mov.w	r8, #1
 8009000:	e7e2      	b.n	8008fc8 <__gethex+0x328>
 8009002:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009004:	f1c3 0301 	rsb	r3, r3, #1
 8009008:	930f      	str	r3, [sp, #60]	; 0x3c
 800900a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0ef      	beq.n	8008ff0 <__gethex+0x350>
 8009010:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009014:	f104 0214 	add.w	r2, r4, #20
 8009018:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009022:	2300      	movs	r3, #0
 8009024:	4694      	mov	ip, r2
 8009026:	f852 1b04 	ldr.w	r1, [r2], #4
 800902a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800902e:	d01e      	beq.n	800906e <__gethex+0x3ce>
 8009030:	3101      	adds	r1, #1
 8009032:	f8cc 1000 	str.w	r1, [ip]
 8009036:	f1b8 0f02 	cmp.w	r8, #2
 800903a:	f104 0214 	add.w	r2, r4, #20
 800903e:	d13d      	bne.n	80090bc <__gethex+0x41c>
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	3b01      	subs	r3, #1
 8009044:	42ab      	cmp	r3, r5
 8009046:	d10b      	bne.n	8009060 <__gethex+0x3c0>
 8009048:	1169      	asrs	r1, r5, #5
 800904a:	2301      	movs	r3, #1
 800904c:	f005 051f 	and.w	r5, r5, #31
 8009050:	fa03 f505 	lsl.w	r5, r3, r5
 8009054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009058:	421d      	tst	r5, r3
 800905a:	bf18      	it	ne
 800905c:	f04f 0801 	movne.w	r8, #1
 8009060:	f048 0820 	orr.w	r8, r8, #32
 8009064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009066:	601c      	str	r4, [r3, #0]
 8009068:	9b02      	ldr	r3, [sp, #8]
 800906a:	601e      	str	r6, [r3, #0]
 800906c:	e6a2      	b.n	8008db4 <__gethex+0x114>
 800906e:	4290      	cmp	r0, r2
 8009070:	f842 3c04 	str.w	r3, [r2, #-4]
 8009074:	d8d6      	bhi.n	8009024 <__gethex+0x384>
 8009076:	68a2      	ldr	r2, [r4, #8]
 8009078:	4593      	cmp	fp, r2
 800907a:	db17      	blt.n	80090ac <__gethex+0x40c>
 800907c:	6861      	ldr	r1, [r4, #4]
 800907e:	4648      	mov	r0, r9
 8009080:	3101      	adds	r1, #1
 8009082:	f000 f9bb 	bl	80093fc <_Balloc>
 8009086:	4682      	mov	sl, r0
 8009088:	b918      	cbnz	r0, 8009092 <__gethex+0x3f2>
 800908a:	4b1b      	ldr	r3, [pc, #108]	; (80090f8 <__gethex+0x458>)
 800908c:	4602      	mov	r2, r0
 800908e:	2184      	movs	r1, #132	; 0x84
 8009090:	e6b3      	b.n	8008dfa <__gethex+0x15a>
 8009092:	6922      	ldr	r2, [r4, #16]
 8009094:	3202      	adds	r2, #2
 8009096:	f104 010c 	add.w	r1, r4, #12
 800909a:	0092      	lsls	r2, r2, #2
 800909c:	300c      	adds	r0, #12
 800909e:	f7ff fd32 	bl	8008b06 <memcpy>
 80090a2:	4621      	mov	r1, r4
 80090a4:	4648      	mov	r0, r9
 80090a6:	f000 f9e9 	bl	800947c <_Bfree>
 80090aa:	4654      	mov	r4, sl
 80090ac:	6922      	ldr	r2, [r4, #16]
 80090ae:	1c51      	adds	r1, r2, #1
 80090b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80090b4:	6121      	str	r1, [r4, #16]
 80090b6:	2101      	movs	r1, #1
 80090b8:	6151      	str	r1, [r2, #20]
 80090ba:	e7bc      	b.n	8009036 <__gethex+0x396>
 80090bc:	6921      	ldr	r1, [r4, #16]
 80090be:	4559      	cmp	r1, fp
 80090c0:	dd0b      	ble.n	80090da <__gethex+0x43a>
 80090c2:	2101      	movs	r1, #1
 80090c4:	4620      	mov	r0, r4
 80090c6:	f7ff fd83 	bl	8008bd0 <rshift>
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	3601      	adds	r6, #1
 80090ce:	42b3      	cmp	r3, r6
 80090d0:	f6ff aedb 	blt.w	8008e8a <__gethex+0x1ea>
 80090d4:	f04f 0801 	mov.w	r8, #1
 80090d8:	e7c2      	b.n	8009060 <__gethex+0x3c0>
 80090da:	f015 051f 	ands.w	r5, r5, #31
 80090de:	d0f9      	beq.n	80090d4 <__gethex+0x434>
 80090e0:	9b01      	ldr	r3, [sp, #4]
 80090e2:	441a      	add	r2, r3
 80090e4:	f1c5 0520 	rsb	r5, r5, #32
 80090e8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80090ec:	f000 fa78 	bl	80095e0 <__hi0bits>
 80090f0:	42a8      	cmp	r0, r5
 80090f2:	dbe6      	blt.n	80090c2 <__gethex+0x422>
 80090f4:	e7ee      	b.n	80090d4 <__gethex+0x434>
 80090f6:	bf00      	nop
 80090f8:	0800bc60 	.word	0x0800bc60

080090fc <L_shift>:
 80090fc:	f1c2 0208 	rsb	r2, r2, #8
 8009100:	0092      	lsls	r2, r2, #2
 8009102:	b570      	push	{r4, r5, r6, lr}
 8009104:	f1c2 0620 	rsb	r6, r2, #32
 8009108:	6843      	ldr	r3, [r0, #4]
 800910a:	6804      	ldr	r4, [r0, #0]
 800910c:	fa03 f506 	lsl.w	r5, r3, r6
 8009110:	432c      	orrs	r4, r5
 8009112:	40d3      	lsrs	r3, r2
 8009114:	6004      	str	r4, [r0, #0]
 8009116:	f840 3f04 	str.w	r3, [r0, #4]!
 800911a:	4288      	cmp	r0, r1
 800911c:	d3f4      	bcc.n	8009108 <L_shift+0xc>
 800911e:	bd70      	pop	{r4, r5, r6, pc}

08009120 <__match>:
 8009120:	b530      	push	{r4, r5, lr}
 8009122:	6803      	ldr	r3, [r0, #0]
 8009124:	3301      	adds	r3, #1
 8009126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800912a:	b914      	cbnz	r4, 8009132 <__match+0x12>
 800912c:	6003      	str	r3, [r0, #0]
 800912e:	2001      	movs	r0, #1
 8009130:	bd30      	pop	{r4, r5, pc}
 8009132:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009136:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800913a:	2d19      	cmp	r5, #25
 800913c:	bf98      	it	ls
 800913e:	3220      	addls	r2, #32
 8009140:	42a2      	cmp	r2, r4
 8009142:	d0f0      	beq.n	8009126 <__match+0x6>
 8009144:	2000      	movs	r0, #0
 8009146:	e7f3      	b.n	8009130 <__match+0x10>

08009148 <__hexnan>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	680b      	ldr	r3, [r1, #0]
 800914e:	6801      	ldr	r1, [r0, #0]
 8009150:	115e      	asrs	r6, r3, #5
 8009152:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009156:	f013 031f 	ands.w	r3, r3, #31
 800915a:	b087      	sub	sp, #28
 800915c:	bf18      	it	ne
 800915e:	3604      	addne	r6, #4
 8009160:	2500      	movs	r5, #0
 8009162:	1f37      	subs	r7, r6, #4
 8009164:	4682      	mov	sl, r0
 8009166:	4690      	mov	r8, r2
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	f846 5c04 	str.w	r5, [r6, #-4]
 800916e:	46b9      	mov	r9, r7
 8009170:	463c      	mov	r4, r7
 8009172:	9502      	str	r5, [sp, #8]
 8009174:	46ab      	mov	fp, r5
 8009176:	784a      	ldrb	r2, [r1, #1]
 8009178:	1c4b      	adds	r3, r1, #1
 800917a:	9303      	str	r3, [sp, #12]
 800917c:	b342      	cbz	r2, 80091d0 <__hexnan+0x88>
 800917e:	4610      	mov	r0, r2
 8009180:	9105      	str	r1, [sp, #20]
 8009182:	9204      	str	r2, [sp, #16]
 8009184:	f7ff fd76 	bl	8008c74 <__hexdig_fun>
 8009188:	2800      	cmp	r0, #0
 800918a:	d14f      	bne.n	800922c <__hexnan+0xe4>
 800918c:	9a04      	ldr	r2, [sp, #16]
 800918e:	9905      	ldr	r1, [sp, #20]
 8009190:	2a20      	cmp	r2, #32
 8009192:	d818      	bhi.n	80091c6 <__hexnan+0x7e>
 8009194:	9b02      	ldr	r3, [sp, #8]
 8009196:	459b      	cmp	fp, r3
 8009198:	dd13      	ble.n	80091c2 <__hexnan+0x7a>
 800919a:	454c      	cmp	r4, r9
 800919c:	d206      	bcs.n	80091ac <__hexnan+0x64>
 800919e:	2d07      	cmp	r5, #7
 80091a0:	dc04      	bgt.n	80091ac <__hexnan+0x64>
 80091a2:	462a      	mov	r2, r5
 80091a4:	4649      	mov	r1, r9
 80091a6:	4620      	mov	r0, r4
 80091a8:	f7ff ffa8 	bl	80090fc <L_shift>
 80091ac:	4544      	cmp	r4, r8
 80091ae:	d950      	bls.n	8009252 <__hexnan+0x10a>
 80091b0:	2300      	movs	r3, #0
 80091b2:	f1a4 0904 	sub.w	r9, r4, #4
 80091b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80091ba:	f8cd b008 	str.w	fp, [sp, #8]
 80091be:	464c      	mov	r4, r9
 80091c0:	461d      	mov	r5, r3
 80091c2:	9903      	ldr	r1, [sp, #12]
 80091c4:	e7d7      	b.n	8009176 <__hexnan+0x2e>
 80091c6:	2a29      	cmp	r2, #41	; 0x29
 80091c8:	d155      	bne.n	8009276 <__hexnan+0x12e>
 80091ca:	3102      	adds	r1, #2
 80091cc:	f8ca 1000 	str.w	r1, [sl]
 80091d0:	f1bb 0f00 	cmp.w	fp, #0
 80091d4:	d04f      	beq.n	8009276 <__hexnan+0x12e>
 80091d6:	454c      	cmp	r4, r9
 80091d8:	d206      	bcs.n	80091e8 <__hexnan+0xa0>
 80091da:	2d07      	cmp	r5, #7
 80091dc:	dc04      	bgt.n	80091e8 <__hexnan+0xa0>
 80091de:	462a      	mov	r2, r5
 80091e0:	4649      	mov	r1, r9
 80091e2:	4620      	mov	r0, r4
 80091e4:	f7ff ff8a 	bl	80090fc <L_shift>
 80091e8:	4544      	cmp	r4, r8
 80091ea:	d934      	bls.n	8009256 <__hexnan+0x10e>
 80091ec:	f1a8 0204 	sub.w	r2, r8, #4
 80091f0:	4623      	mov	r3, r4
 80091f2:	f853 1b04 	ldr.w	r1, [r3], #4
 80091f6:	f842 1f04 	str.w	r1, [r2, #4]!
 80091fa:	429f      	cmp	r7, r3
 80091fc:	d2f9      	bcs.n	80091f2 <__hexnan+0xaa>
 80091fe:	1b3b      	subs	r3, r7, r4
 8009200:	f023 0303 	bic.w	r3, r3, #3
 8009204:	3304      	adds	r3, #4
 8009206:	3e03      	subs	r6, #3
 8009208:	3401      	adds	r4, #1
 800920a:	42a6      	cmp	r6, r4
 800920c:	bf38      	it	cc
 800920e:	2304      	movcc	r3, #4
 8009210:	4443      	add	r3, r8
 8009212:	2200      	movs	r2, #0
 8009214:	f843 2b04 	str.w	r2, [r3], #4
 8009218:	429f      	cmp	r7, r3
 800921a:	d2fb      	bcs.n	8009214 <__hexnan+0xcc>
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	b91b      	cbnz	r3, 8009228 <__hexnan+0xe0>
 8009220:	4547      	cmp	r7, r8
 8009222:	d126      	bne.n	8009272 <__hexnan+0x12a>
 8009224:	2301      	movs	r3, #1
 8009226:	603b      	str	r3, [r7, #0]
 8009228:	2005      	movs	r0, #5
 800922a:	e025      	b.n	8009278 <__hexnan+0x130>
 800922c:	3501      	adds	r5, #1
 800922e:	2d08      	cmp	r5, #8
 8009230:	f10b 0b01 	add.w	fp, fp, #1
 8009234:	dd06      	ble.n	8009244 <__hexnan+0xfc>
 8009236:	4544      	cmp	r4, r8
 8009238:	d9c3      	bls.n	80091c2 <__hexnan+0x7a>
 800923a:	2300      	movs	r3, #0
 800923c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009240:	2501      	movs	r5, #1
 8009242:	3c04      	subs	r4, #4
 8009244:	6822      	ldr	r2, [r4, #0]
 8009246:	f000 000f 	and.w	r0, r0, #15
 800924a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800924e:	6020      	str	r0, [r4, #0]
 8009250:	e7b7      	b.n	80091c2 <__hexnan+0x7a>
 8009252:	2508      	movs	r5, #8
 8009254:	e7b5      	b.n	80091c2 <__hexnan+0x7a>
 8009256:	9b01      	ldr	r3, [sp, #4]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d0df      	beq.n	800921c <__hexnan+0xd4>
 800925c:	f1c3 0320 	rsb	r3, r3, #32
 8009260:	f04f 32ff 	mov.w	r2, #4294967295
 8009264:	40da      	lsrs	r2, r3
 8009266:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800926a:	4013      	ands	r3, r2
 800926c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009270:	e7d4      	b.n	800921c <__hexnan+0xd4>
 8009272:	3f04      	subs	r7, #4
 8009274:	e7d2      	b.n	800921c <__hexnan+0xd4>
 8009276:	2004      	movs	r0, #4
 8009278:	b007      	add	sp, #28
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009280 <sbrk_aligned>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	4e0e      	ldr	r6, [pc, #56]	; (80092bc <sbrk_aligned+0x3c>)
 8009284:	460c      	mov	r4, r1
 8009286:	6831      	ldr	r1, [r6, #0]
 8009288:	4605      	mov	r5, r0
 800928a:	b911      	cbnz	r1, 8009292 <sbrk_aligned+0x12>
 800928c:	f000 fe1e 	bl	8009ecc <_sbrk_r>
 8009290:	6030      	str	r0, [r6, #0]
 8009292:	4621      	mov	r1, r4
 8009294:	4628      	mov	r0, r5
 8009296:	f000 fe19 	bl	8009ecc <_sbrk_r>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	d00a      	beq.n	80092b4 <sbrk_aligned+0x34>
 800929e:	1cc4      	adds	r4, r0, #3
 80092a0:	f024 0403 	bic.w	r4, r4, #3
 80092a4:	42a0      	cmp	r0, r4
 80092a6:	d007      	beq.n	80092b8 <sbrk_aligned+0x38>
 80092a8:	1a21      	subs	r1, r4, r0
 80092aa:	4628      	mov	r0, r5
 80092ac:	f000 fe0e 	bl	8009ecc <_sbrk_r>
 80092b0:	3001      	adds	r0, #1
 80092b2:	d101      	bne.n	80092b8 <sbrk_aligned+0x38>
 80092b4:	f04f 34ff 	mov.w	r4, #4294967295
 80092b8:	4620      	mov	r0, r4
 80092ba:	bd70      	pop	{r4, r5, r6, pc}
 80092bc:	200007e0 	.word	0x200007e0

080092c0 <_malloc_r>:
 80092c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092c4:	1ccd      	adds	r5, r1, #3
 80092c6:	f025 0503 	bic.w	r5, r5, #3
 80092ca:	3508      	adds	r5, #8
 80092cc:	2d0c      	cmp	r5, #12
 80092ce:	bf38      	it	cc
 80092d0:	250c      	movcc	r5, #12
 80092d2:	2d00      	cmp	r5, #0
 80092d4:	4607      	mov	r7, r0
 80092d6:	db01      	blt.n	80092dc <_malloc_r+0x1c>
 80092d8:	42a9      	cmp	r1, r5
 80092da:	d905      	bls.n	80092e8 <_malloc_r+0x28>
 80092dc:	230c      	movs	r3, #12
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	2600      	movs	r6, #0
 80092e2:	4630      	mov	r0, r6
 80092e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80093bc <_malloc_r+0xfc>
 80092ec:	f000 f87a 	bl	80093e4 <__malloc_lock>
 80092f0:	f8d8 3000 	ldr.w	r3, [r8]
 80092f4:	461c      	mov	r4, r3
 80092f6:	bb5c      	cbnz	r4, 8009350 <_malloc_r+0x90>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4638      	mov	r0, r7
 80092fc:	f7ff ffc0 	bl	8009280 <sbrk_aligned>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	4604      	mov	r4, r0
 8009304:	d155      	bne.n	80093b2 <_malloc_r+0xf2>
 8009306:	f8d8 4000 	ldr.w	r4, [r8]
 800930a:	4626      	mov	r6, r4
 800930c:	2e00      	cmp	r6, #0
 800930e:	d145      	bne.n	800939c <_malloc_r+0xdc>
 8009310:	2c00      	cmp	r4, #0
 8009312:	d048      	beq.n	80093a6 <_malloc_r+0xe6>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	4631      	mov	r1, r6
 8009318:	4638      	mov	r0, r7
 800931a:	eb04 0903 	add.w	r9, r4, r3
 800931e:	f000 fdd5 	bl	8009ecc <_sbrk_r>
 8009322:	4581      	cmp	r9, r0
 8009324:	d13f      	bne.n	80093a6 <_malloc_r+0xe6>
 8009326:	6821      	ldr	r1, [r4, #0]
 8009328:	1a6d      	subs	r5, r5, r1
 800932a:	4629      	mov	r1, r5
 800932c:	4638      	mov	r0, r7
 800932e:	f7ff ffa7 	bl	8009280 <sbrk_aligned>
 8009332:	3001      	adds	r0, #1
 8009334:	d037      	beq.n	80093a6 <_malloc_r+0xe6>
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	442b      	add	r3, r5
 800933a:	6023      	str	r3, [r4, #0]
 800933c:	f8d8 3000 	ldr.w	r3, [r8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d038      	beq.n	80093b6 <_malloc_r+0xf6>
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	42a2      	cmp	r2, r4
 8009348:	d12b      	bne.n	80093a2 <_malloc_r+0xe2>
 800934a:	2200      	movs	r2, #0
 800934c:	605a      	str	r2, [r3, #4]
 800934e:	e00f      	b.n	8009370 <_malloc_r+0xb0>
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	1b52      	subs	r2, r2, r5
 8009354:	d41f      	bmi.n	8009396 <_malloc_r+0xd6>
 8009356:	2a0b      	cmp	r2, #11
 8009358:	d917      	bls.n	800938a <_malloc_r+0xca>
 800935a:	1961      	adds	r1, r4, r5
 800935c:	42a3      	cmp	r3, r4
 800935e:	6025      	str	r5, [r4, #0]
 8009360:	bf18      	it	ne
 8009362:	6059      	strne	r1, [r3, #4]
 8009364:	6863      	ldr	r3, [r4, #4]
 8009366:	bf08      	it	eq
 8009368:	f8c8 1000 	streq.w	r1, [r8]
 800936c:	5162      	str	r2, [r4, r5]
 800936e:	604b      	str	r3, [r1, #4]
 8009370:	4638      	mov	r0, r7
 8009372:	f104 060b 	add.w	r6, r4, #11
 8009376:	f000 f83b 	bl	80093f0 <__malloc_unlock>
 800937a:	f026 0607 	bic.w	r6, r6, #7
 800937e:	1d23      	adds	r3, r4, #4
 8009380:	1af2      	subs	r2, r6, r3
 8009382:	d0ae      	beq.n	80092e2 <_malloc_r+0x22>
 8009384:	1b9b      	subs	r3, r3, r6
 8009386:	50a3      	str	r3, [r4, r2]
 8009388:	e7ab      	b.n	80092e2 <_malloc_r+0x22>
 800938a:	42a3      	cmp	r3, r4
 800938c:	6862      	ldr	r2, [r4, #4]
 800938e:	d1dd      	bne.n	800934c <_malloc_r+0x8c>
 8009390:	f8c8 2000 	str.w	r2, [r8]
 8009394:	e7ec      	b.n	8009370 <_malloc_r+0xb0>
 8009396:	4623      	mov	r3, r4
 8009398:	6864      	ldr	r4, [r4, #4]
 800939a:	e7ac      	b.n	80092f6 <_malloc_r+0x36>
 800939c:	4634      	mov	r4, r6
 800939e:	6876      	ldr	r6, [r6, #4]
 80093a0:	e7b4      	b.n	800930c <_malloc_r+0x4c>
 80093a2:	4613      	mov	r3, r2
 80093a4:	e7cc      	b.n	8009340 <_malloc_r+0x80>
 80093a6:	230c      	movs	r3, #12
 80093a8:	603b      	str	r3, [r7, #0]
 80093aa:	4638      	mov	r0, r7
 80093ac:	f000 f820 	bl	80093f0 <__malloc_unlock>
 80093b0:	e797      	b.n	80092e2 <_malloc_r+0x22>
 80093b2:	6025      	str	r5, [r4, #0]
 80093b4:	e7dc      	b.n	8009370 <_malloc_r+0xb0>
 80093b6:	605b      	str	r3, [r3, #4]
 80093b8:	deff      	udf	#255	; 0xff
 80093ba:	bf00      	nop
 80093bc:	200007dc 	.word	0x200007dc

080093c0 <__ascii_mbtowc>:
 80093c0:	b082      	sub	sp, #8
 80093c2:	b901      	cbnz	r1, 80093c6 <__ascii_mbtowc+0x6>
 80093c4:	a901      	add	r1, sp, #4
 80093c6:	b142      	cbz	r2, 80093da <__ascii_mbtowc+0x1a>
 80093c8:	b14b      	cbz	r3, 80093de <__ascii_mbtowc+0x1e>
 80093ca:	7813      	ldrb	r3, [r2, #0]
 80093cc:	600b      	str	r3, [r1, #0]
 80093ce:	7812      	ldrb	r2, [r2, #0]
 80093d0:	1e10      	subs	r0, r2, #0
 80093d2:	bf18      	it	ne
 80093d4:	2001      	movne	r0, #1
 80093d6:	b002      	add	sp, #8
 80093d8:	4770      	bx	lr
 80093da:	4610      	mov	r0, r2
 80093dc:	e7fb      	b.n	80093d6 <__ascii_mbtowc+0x16>
 80093de:	f06f 0001 	mvn.w	r0, #1
 80093e2:	e7f8      	b.n	80093d6 <__ascii_mbtowc+0x16>

080093e4 <__malloc_lock>:
 80093e4:	4801      	ldr	r0, [pc, #4]	; (80093ec <__malloc_lock+0x8>)
 80093e6:	f7ff bb8c 	b.w	8008b02 <__retarget_lock_acquire_recursive>
 80093ea:	bf00      	nop
 80093ec:	200007d8 	.word	0x200007d8

080093f0 <__malloc_unlock>:
 80093f0:	4801      	ldr	r0, [pc, #4]	; (80093f8 <__malloc_unlock+0x8>)
 80093f2:	f7ff bb87 	b.w	8008b04 <__retarget_lock_release_recursive>
 80093f6:	bf00      	nop
 80093f8:	200007d8 	.word	0x200007d8

080093fc <_Balloc>:
 80093fc:	b570      	push	{r4, r5, r6, lr}
 80093fe:	69c6      	ldr	r6, [r0, #28]
 8009400:	4604      	mov	r4, r0
 8009402:	460d      	mov	r5, r1
 8009404:	b976      	cbnz	r6, 8009424 <_Balloc+0x28>
 8009406:	2010      	movs	r0, #16
 8009408:	f000 fda4 	bl	8009f54 <malloc>
 800940c:	4602      	mov	r2, r0
 800940e:	61e0      	str	r0, [r4, #28]
 8009410:	b920      	cbnz	r0, 800941c <_Balloc+0x20>
 8009412:	4b18      	ldr	r3, [pc, #96]	; (8009474 <_Balloc+0x78>)
 8009414:	4818      	ldr	r0, [pc, #96]	; (8009478 <_Balloc+0x7c>)
 8009416:	216b      	movs	r1, #107	; 0x6b
 8009418:	f000 fd68 	bl	8009eec <__assert_func>
 800941c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009420:	6006      	str	r6, [r0, #0]
 8009422:	60c6      	str	r6, [r0, #12]
 8009424:	69e6      	ldr	r6, [r4, #28]
 8009426:	68f3      	ldr	r3, [r6, #12]
 8009428:	b183      	cbz	r3, 800944c <_Balloc+0x50>
 800942a:	69e3      	ldr	r3, [r4, #28]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009432:	b9b8      	cbnz	r0, 8009464 <_Balloc+0x68>
 8009434:	2101      	movs	r1, #1
 8009436:	fa01 f605 	lsl.w	r6, r1, r5
 800943a:	1d72      	adds	r2, r6, #5
 800943c:	0092      	lsls	r2, r2, #2
 800943e:	4620      	mov	r0, r4
 8009440:	f000 fd72 	bl	8009f28 <_calloc_r>
 8009444:	b160      	cbz	r0, 8009460 <_Balloc+0x64>
 8009446:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800944a:	e00e      	b.n	800946a <_Balloc+0x6e>
 800944c:	2221      	movs	r2, #33	; 0x21
 800944e:	2104      	movs	r1, #4
 8009450:	4620      	mov	r0, r4
 8009452:	f000 fd69 	bl	8009f28 <_calloc_r>
 8009456:	69e3      	ldr	r3, [r4, #28]
 8009458:	60f0      	str	r0, [r6, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d1e4      	bne.n	800942a <_Balloc+0x2e>
 8009460:	2000      	movs	r0, #0
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	6802      	ldr	r2, [r0, #0]
 8009466:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800946a:	2300      	movs	r3, #0
 800946c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009470:	e7f7      	b.n	8009462 <_Balloc+0x66>
 8009472:	bf00      	nop
 8009474:	0800bcd1 	.word	0x0800bcd1
 8009478:	0800bce8 	.word	0x0800bce8

0800947c <_Bfree>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	69c6      	ldr	r6, [r0, #28]
 8009480:	4605      	mov	r5, r0
 8009482:	460c      	mov	r4, r1
 8009484:	b976      	cbnz	r6, 80094a4 <_Bfree+0x28>
 8009486:	2010      	movs	r0, #16
 8009488:	f000 fd64 	bl	8009f54 <malloc>
 800948c:	4602      	mov	r2, r0
 800948e:	61e8      	str	r0, [r5, #28]
 8009490:	b920      	cbnz	r0, 800949c <_Bfree+0x20>
 8009492:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <_Bfree+0x3c>)
 8009494:	4809      	ldr	r0, [pc, #36]	; (80094bc <_Bfree+0x40>)
 8009496:	218f      	movs	r1, #143	; 0x8f
 8009498:	f000 fd28 	bl	8009eec <__assert_func>
 800949c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80094a0:	6006      	str	r6, [r0, #0]
 80094a2:	60c6      	str	r6, [r0, #12]
 80094a4:	b13c      	cbz	r4, 80094b6 <_Bfree+0x3a>
 80094a6:	69eb      	ldr	r3, [r5, #28]
 80094a8:	6862      	ldr	r2, [r4, #4]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094b0:	6021      	str	r1, [r4, #0]
 80094b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	0800bcd1 	.word	0x0800bcd1
 80094bc:	0800bce8 	.word	0x0800bce8

080094c0 <__multadd>:
 80094c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c4:	690d      	ldr	r5, [r1, #16]
 80094c6:	4607      	mov	r7, r0
 80094c8:	460c      	mov	r4, r1
 80094ca:	461e      	mov	r6, r3
 80094cc:	f101 0c14 	add.w	ip, r1, #20
 80094d0:	2000      	movs	r0, #0
 80094d2:	f8dc 3000 	ldr.w	r3, [ip]
 80094d6:	b299      	uxth	r1, r3
 80094d8:	fb02 6101 	mla	r1, r2, r1, r6
 80094dc:	0c1e      	lsrs	r6, r3, #16
 80094de:	0c0b      	lsrs	r3, r1, #16
 80094e0:	fb02 3306 	mla	r3, r2, r6, r3
 80094e4:	b289      	uxth	r1, r1
 80094e6:	3001      	adds	r0, #1
 80094e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80094ec:	4285      	cmp	r5, r0
 80094ee:	f84c 1b04 	str.w	r1, [ip], #4
 80094f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80094f6:	dcec      	bgt.n	80094d2 <__multadd+0x12>
 80094f8:	b30e      	cbz	r6, 800953e <__multadd+0x7e>
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	42ab      	cmp	r3, r5
 80094fe:	dc19      	bgt.n	8009534 <__multadd+0x74>
 8009500:	6861      	ldr	r1, [r4, #4]
 8009502:	4638      	mov	r0, r7
 8009504:	3101      	adds	r1, #1
 8009506:	f7ff ff79 	bl	80093fc <_Balloc>
 800950a:	4680      	mov	r8, r0
 800950c:	b928      	cbnz	r0, 800951a <__multadd+0x5a>
 800950e:	4602      	mov	r2, r0
 8009510:	4b0c      	ldr	r3, [pc, #48]	; (8009544 <__multadd+0x84>)
 8009512:	480d      	ldr	r0, [pc, #52]	; (8009548 <__multadd+0x88>)
 8009514:	21ba      	movs	r1, #186	; 0xba
 8009516:	f000 fce9 	bl	8009eec <__assert_func>
 800951a:	6922      	ldr	r2, [r4, #16]
 800951c:	3202      	adds	r2, #2
 800951e:	f104 010c 	add.w	r1, r4, #12
 8009522:	0092      	lsls	r2, r2, #2
 8009524:	300c      	adds	r0, #12
 8009526:	f7ff faee 	bl	8008b06 <memcpy>
 800952a:	4621      	mov	r1, r4
 800952c:	4638      	mov	r0, r7
 800952e:	f7ff ffa5 	bl	800947c <_Bfree>
 8009532:	4644      	mov	r4, r8
 8009534:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009538:	3501      	adds	r5, #1
 800953a:	615e      	str	r6, [r3, #20]
 800953c:	6125      	str	r5, [r4, #16]
 800953e:	4620      	mov	r0, r4
 8009540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009544:	0800bc60 	.word	0x0800bc60
 8009548:	0800bce8 	.word	0x0800bce8

0800954c <__s2b>:
 800954c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009550:	460c      	mov	r4, r1
 8009552:	4615      	mov	r5, r2
 8009554:	461f      	mov	r7, r3
 8009556:	2209      	movs	r2, #9
 8009558:	3308      	adds	r3, #8
 800955a:	4606      	mov	r6, r0
 800955c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009560:	2100      	movs	r1, #0
 8009562:	2201      	movs	r2, #1
 8009564:	429a      	cmp	r2, r3
 8009566:	db09      	blt.n	800957c <__s2b+0x30>
 8009568:	4630      	mov	r0, r6
 800956a:	f7ff ff47 	bl	80093fc <_Balloc>
 800956e:	b940      	cbnz	r0, 8009582 <__s2b+0x36>
 8009570:	4602      	mov	r2, r0
 8009572:	4b19      	ldr	r3, [pc, #100]	; (80095d8 <__s2b+0x8c>)
 8009574:	4819      	ldr	r0, [pc, #100]	; (80095dc <__s2b+0x90>)
 8009576:	21d3      	movs	r1, #211	; 0xd3
 8009578:	f000 fcb8 	bl	8009eec <__assert_func>
 800957c:	0052      	lsls	r2, r2, #1
 800957e:	3101      	adds	r1, #1
 8009580:	e7f0      	b.n	8009564 <__s2b+0x18>
 8009582:	9b08      	ldr	r3, [sp, #32]
 8009584:	6143      	str	r3, [r0, #20]
 8009586:	2d09      	cmp	r5, #9
 8009588:	f04f 0301 	mov.w	r3, #1
 800958c:	6103      	str	r3, [r0, #16]
 800958e:	dd16      	ble.n	80095be <__s2b+0x72>
 8009590:	f104 0909 	add.w	r9, r4, #9
 8009594:	46c8      	mov	r8, r9
 8009596:	442c      	add	r4, r5
 8009598:	f818 3b01 	ldrb.w	r3, [r8], #1
 800959c:	4601      	mov	r1, r0
 800959e:	3b30      	subs	r3, #48	; 0x30
 80095a0:	220a      	movs	r2, #10
 80095a2:	4630      	mov	r0, r6
 80095a4:	f7ff ff8c 	bl	80094c0 <__multadd>
 80095a8:	45a0      	cmp	r8, r4
 80095aa:	d1f5      	bne.n	8009598 <__s2b+0x4c>
 80095ac:	f1a5 0408 	sub.w	r4, r5, #8
 80095b0:	444c      	add	r4, r9
 80095b2:	1b2d      	subs	r5, r5, r4
 80095b4:	1963      	adds	r3, r4, r5
 80095b6:	42bb      	cmp	r3, r7
 80095b8:	db04      	blt.n	80095c4 <__s2b+0x78>
 80095ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095be:	340a      	adds	r4, #10
 80095c0:	2509      	movs	r5, #9
 80095c2:	e7f6      	b.n	80095b2 <__s2b+0x66>
 80095c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095c8:	4601      	mov	r1, r0
 80095ca:	3b30      	subs	r3, #48	; 0x30
 80095cc:	220a      	movs	r2, #10
 80095ce:	4630      	mov	r0, r6
 80095d0:	f7ff ff76 	bl	80094c0 <__multadd>
 80095d4:	e7ee      	b.n	80095b4 <__s2b+0x68>
 80095d6:	bf00      	nop
 80095d8:	0800bc60 	.word	0x0800bc60
 80095dc:	0800bce8 	.word	0x0800bce8

080095e0 <__hi0bits>:
 80095e0:	0c03      	lsrs	r3, r0, #16
 80095e2:	041b      	lsls	r3, r3, #16
 80095e4:	b9d3      	cbnz	r3, 800961c <__hi0bits+0x3c>
 80095e6:	0400      	lsls	r0, r0, #16
 80095e8:	2310      	movs	r3, #16
 80095ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80095ee:	bf04      	itt	eq
 80095f0:	0200      	lsleq	r0, r0, #8
 80095f2:	3308      	addeq	r3, #8
 80095f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80095f8:	bf04      	itt	eq
 80095fa:	0100      	lsleq	r0, r0, #4
 80095fc:	3304      	addeq	r3, #4
 80095fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009602:	bf04      	itt	eq
 8009604:	0080      	lsleq	r0, r0, #2
 8009606:	3302      	addeq	r3, #2
 8009608:	2800      	cmp	r0, #0
 800960a:	db05      	blt.n	8009618 <__hi0bits+0x38>
 800960c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009610:	f103 0301 	add.w	r3, r3, #1
 8009614:	bf08      	it	eq
 8009616:	2320      	moveq	r3, #32
 8009618:	4618      	mov	r0, r3
 800961a:	4770      	bx	lr
 800961c:	2300      	movs	r3, #0
 800961e:	e7e4      	b.n	80095ea <__hi0bits+0xa>

08009620 <__lo0bits>:
 8009620:	6803      	ldr	r3, [r0, #0]
 8009622:	f013 0207 	ands.w	r2, r3, #7
 8009626:	d00c      	beq.n	8009642 <__lo0bits+0x22>
 8009628:	07d9      	lsls	r1, r3, #31
 800962a:	d422      	bmi.n	8009672 <__lo0bits+0x52>
 800962c:	079a      	lsls	r2, r3, #30
 800962e:	bf49      	itett	mi
 8009630:	085b      	lsrmi	r3, r3, #1
 8009632:	089b      	lsrpl	r3, r3, #2
 8009634:	6003      	strmi	r3, [r0, #0]
 8009636:	2201      	movmi	r2, #1
 8009638:	bf5c      	itt	pl
 800963a:	6003      	strpl	r3, [r0, #0]
 800963c:	2202      	movpl	r2, #2
 800963e:	4610      	mov	r0, r2
 8009640:	4770      	bx	lr
 8009642:	b299      	uxth	r1, r3
 8009644:	b909      	cbnz	r1, 800964a <__lo0bits+0x2a>
 8009646:	0c1b      	lsrs	r3, r3, #16
 8009648:	2210      	movs	r2, #16
 800964a:	b2d9      	uxtb	r1, r3
 800964c:	b909      	cbnz	r1, 8009652 <__lo0bits+0x32>
 800964e:	3208      	adds	r2, #8
 8009650:	0a1b      	lsrs	r3, r3, #8
 8009652:	0719      	lsls	r1, r3, #28
 8009654:	bf04      	itt	eq
 8009656:	091b      	lsreq	r3, r3, #4
 8009658:	3204      	addeq	r2, #4
 800965a:	0799      	lsls	r1, r3, #30
 800965c:	bf04      	itt	eq
 800965e:	089b      	lsreq	r3, r3, #2
 8009660:	3202      	addeq	r2, #2
 8009662:	07d9      	lsls	r1, r3, #31
 8009664:	d403      	bmi.n	800966e <__lo0bits+0x4e>
 8009666:	085b      	lsrs	r3, r3, #1
 8009668:	f102 0201 	add.w	r2, r2, #1
 800966c:	d003      	beq.n	8009676 <__lo0bits+0x56>
 800966e:	6003      	str	r3, [r0, #0]
 8009670:	e7e5      	b.n	800963e <__lo0bits+0x1e>
 8009672:	2200      	movs	r2, #0
 8009674:	e7e3      	b.n	800963e <__lo0bits+0x1e>
 8009676:	2220      	movs	r2, #32
 8009678:	e7e1      	b.n	800963e <__lo0bits+0x1e>
	...

0800967c <__i2b>:
 800967c:	b510      	push	{r4, lr}
 800967e:	460c      	mov	r4, r1
 8009680:	2101      	movs	r1, #1
 8009682:	f7ff febb 	bl	80093fc <_Balloc>
 8009686:	4602      	mov	r2, r0
 8009688:	b928      	cbnz	r0, 8009696 <__i2b+0x1a>
 800968a:	4b05      	ldr	r3, [pc, #20]	; (80096a0 <__i2b+0x24>)
 800968c:	4805      	ldr	r0, [pc, #20]	; (80096a4 <__i2b+0x28>)
 800968e:	f240 1145 	movw	r1, #325	; 0x145
 8009692:	f000 fc2b 	bl	8009eec <__assert_func>
 8009696:	2301      	movs	r3, #1
 8009698:	6144      	str	r4, [r0, #20]
 800969a:	6103      	str	r3, [r0, #16]
 800969c:	bd10      	pop	{r4, pc}
 800969e:	bf00      	nop
 80096a0:	0800bc60 	.word	0x0800bc60
 80096a4:	0800bce8 	.word	0x0800bce8

080096a8 <__multiply>:
 80096a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ac:	4691      	mov	r9, r2
 80096ae:	690a      	ldr	r2, [r1, #16]
 80096b0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	bfb8      	it	lt
 80096b8:	460b      	movlt	r3, r1
 80096ba:	460c      	mov	r4, r1
 80096bc:	bfbc      	itt	lt
 80096be:	464c      	movlt	r4, r9
 80096c0:	4699      	movlt	r9, r3
 80096c2:	6927      	ldr	r7, [r4, #16]
 80096c4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80096c8:	68a3      	ldr	r3, [r4, #8]
 80096ca:	6861      	ldr	r1, [r4, #4]
 80096cc:	eb07 060a 	add.w	r6, r7, sl
 80096d0:	42b3      	cmp	r3, r6
 80096d2:	b085      	sub	sp, #20
 80096d4:	bfb8      	it	lt
 80096d6:	3101      	addlt	r1, #1
 80096d8:	f7ff fe90 	bl	80093fc <_Balloc>
 80096dc:	b930      	cbnz	r0, 80096ec <__multiply+0x44>
 80096de:	4602      	mov	r2, r0
 80096e0:	4b44      	ldr	r3, [pc, #272]	; (80097f4 <__multiply+0x14c>)
 80096e2:	4845      	ldr	r0, [pc, #276]	; (80097f8 <__multiply+0x150>)
 80096e4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80096e8:	f000 fc00 	bl	8009eec <__assert_func>
 80096ec:	f100 0514 	add.w	r5, r0, #20
 80096f0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096f4:	462b      	mov	r3, r5
 80096f6:	2200      	movs	r2, #0
 80096f8:	4543      	cmp	r3, r8
 80096fa:	d321      	bcc.n	8009740 <__multiply+0x98>
 80096fc:	f104 0314 	add.w	r3, r4, #20
 8009700:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009704:	f109 0314 	add.w	r3, r9, #20
 8009708:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800970c:	9202      	str	r2, [sp, #8]
 800970e:	1b3a      	subs	r2, r7, r4
 8009710:	3a15      	subs	r2, #21
 8009712:	f022 0203 	bic.w	r2, r2, #3
 8009716:	3204      	adds	r2, #4
 8009718:	f104 0115 	add.w	r1, r4, #21
 800971c:	428f      	cmp	r7, r1
 800971e:	bf38      	it	cc
 8009720:	2204      	movcc	r2, #4
 8009722:	9201      	str	r2, [sp, #4]
 8009724:	9a02      	ldr	r2, [sp, #8]
 8009726:	9303      	str	r3, [sp, #12]
 8009728:	429a      	cmp	r2, r3
 800972a:	d80c      	bhi.n	8009746 <__multiply+0x9e>
 800972c:	2e00      	cmp	r6, #0
 800972e:	dd03      	ble.n	8009738 <__multiply+0x90>
 8009730:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009734:	2b00      	cmp	r3, #0
 8009736:	d05b      	beq.n	80097f0 <__multiply+0x148>
 8009738:	6106      	str	r6, [r0, #16]
 800973a:	b005      	add	sp, #20
 800973c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009740:	f843 2b04 	str.w	r2, [r3], #4
 8009744:	e7d8      	b.n	80096f8 <__multiply+0x50>
 8009746:	f8b3 a000 	ldrh.w	sl, [r3]
 800974a:	f1ba 0f00 	cmp.w	sl, #0
 800974e:	d024      	beq.n	800979a <__multiply+0xf2>
 8009750:	f104 0e14 	add.w	lr, r4, #20
 8009754:	46a9      	mov	r9, r5
 8009756:	f04f 0c00 	mov.w	ip, #0
 800975a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800975e:	f8d9 1000 	ldr.w	r1, [r9]
 8009762:	fa1f fb82 	uxth.w	fp, r2
 8009766:	b289      	uxth	r1, r1
 8009768:	fb0a 110b 	mla	r1, sl, fp, r1
 800976c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009770:	f8d9 2000 	ldr.w	r2, [r9]
 8009774:	4461      	add	r1, ip
 8009776:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800977a:	fb0a c20b 	mla	r2, sl, fp, ip
 800977e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009782:	b289      	uxth	r1, r1
 8009784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009788:	4577      	cmp	r7, lr
 800978a:	f849 1b04 	str.w	r1, [r9], #4
 800978e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009792:	d8e2      	bhi.n	800975a <__multiply+0xb2>
 8009794:	9a01      	ldr	r2, [sp, #4]
 8009796:	f845 c002 	str.w	ip, [r5, r2]
 800979a:	9a03      	ldr	r2, [sp, #12]
 800979c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80097a0:	3304      	adds	r3, #4
 80097a2:	f1b9 0f00 	cmp.w	r9, #0
 80097a6:	d021      	beq.n	80097ec <__multiply+0x144>
 80097a8:	6829      	ldr	r1, [r5, #0]
 80097aa:	f104 0c14 	add.w	ip, r4, #20
 80097ae:	46ae      	mov	lr, r5
 80097b0:	f04f 0a00 	mov.w	sl, #0
 80097b4:	f8bc b000 	ldrh.w	fp, [ip]
 80097b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80097bc:	fb09 220b 	mla	r2, r9, fp, r2
 80097c0:	4452      	add	r2, sl
 80097c2:	b289      	uxth	r1, r1
 80097c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80097c8:	f84e 1b04 	str.w	r1, [lr], #4
 80097cc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80097d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097d4:	f8be 1000 	ldrh.w	r1, [lr]
 80097d8:	fb09 110a 	mla	r1, r9, sl, r1
 80097dc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80097e0:	4567      	cmp	r7, ip
 80097e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80097e6:	d8e5      	bhi.n	80097b4 <__multiply+0x10c>
 80097e8:	9a01      	ldr	r2, [sp, #4]
 80097ea:	50a9      	str	r1, [r5, r2]
 80097ec:	3504      	adds	r5, #4
 80097ee:	e799      	b.n	8009724 <__multiply+0x7c>
 80097f0:	3e01      	subs	r6, #1
 80097f2:	e79b      	b.n	800972c <__multiply+0x84>
 80097f4:	0800bc60 	.word	0x0800bc60
 80097f8:	0800bce8 	.word	0x0800bce8

080097fc <__pow5mult>:
 80097fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009800:	4615      	mov	r5, r2
 8009802:	f012 0203 	ands.w	r2, r2, #3
 8009806:	4606      	mov	r6, r0
 8009808:	460f      	mov	r7, r1
 800980a:	d007      	beq.n	800981c <__pow5mult+0x20>
 800980c:	4c25      	ldr	r4, [pc, #148]	; (80098a4 <__pow5mult+0xa8>)
 800980e:	3a01      	subs	r2, #1
 8009810:	2300      	movs	r3, #0
 8009812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009816:	f7ff fe53 	bl	80094c0 <__multadd>
 800981a:	4607      	mov	r7, r0
 800981c:	10ad      	asrs	r5, r5, #2
 800981e:	d03d      	beq.n	800989c <__pow5mult+0xa0>
 8009820:	69f4      	ldr	r4, [r6, #28]
 8009822:	b97c      	cbnz	r4, 8009844 <__pow5mult+0x48>
 8009824:	2010      	movs	r0, #16
 8009826:	f000 fb95 	bl	8009f54 <malloc>
 800982a:	4602      	mov	r2, r0
 800982c:	61f0      	str	r0, [r6, #28]
 800982e:	b928      	cbnz	r0, 800983c <__pow5mult+0x40>
 8009830:	4b1d      	ldr	r3, [pc, #116]	; (80098a8 <__pow5mult+0xac>)
 8009832:	481e      	ldr	r0, [pc, #120]	; (80098ac <__pow5mult+0xb0>)
 8009834:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009838:	f000 fb58 	bl	8009eec <__assert_func>
 800983c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009840:	6004      	str	r4, [r0, #0]
 8009842:	60c4      	str	r4, [r0, #12]
 8009844:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800984c:	b94c      	cbnz	r4, 8009862 <__pow5mult+0x66>
 800984e:	f240 2171 	movw	r1, #625	; 0x271
 8009852:	4630      	mov	r0, r6
 8009854:	f7ff ff12 	bl	800967c <__i2b>
 8009858:	2300      	movs	r3, #0
 800985a:	f8c8 0008 	str.w	r0, [r8, #8]
 800985e:	4604      	mov	r4, r0
 8009860:	6003      	str	r3, [r0, #0]
 8009862:	f04f 0900 	mov.w	r9, #0
 8009866:	07eb      	lsls	r3, r5, #31
 8009868:	d50a      	bpl.n	8009880 <__pow5mult+0x84>
 800986a:	4639      	mov	r1, r7
 800986c:	4622      	mov	r2, r4
 800986e:	4630      	mov	r0, r6
 8009870:	f7ff ff1a 	bl	80096a8 <__multiply>
 8009874:	4639      	mov	r1, r7
 8009876:	4680      	mov	r8, r0
 8009878:	4630      	mov	r0, r6
 800987a:	f7ff fdff 	bl	800947c <_Bfree>
 800987e:	4647      	mov	r7, r8
 8009880:	106d      	asrs	r5, r5, #1
 8009882:	d00b      	beq.n	800989c <__pow5mult+0xa0>
 8009884:	6820      	ldr	r0, [r4, #0]
 8009886:	b938      	cbnz	r0, 8009898 <__pow5mult+0x9c>
 8009888:	4622      	mov	r2, r4
 800988a:	4621      	mov	r1, r4
 800988c:	4630      	mov	r0, r6
 800988e:	f7ff ff0b 	bl	80096a8 <__multiply>
 8009892:	6020      	str	r0, [r4, #0]
 8009894:	f8c0 9000 	str.w	r9, [r0]
 8009898:	4604      	mov	r4, r0
 800989a:	e7e4      	b.n	8009866 <__pow5mult+0x6a>
 800989c:	4638      	mov	r0, r7
 800989e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098a2:	bf00      	nop
 80098a4:	0800be38 	.word	0x0800be38
 80098a8:	0800bcd1 	.word	0x0800bcd1
 80098ac:	0800bce8 	.word	0x0800bce8

080098b0 <__lshift>:
 80098b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098b4:	460c      	mov	r4, r1
 80098b6:	6849      	ldr	r1, [r1, #4]
 80098b8:	6923      	ldr	r3, [r4, #16]
 80098ba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80098be:	68a3      	ldr	r3, [r4, #8]
 80098c0:	4607      	mov	r7, r0
 80098c2:	4691      	mov	r9, r2
 80098c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098c8:	f108 0601 	add.w	r6, r8, #1
 80098cc:	42b3      	cmp	r3, r6
 80098ce:	db0b      	blt.n	80098e8 <__lshift+0x38>
 80098d0:	4638      	mov	r0, r7
 80098d2:	f7ff fd93 	bl	80093fc <_Balloc>
 80098d6:	4605      	mov	r5, r0
 80098d8:	b948      	cbnz	r0, 80098ee <__lshift+0x3e>
 80098da:	4602      	mov	r2, r0
 80098dc:	4b28      	ldr	r3, [pc, #160]	; (8009980 <__lshift+0xd0>)
 80098de:	4829      	ldr	r0, [pc, #164]	; (8009984 <__lshift+0xd4>)
 80098e0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80098e4:	f000 fb02 	bl	8009eec <__assert_func>
 80098e8:	3101      	adds	r1, #1
 80098ea:	005b      	lsls	r3, r3, #1
 80098ec:	e7ee      	b.n	80098cc <__lshift+0x1c>
 80098ee:	2300      	movs	r3, #0
 80098f0:	f100 0114 	add.w	r1, r0, #20
 80098f4:	f100 0210 	add.w	r2, r0, #16
 80098f8:	4618      	mov	r0, r3
 80098fa:	4553      	cmp	r3, sl
 80098fc:	db33      	blt.n	8009966 <__lshift+0xb6>
 80098fe:	6920      	ldr	r0, [r4, #16]
 8009900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009904:	f104 0314 	add.w	r3, r4, #20
 8009908:	f019 091f 	ands.w	r9, r9, #31
 800990c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009910:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009914:	d02b      	beq.n	800996e <__lshift+0xbe>
 8009916:	f1c9 0e20 	rsb	lr, r9, #32
 800991a:	468a      	mov	sl, r1
 800991c:	2200      	movs	r2, #0
 800991e:	6818      	ldr	r0, [r3, #0]
 8009920:	fa00 f009 	lsl.w	r0, r0, r9
 8009924:	4310      	orrs	r0, r2
 8009926:	f84a 0b04 	str.w	r0, [sl], #4
 800992a:	f853 2b04 	ldr.w	r2, [r3], #4
 800992e:	459c      	cmp	ip, r3
 8009930:	fa22 f20e 	lsr.w	r2, r2, lr
 8009934:	d8f3      	bhi.n	800991e <__lshift+0x6e>
 8009936:	ebac 0304 	sub.w	r3, ip, r4
 800993a:	3b15      	subs	r3, #21
 800993c:	f023 0303 	bic.w	r3, r3, #3
 8009940:	3304      	adds	r3, #4
 8009942:	f104 0015 	add.w	r0, r4, #21
 8009946:	4584      	cmp	ip, r0
 8009948:	bf38      	it	cc
 800994a:	2304      	movcc	r3, #4
 800994c:	50ca      	str	r2, [r1, r3]
 800994e:	b10a      	cbz	r2, 8009954 <__lshift+0xa4>
 8009950:	f108 0602 	add.w	r6, r8, #2
 8009954:	3e01      	subs	r6, #1
 8009956:	4638      	mov	r0, r7
 8009958:	612e      	str	r6, [r5, #16]
 800995a:	4621      	mov	r1, r4
 800995c:	f7ff fd8e 	bl	800947c <_Bfree>
 8009960:	4628      	mov	r0, r5
 8009962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009966:	f842 0f04 	str.w	r0, [r2, #4]!
 800996a:	3301      	adds	r3, #1
 800996c:	e7c5      	b.n	80098fa <__lshift+0x4a>
 800996e:	3904      	subs	r1, #4
 8009970:	f853 2b04 	ldr.w	r2, [r3], #4
 8009974:	f841 2f04 	str.w	r2, [r1, #4]!
 8009978:	459c      	cmp	ip, r3
 800997a:	d8f9      	bhi.n	8009970 <__lshift+0xc0>
 800997c:	e7ea      	b.n	8009954 <__lshift+0xa4>
 800997e:	bf00      	nop
 8009980:	0800bc60 	.word	0x0800bc60
 8009984:	0800bce8 	.word	0x0800bce8

08009988 <__mcmp>:
 8009988:	b530      	push	{r4, r5, lr}
 800998a:	6902      	ldr	r2, [r0, #16]
 800998c:	690c      	ldr	r4, [r1, #16]
 800998e:	1b12      	subs	r2, r2, r4
 8009990:	d10e      	bne.n	80099b0 <__mcmp+0x28>
 8009992:	f100 0314 	add.w	r3, r0, #20
 8009996:	3114      	adds	r1, #20
 8009998:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800999c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80099a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80099a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80099a8:	42a5      	cmp	r5, r4
 80099aa:	d003      	beq.n	80099b4 <__mcmp+0x2c>
 80099ac:	d305      	bcc.n	80099ba <__mcmp+0x32>
 80099ae:	2201      	movs	r2, #1
 80099b0:	4610      	mov	r0, r2
 80099b2:	bd30      	pop	{r4, r5, pc}
 80099b4:	4283      	cmp	r3, r0
 80099b6:	d3f3      	bcc.n	80099a0 <__mcmp+0x18>
 80099b8:	e7fa      	b.n	80099b0 <__mcmp+0x28>
 80099ba:	f04f 32ff 	mov.w	r2, #4294967295
 80099be:	e7f7      	b.n	80099b0 <__mcmp+0x28>

080099c0 <__mdiff>:
 80099c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099c4:	460c      	mov	r4, r1
 80099c6:	4606      	mov	r6, r0
 80099c8:	4611      	mov	r1, r2
 80099ca:	4620      	mov	r0, r4
 80099cc:	4690      	mov	r8, r2
 80099ce:	f7ff ffdb 	bl	8009988 <__mcmp>
 80099d2:	1e05      	subs	r5, r0, #0
 80099d4:	d110      	bne.n	80099f8 <__mdiff+0x38>
 80099d6:	4629      	mov	r1, r5
 80099d8:	4630      	mov	r0, r6
 80099da:	f7ff fd0f 	bl	80093fc <_Balloc>
 80099de:	b930      	cbnz	r0, 80099ee <__mdiff+0x2e>
 80099e0:	4b3a      	ldr	r3, [pc, #232]	; (8009acc <__mdiff+0x10c>)
 80099e2:	4602      	mov	r2, r0
 80099e4:	f240 2137 	movw	r1, #567	; 0x237
 80099e8:	4839      	ldr	r0, [pc, #228]	; (8009ad0 <__mdiff+0x110>)
 80099ea:	f000 fa7f 	bl	8009eec <__assert_func>
 80099ee:	2301      	movs	r3, #1
 80099f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f8:	bfa4      	itt	ge
 80099fa:	4643      	movge	r3, r8
 80099fc:	46a0      	movge	r8, r4
 80099fe:	4630      	mov	r0, r6
 8009a00:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009a04:	bfa6      	itte	ge
 8009a06:	461c      	movge	r4, r3
 8009a08:	2500      	movge	r5, #0
 8009a0a:	2501      	movlt	r5, #1
 8009a0c:	f7ff fcf6 	bl	80093fc <_Balloc>
 8009a10:	b920      	cbnz	r0, 8009a1c <__mdiff+0x5c>
 8009a12:	4b2e      	ldr	r3, [pc, #184]	; (8009acc <__mdiff+0x10c>)
 8009a14:	4602      	mov	r2, r0
 8009a16:	f240 2145 	movw	r1, #581	; 0x245
 8009a1a:	e7e5      	b.n	80099e8 <__mdiff+0x28>
 8009a1c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009a20:	6926      	ldr	r6, [r4, #16]
 8009a22:	60c5      	str	r5, [r0, #12]
 8009a24:	f104 0914 	add.w	r9, r4, #20
 8009a28:	f108 0514 	add.w	r5, r8, #20
 8009a2c:	f100 0e14 	add.w	lr, r0, #20
 8009a30:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009a34:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009a38:	f108 0210 	add.w	r2, r8, #16
 8009a3c:	46f2      	mov	sl, lr
 8009a3e:	2100      	movs	r1, #0
 8009a40:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a44:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009a48:	fa11 f88b 	uxtah	r8, r1, fp
 8009a4c:	b299      	uxth	r1, r3
 8009a4e:	0c1b      	lsrs	r3, r3, #16
 8009a50:	eba8 0801 	sub.w	r8, r8, r1
 8009a54:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009a58:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009a5c:	fa1f f888 	uxth.w	r8, r8
 8009a60:	1419      	asrs	r1, r3, #16
 8009a62:	454e      	cmp	r6, r9
 8009a64:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009a68:	f84a 3b04 	str.w	r3, [sl], #4
 8009a6c:	d8e8      	bhi.n	8009a40 <__mdiff+0x80>
 8009a6e:	1b33      	subs	r3, r6, r4
 8009a70:	3b15      	subs	r3, #21
 8009a72:	f023 0303 	bic.w	r3, r3, #3
 8009a76:	3304      	adds	r3, #4
 8009a78:	3415      	adds	r4, #21
 8009a7a:	42a6      	cmp	r6, r4
 8009a7c:	bf38      	it	cc
 8009a7e:	2304      	movcc	r3, #4
 8009a80:	441d      	add	r5, r3
 8009a82:	4473      	add	r3, lr
 8009a84:	469e      	mov	lr, r3
 8009a86:	462e      	mov	r6, r5
 8009a88:	4566      	cmp	r6, ip
 8009a8a:	d30e      	bcc.n	8009aaa <__mdiff+0xea>
 8009a8c:	f10c 0203 	add.w	r2, ip, #3
 8009a90:	1b52      	subs	r2, r2, r5
 8009a92:	f022 0203 	bic.w	r2, r2, #3
 8009a96:	3d03      	subs	r5, #3
 8009a98:	45ac      	cmp	ip, r5
 8009a9a:	bf38      	it	cc
 8009a9c:	2200      	movcc	r2, #0
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009aa4:	b17a      	cbz	r2, 8009ac6 <__mdiff+0x106>
 8009aa6:	6107      	str	r7, [r0, #16]
 8009aa8:	e7a4      	b.n	80099f4 <__mdiff+0x34>
 8009aaa:	f856 8b04 	ldr.w	r8, [r6], #4
 8009aae:	fa11 f288 	uxtah	r2, r1, r8
 8009ab2:	1414      	asrs	r4, r2, #16
 8009ab4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009ab8:	b292      	uxth	r2, r2
 8009aba:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009abe:	f84e 2b04 	str.w	r2, [lr], #4
 8009ac2:	1421      	asrs	r1, r4, #16
 8009ac4:	e7e0      	b.n	8009a88 <__mdiff+0xc8>
 8009ac6:	3f01      	subs	r7, #1
 8009ac8:	e7ea      	b.n	8009aa0 <__mdiff+0xe0>
 8009aca:	bf00      	nop
 8009acc:	0800bc60 	.word	0x0800bc60
 8009ad0:	0800bce8 	.word	0x0800bce8

08009ad4 <__ulp>:
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	ed8d 0b00 	vstr	d0, [sp]
 8009ada:	9a01      	ldr	r2, [sp, #4]
 8009adc:	4b0f      	ldr	r3, [pc, #60]	; (8009b1c <__ulp+0x48>)
 8009ade:	4013      	ands	r3, r2
 8009ae0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	dc08      	bgt.n	8009afa <__ulp+0x26>
 8009ae8:	425b      	negs	r3, r3
 8009aea:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009aee:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009af2:	da04      	bge.n	8009afe <__ulp+0x2a>
 8009af4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009af8:	4113      	asrs	r3, r2
 8009afa:	2200      	movs	r2, #0
 8009afc:	e008      	b.n	8009b10 <__ulp+0x3c>
 8009afe:	f1a2 0314 	sub.w	r3, r2, #20
 8009b02:	2b1e      	cmp	r3, #30
 8009b04:	bfda      	itte	le
 8009b06:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009b0a:	40da      	lsrle	r2, r3
 8009b0c:	2201      	movgt	r2, #1
 8009b0e:	2300      	movs	r3, #0
 8009b10:	4619      	mov	r1, r3
 8009b12:	4610      	mov	r0, r2
 8009b14:	ec41 0b10 	vmov	d0, r0, r1
 8009b18:	b002      	add	sp, #8
 8009b1a:	4770      	bx	lr
 8009b1c:	7ff00000 	.word	0x7ff00000

08009b20 <__b2d>:
 8009b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b24:	6906      	ldr	r6, [r0, #16]
 8009b26:	f100 0814 	add.w	r8, r0, #20
 8009b2a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009b2e:	1f37      	subs	r7, r6, #4
 8009b30:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009b34:	4610      	mov	r0, r2
 8009b36:	f7ff fd53 	bl	80095e0 <__hi0bits>
 8009b3a:	f1c0 0320 	rsb	r3, r0, #32
 8009b3e:	280a      	cmp	r0, #10
 8009b40:	600b      	str	r3, [r1, #0]
 8009b42:	491b      	ldr	r1, [pc, #108]	; (8009bb0 <__b2d+0x90>)
 8009b44:	dc15      	bgt.n	8009b72 <__b2d+0x52>
 8009b46:	f1c0 0c0b 	rsb	ip, r0, #11
 8009b4a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009b4e:	45b8      	cmp	r8, r7
 8009b50:	ea43 0501 	orr.w	r5, r3, r1
 8009b54:	bf34      	ite	cc
 8009b56:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b5a:	2300      	movcs	r3, #0
 8009b5c:	3015      	adds	r0, #21
 8009b5e:	fa02 f000 	lsl.w	r0, r2, r0
 8009b62:	fa23 f30c 	lsr.w	r3, r3, ip
 8009b66:	4303      	orrs	r3, r0
 8009b68:	461c      	mov	r4, r3
 8009b6a:	ec45 4b10 	vmov	d0, r4, r5
 8009b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b72:	45b8      	cmp	r8, r7
 8009b74:	bf3a      	itte	cc
 8009b76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009b7a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009b7e:	2300      	movcs	r3, #0
 8009b80:	380b      	subs	r0, #11
 8009b82:	d012      	beq.n	8009baa <__b2d+0x8a>
 8009b84:	f1c0 0120 	rsb	r1, r0, #32
 8009b88:	fa23 f401 	lsr.w	r4, r3, r1
 8009b8c:	4082      	lsls	r2, r0
 8009b8e:	4322      	orrs	r2, r4
 8009b90:	4547      	cmp	r7, r8
 8009b92:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009b96:	bf8c      	ite	hi
 8009b98:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009b9c:	2200      	movls	r2, #0
 8009b9e:	4083      	lsls	r3, r0
 8009ba0:	40ca      	lsrs	r2, r1
 8009ba2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009ba6:	4313      	orrs	r3, r2
 8009ba8:	e7de      	b.n	8009b68 <__b2d+0x48>
 8009baa:	ea42 0501 	orr.w	r5, r2, r1
 8009bae:	e7db      	b.n	8009b68 <__b2d+0x48>
 8009bb0:	3ff00000 	.word	0x3ff00000

08009bb4 <__d2b>:
 8009bb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009bb8:	460f      	mov	r7, r1
 8009bba:	2101      	movs	r1, #1
 8009bbc:	ec59 8b10 	vmov	r8, r9, d0
 8009bc0:	4616      	mov	r6, r2
 8009bc2:	f7ff fc1b 	bl	80093fc <_Balloc>
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	b930      	cbnz	r0, 8009bd8 <__d2b+0x24>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	4b24      	ldr	r3, [pc, #144]	; (8009c60 <__d2b+0xac>)
 8009bce:	4825      	ldr	r0, [pc, #148]	; (8009c64 <__d2b+0xb0>)
 8009bd0:	f240 310f 	movw	r1, #783	; 0x30f
 8009bd4:	f000 f98a 	bl	8009eec <__assert_func>
 8009bd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009bdc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009be0:	bb2d      	cbnz	r5, 8009c2e <__d2b+0x7a>
 8009be2:	9301      	str	r3, [sp, #4]
 8009be4:	f1b8 0300 	subs.w	r3, r8, #0
 8009be8:	d026      	beq.n	8009c38 <__d2b+0x84>
 8009bea:	4668      	mov	r0, sp
 8009bec:	9300      	str	r3, [sp, #0]
 8009bee:	f7ff fd17 	bl	8009620 <__lo0bits>
 8009bf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009bf6:	b1e8      	cbz	r0, 8009c34 <__d2b+0x80>
 8009bf8:	f1c0 0320 	rsb	r3, r0, #32
 8009bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8009c00:	430b      	orrs	r3, r1
 8009c02:	40c2      	lsrs	r2, r0
 8009c04:	6163      	str	r3, [r4, #20]
 8009c06:	9201      	str	r2, [sp, #4]
 8009c08:	9b01      	ldr	r3, [sp, #4]
 8009c0a:	61a3      	str	r3, [r4, #24]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	bf14      	ite	ne
 8009c10:	2202      	movne	r2, #2
 8009c12:	2201      	moveq	r2, #1
 8009c14:	6122      	str	r2, [r4, #16]
 8009c16:	b1bd      	cbz	r5, 8009c48 <__d2b+0x94>
 8009c18:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009c1c:	4405      	add	r5, r0
 8009c1e:	603d      	str	r5, [r7, #0]
 8009c20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009c24:	6030      	str	r0, [r6, #0]
 8009c26:	4620      	mov	r0, r4
 8009c28:	b003      	add	sp, #12
 8009c2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c32:	e7d6      	b.n	8009be2 <__d2b+0x2e>
 8009c34:	6161      	str	r1, [r4, #20]
 8009c36:	e7e7      	b.n	8009c08 <__d2b+0x54>
 8009c38:	a801      	add	r0, sp, #4
 8009c3a:	f7ff fcf1 	bl	8009620 <__lo0bits>
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	6163      	str	r3, [r4, #20]
 8009c42:	3020      	adds	r0, #32
 8009c44:	2201      	movs	r2, #1
 8009c46:	e7e5      	b.n	8009c14 <__d2b+0x60>
 8009c48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009c4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009c50:	6038      	str	r0, [r7, #0]
 8009c52:	6918      	ldr	r0, [r3, #16]
 8009c54:	f7ff fcc4 	bl	80095e0 <__hi0bits>
 8009c58:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009c5c:	e7e2      	b.n	8009c24 <__d2b+0x70>
 8009c5e:	bf00      	nop
 8009c60:	0800bc60 	.word	0x0800bc60
 8009c64:	0800bce8 	.word	0x0800bce8

08009c68 <__ratio>:
 8009c68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c6c:	4688      	mov	r8, r1
 8009c6e:	4669      	mov	r1, sp
 8009c70:	4681      	mov	r9, r0
 8009c72:	f7ff ff55 	bl	8009b20 <__b2d>
 8009c76:	a901      	add	r1, sp, #4
 8009c78:	4640      	mov	r0, r8
 8009c7a:	ec55 4b10 	vmov	r4, r5, d0
 8009c7e:	f7ff ff4f 	bl	8009b20 <__b2d>
 8009c82:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c86:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009c8a:	eba3 0c02 	sub.w	ip, r3, r2
 8009c8e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009c92:	1a9b      	subs	r3, r3, r2
 8009c94:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009c98:	ec51 0b10 	vmov	r0, r1, d0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	bfd6      	itet	le
 8009ca0:	460a      	movle	r2, r1
 8009ca2:	462a      	movgt	r2, r5
 8009ca4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ca8:	468b      	mov	fp, r1
 8009caa:	462f      	mov	r7, r5
 8009cac:	bfd4      	ite	le
 8009cae:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009cb2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	ee10 2a10 	vmov	r2, s0
 8009cbc:	465b      	mov	r3, fp
 8009cbe:	4639      	mov	r1, r7
 8009cc0:	f7f6 fddc 	bl	800087c <__aeabi_ddiv>
 8009cc4:	ec41 0b10 	vmov	d0, r0, r1
 8009cc8:	b003      	add	sp, #12
 8009cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009cce <__copybits>:
 8009cce:	3901      	subs	r1, #1
 8009cd0:	b570      	push	{r4, r5, r6, lr}
 8009cd2:	1149      	asrs	r1, r1, #5
 8009cd4:	6914      	ldr	r4, [r2, #16]
 8009cd6:	3101      	adds	r1, #1
 8009cd8:	f102 0314 	add.w	r3, r2, #20
 8009cdc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ce0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ce4:	1f05      	subs	r5, r0, #4
 8009ce6:	42a3      	cmp	r3, r4
 8009ce8:	d30c      	bcc.n	8009d04 <__copybits+0x36>
 8009cea:	1aa3      	subs	r3, r4, r2
 8009cec:	3b11      	subs	r3, #17
 8009cee:	f023 0303 	bic.w	r3, r3, #3
 8009cf2:	3211      	adds	r2, #17
 8009cf4:	42a2      	cmp	r2, r4
 8009cf6:	bf88      	it	hi
 8009cf8:	2300      	movhi	r3, #0
 8009cfa:	4418      	add	r0, r3
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	4288      	cmp	r0, r1
 8009d00:	d305      	bcc.n	8009d0e <__copybits+0x40>
 8009d02:	bd70      	pop	{r4, r5, r6, pc}
 8009d04:	f853 6b04 	ldr.w	r6, [r3], #4
 8009d08:	f845 6f04 	str.w	r6, [r5, #4]!
 8009d0c:	e7eb      	b.n	8009ce6 <__copybits+0x18>
 8009d0e:	f840 3b04 	str.w	r3, [r0], #4
 8009d12:	e7f4      	b.n	8009cfe <__copybits+0x30>

08009d14 <__any_on>:
 8009d14:	f100 0214 	add.w	r2, r0, #20
 8009d18:	6900      	ldr	r0, [r0, #16]
 8009d1a:	114b      	asrs	r3, r1, #5
 8009d1c:	4298      	cmp	r0, r3
 8009d1e:	b510      	push	{r4, lr}
 8009d20:	db11      	blt.n	8009d46 <__any_on+0x32>
 8009d22:	dd0a      	ble.n	8009d3a <__any_on+0x26>
 8009d24:	f011 011f 	ands.w	r1, r1, #31
 8009d28:	d007      	beq.n	8009d3a <__any_on+0x26>
 8009d2a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009d2e:	fa24 f001 	lsr.w	r0, r4, r1
 8009d32:	fa00 f101 	lsl.w	r1, r0, r1
 8009d36:	428c      	cmp	r4, r1
 8009d38:	d10b      	bne.n	8009d52 <__any_on+0x3e>
 8009d3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d3e:	4293      	cmp	r3, r2
 8009d40:	d803      	bhi.n	8009d4a <__any_on+0x36>
 8009d42:	2000      	movs	r0, #0
 8009d44:	bd10      	pop	{r4, pc}
 8009d46:	4603      	mov	r3, r0
 8009d48:	e7f7      	b.n	8009d3a <__any_on+0x26>
 8009d4a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d4e:	2900      	cmp	r1, #0
 8009d50:	d0f5      	beq.n	8009d3e <__any_on+0x2a>
 8009d52:	2001      	movs	r0, #1
 8009d54:	e7f6      	b.n	8009d44 <__any_on+0x30>

08009d56 <__ascii_wctomb>:
 8009d56:	b149      	cbz	r1, 8009d6c <__ascii_wctomb+0x16>
 8009d58:	2aff      	cmp	r2, #255	; 0xff
 8009d5a:	bf85      	ittet	hi
 8009d5c:	238a      	movhi	r3, #138	; 0x8a
 8009d5e:	6003      	strhi	r3, [r0, #0]
 8009d60:	700a      	strbls	r2, [r1, #0]
 8009d62:	f04f 30ff 	movhi.w	r0, #4294967295
 8009d66:	bf98      	it	ls
 8009d68:	2001      	movls	r0, #1
 8009d6a:	4770      	bx	lr
 8009d6c:	4608      	mov	r0, r1
 8009d6e:	4770      	bx	lr

08009d70 <__sflush_r>:
 8009d70:	898a      	ldrh	r2, [r1, #12]
 8009d72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d76:	4605      	mov	r5, r0
 8009d78:	0710      	lsls	r0, r2, #28
 8009d7a:	460c      	mov	r4, r1
 8009d7c:	d458      	bmi.n	8009e30 <__sflush_r+0xc0>
 8009d7e:	684b      	ldr	r3, [r1, #4]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	dc05      	bgt.n	8009d90 <__sflush_r+0x20>
 8009d84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	dc02      	bgt.n	8009d90 <__sflush_r+0x20>
 8009d8a:	2000      	movs	r0, #0
 8009d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d92:	2e00      	cmp	r6, #0
 8009d94:	d0f9      	beq.n	8009d8a <__sflush_r+0x1a>
 8009d96:	2300      	movs	r3, #0
 8009d98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d9c:	682f      	ldr	r7, [r5, #0]
 8009d9e:	6a21      	ldr	r1, [r4, #32]
 8009da0:	602b      	str	r3, [r5, #0]
 8009da2:	d032      	beq.n	8009e0a <__sflush_r+0x9a>
 8009da4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	075a      	lsls	r2, r3, #29
 8009daa:	d505      	bpl.n	8009db8 <__sflush_r+0x48>
 8009dac:	6863      	ldr	r3, [r4, #4]
 8009dae:	1ac0      	subs	r0, r0, r3
 8009db0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009db2:	b10b      	cbz	r3, 8009db8 <__sflush_r+0x48>
 8009db4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009db6:	1ac0      	subs	r0, r0, r3
 8009db8:	2300      	movs	r3, #0
 8009dba:	4602      	mov	r2, r0
 8009dbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009dbe:	6a21      	ldr	r1, [r4, #32]
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b0      	blx	r6
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	d106      	bne.n	8009dd8 <__sflush_r+0x68>
 8009dca:	6829      	ldr	r1, [r5, #0]
 8009dcc:	291d      	cmp	r1, #29
 8009dce:	d82b      	bhi.n	8009e28 <__sflush_r+0xb8>
 8009dd0:	4a29      	ldr	r2, [pc, #164]	; (8009e78 <__sflush_r+0x108>)
 8009dd2:	410a      	asrs	r2, r1
 8009dd4:	07d6      	lsls	r6, r2, #31
 8009dd6:	d427      	bmi.n	8009e28 <__sflush_r+0xb8>
 8009dd8:	2200      	movs	r2, #0
 8009dda:	6062      	str	r2, [r4, #4]
 8009ddc:	04d9      	lsls	r1, r3, #19
 8009dde:	6922      	ldr	r2, [r4, #16]
 8009de0:	6022      	str	r2, [r4, #0]
 8009de2:	d504      	bpl.n	8009dee <__sflush_r+0x7e>
 8009de4:	1c42      	adds	r2, r0, #1
 8009de6:	d101      	bne.n	8009dec <__sflush_r+0x7c>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b903      	cbnz	r3, 8009dee <__sflush_r+0x7e>
 8009dec:	6560      	str	r0, [r4, #84]	; 0x54
 8009dee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009df0:	602f      	str	r7, [r5, #0]
 8009df2:	2900      	cmp	r1, #0
 8009df4:	d0c9      	beq.n	8009d8a <__sflush_r+0x1a>
 8009df6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009dfa:	4299      	cmp	r1, r3
 8009dfc:	d002      	beq.n	8009e04 <__sflush_r+0x94>
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f7fe fe9a 	bl	8008b38 <_free_r>
 8009e04:	2000      	movs	r0, #0
 8009e06:	6360      	str	r0, [r4, #52]	; 0x34
 8009e08:	e7c0      	b.n	8009d8c <__sflush_r+0x1c>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	47b0      	blx	r6
 8009e10:	1c41      	adds	r1, r0, #1
 8009e12:	d1c8      	bne.n	8009da6 <__sflush_r+0x36>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0c5      	beq.n	8009da6 <__sflush_r+0x36>
 8009e1a:	2b1d      	cmp	r3, #29
 8009e1c:	d001      	beq.n	8009e22 <__sflush_r+0xb2>
 8009e1e:	2b16      	cmp	r3, #22
 8009e20:	d101      	bne.n	8009e26 <__sflush_r+0xb6>
 8009e22:	602f      	str	r7, [r5, #0]
 8009e24:	e7b1      	b.n	8009d8a <__sflush_r+0x1a>
 8009e26:	89a3      	ldrh	r3, [r4, #12]
 8009e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e2c:	81a3      	strh	r3, [r4, #12]
 8009e2e:	e7ad      	b.n	8009d8c <__sflush_r+0x1c>
 8009e30:	690f      	ldr	r7, [r1, #16]
 8009e32:	2f00      	cmp	r7, #0
 8009e34:	d0a9      	beq.n	8009d8a <__sflush_r+0x1a>
 8009e36:	0793      	lsls	r3, r2, #30
 8009e38:	680e      	ldr	r6, [r1, #0]
 8009e3a:	bf08      	it	eq
 8009e3c:	694b      	ldreq	r3, [r1, #20]
 8009e3e:	600f      	str	r7, [r1, #0]
 8009e40:	bf18      	it	ne
 8009e42:	2300      	movne	r3, #0
 8009e44:	eba6 0807 	sub.w	r8, r6, r7
 8009e48:	608b      	str	r3, [r1, #8]
 8009e4a:	f1b8 0f00 	cmp.w	r8, #0
 8009e4e:	dd9c      	ble.n	8009d8a <__sflush_r+0x1a>
 8009e50:	6a21      	ldr	r1, [r4, #32]
 8009e52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009e54:	4643      	mov	r3, r8
 8009e56:	463a      	mov	r2, r7
 8009e58:	4628      	mov	r0, r5
 8009e5a:	47b0      	blx	r6
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	dc06      	bgt.n	8009e6e <__sflush_r+0xfe>
 8009e60:	89a3      	ldrh	r3, [r4, #12]
 8009e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e66:	81a3      	strh	r3, [r4, #12]
 8009e68:	f04f 30ff 	mov.w	r0, #4294967295
 8009e6c:	e78e      	b.n	8009d8c <__sflush_r+0x1c>
 8009e6e:	4407      	add	r7, r0
 8009e70:	eba8 0800 	sub.w	r8, r8, r0
 8009e74:	e7e9      	b.n	8009e4a <__sflush_r+0xda>
 8009e76:	bf00      	nop
 8009e78:	dfbffffe 	.word	0xdfbffffe

08009e7c <_fflush_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	690b      	ldr	r3, [r1, #16]
 8009e80:	4605      	mov	r5, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	b913      	cbnz	r3, 8009e8c <_fflush_r+0x10>
 8009e86:	2500      	movs	r5, #0
 8009e88:	4628      	mov	r0, r5
 8009e8a:	bd38      	pop	{r3, r4, r5, pc}
 8009e8c:	b118      	cbz	r0, 8009e96 <_fflush_r+0x1a>
 8009e8e:	6a03      	ldr	r3, [r0, #32]
 8009e90:	b90b      	cbnz	r3, 8009e96 <_fflush_r+0x1a>
 8009e92:	f7fe fd31 	bl	80088f8 <__sinit>
 8009e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d0f3      	beq.n	8009e86 <_fflush_r+0xa>
 8009e9e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ea0:	07d0      	lsls	r0, r2, #31
 8009ea2:	d404      	bmi.n	8009eae <_fflush_r+0x32>
 8009ea4:	0599      	lsls	r1, r3, #22
 8009ea6:	d402      	bmi.n	8009eae <_fflush_r+0x32>
 8009ea8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eaa:	f7fe fe2a 	bl	8008b02 <__retarget_lock_acquire_recursive>
 8009eae:	4628      	mov	r0, r5
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	f7ff ff5d 	bl	8009d70 <__sflush_r>
 8009eb6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eb8:	07da      	lsls	r2, r3, #31
 8009eba:	4605      	mov	r5, r0
 8009ebc:	d4e4      	bmi.n	8009e88 <_fflush_r+0xc>
 8009ebe:	89a3      	ldrh	r3, [r4, #12]
 8009ec0:	059b      	lsls	r3, r3, #22
 8009ec2:	d4e1      	bmi.n	8009e88 <_fflush_r+0xc>
 8009ec4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ec6:	f7fe fe1d 	bl	8008b04 <__retarget_lock_release_recursive>
 8009eca:	e7dd      	b.n	8009e88 <_fflush_r+0xc>

08009ecc <_sbrk_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d06      	ldr	r5, [pc, #24]	; (8009ee8 <_sbrk_r+0x1c>)
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	4604      	mov	r4, r0
 8009ed4:	4608      	mov	r0, r1
 8009ed6:	602b      	str	r3, [r5, #0]
 8009ed8:	f7fa f95c 	bl	8004194 <_sbrk>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d102      	bne.n	8009ee6 <_sbrk_r+0x1a>
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	b103      	cbz	r3, 8009ee6 <_sbrk_r+0x1a>
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	bd38      	pop	{r3, r4, r5, pc}
 8009ee8:	200007d4 	.word	0x200007d4

08009eec <__assert_func>:
 8009eec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009eee:	4614      	mov	r4, r2
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4b09      	ldr	r3, [pc, #36]	; (8009f18 <__assert_func+0x2c>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4605      	mov	r5, r0
 8009ef8:	68d8      	ldr	r0, [r3, #12]
 8009efa:	b14c      	cbz	r4, 8009f10 <__assert_func+0x24>
 8009efc:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <__assert_func+0x30>)
 8009efe:	9100      	str	r1, [sp, #0]
 8009f00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f04:	4906      	ldr	r1, [pc, #24]	; (8009f20 <__assert_func+0x34>)
 8009f06:	462b      	mov	r3, r5
 8009f08:	f000 f82c 	bl	8009f64 <fiprintf>
 8009f0c:	f000 f83c 	bl	8009f88 <abort>
 8009f10:	4b04      	ldr	r3, [pc, #16]	; (8009f24 <__assert_func+0x38>)
 8009f12:	461c      	mov	r4, r3
 8009f14:	e7f3      	b.n	8009efe <__assert_func+0x12>
 8009f16:	bf00      	nop
 8009f18:	20000238 	.word	0x20000238
 8009f1c:	0800bf45 	.word	0x0800bf45
 8009f20:	0800bf52 	.word	0x0800bf52
 8009f24:	0800bf80 	.word	0x0800bf80

08009f28 <_calloc_r>:
 8009f28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f2a:	fba1 2402 	umull	r2, r4, r1, r2
 8009f2e:	b94c      	cbnz	r4, 8009f44 <_calloc_r+0x1c>
 8009f30:	4611      	mov	r1, r2
 8009f32:	9201      	str	r2, [sp, #4]
 8009f34:	f7ff f9c4 	bl	80092c0 <_malloc_r>
 8009f38:	9a01      	ldr	r2, [sp, #4]
 8009f3a:	4605      	mov	r5, r0
 8009f3c:	b930      	cbnz	r0, 8009f4c <_calloc_r+0x24>
 8009f3e:	4628      	mov	r0, r5
 8009f40:	b003      	add	sp, #12
 8009f42:	bd30      	pop	{r4, r5, pc}
 8009f44:	220c      	movs	r2, #12
 8009f46:	6002      	str	r2, [r0, #0]
 8009f48:	2500      	movs	r5, #0
 8009f4a:	e7f8      	b.n	8009f3e <_calloc_r+0x16>
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	f7fe fd4c 	bl	80089ea <memset>
 8009f52:	e7f4      	b.n	8009f3e <_calloc_r+0x16>

08009f54 <malloc>:
 8009f54:	4b02      	ldr	r3, [pc, #8]	; (8009f60 <malloc+0xc>)
 8009f56:	4601      	mov	r1, r0
 8009f58:	6818      	ldr	r0, [r3, #0]
 8009f5a:	f7ff b9b1 	b.w	80092c0 <_malloc_r>
 8009f5e:	bf00      	nop
 8009f60:	20000238 	.word	0x20000238

08009f64 <fiprintf>:
 8009f64:	b40e      	push	{r1, r2, r3}
 8009f66:	b503      	push	{r0, r1, lr}
 8009f68:	4601      	mov	r1, r0
 8009f6a:	ab03      	add	r3, sp, #12
 8009f6c:	4805      	ldr	r0, [pc, #20]	; (8009f84 <fiprintf+0x20>)
 8009f6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f72:	6800      	ldr	r0, [r0, #0]
 8009f74:	9301      	str	r3, [sp, #4]
 8009f76:	f000 f837 	bl	8009fe8 <_vfiprintf_r>
 8009f7a:	b002      	add	sp, #8
 8009f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f80:	b003      	add	sp, #12
 8009f82:	4770      	bx	lr
 8009f84:	20000238 	.word	0x20000238

08009f88 <abort>:
 8009f88:	b508      	push	{r3, lr}
 8009f8a:	2006      	movs	r0, #6
 8009f8c:	f000 fb94 	bl	800a6b8 <raise>
 8009f90:	2001      	movs	r0, #1
 8009f92:	f7fa f887 	bl	80040a4 <_exit>

08009f96 <__sfputc_r>:
 8009f96:	6893      	ldr	r3, [r2, #8]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	b410      	push	{r4}
 8009f9e:	6093      	str	r3, [r2, #8]
 8009fa0:	da08      	bge.n	8009fb4 <__sfputc_r+0x1e>
 8009fa2:	6994      	ldr	r4, [r2, #24]
 8009fa4:	42a3      	cmp	r3, r4
 8009fa6:	db01      	blt.n	8009fac <__sfputc_r+0x16>
 8009fa8:	290a      	cmp	r1, #10
 8009faa:	d103      	bne.n	8009fb4 <__sfputc_r+0x1e>
 8009fac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fb0:	f000 bac4 	b.w	800a53c <__swbuf_r>
 8009fb4:	6813      	ldr	r3, [r2, #0]
 8009fb6:	1c58      	adds	r0, r3, #1
 8009fb8:	6010      	str	r0, [r2, #0]
 8009fba:	7019      	strb	r1, [r3, #0]
 8009fbc:	4608      	mov	r0, r1
 8009fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fc2:	4770      	bx	lr

08009fc4 <__sfputs_r>:
 8009fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	460f      	mov	r7, r1
 8009fca:	4614      	mov	r4, r2
 8009fcc:	18d5      	adds	r5, r2, r3
 8009fce:	42ac      	cmp	r4, r5
 8009fd0:	d101      	bne.n	8009fd6 <__sfputs_r+0x12>
 8009fd2:	2000      	movs	r0, #0
 8009fd4:	e007      	b.n	8009fe6 <__sfputs_r+0x22>
 8009fd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fda:	463a      	mov	r2, r7
 8009fdc:	4630      	mov	r0, r6
 8009fde:	f7ff ffda 	bl	8009f96 <__sfputc_r>
 8009fe2:	1c43      	adds	r3, r0, #1
 8009fe4:	d1f3      	bne.n	8009fce <__sfputs_r+0xa>
 8009fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fe8 <_vfiprintf_r>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	460d      	mov	r5, r1
 8009fee:	b09d      	sub	sp, #116	; 0x74
 8009ff0:	4614      	mov	r4, r2
 8009ff2:	4698      	mov	r8, r3
 8009ff4:	4606      	mov	r6, r0
 8009ff6:	b118      	cbz	r0, 800a000 <_vfiprintf_r+0x18>
 8009ff8:	6a03      	ldr	r3, [r0, #32]
 8009ffa:	b90b      	cbnz	r3, 800a000 <_vfiprintf_r+0x18>
 8009ffc:	f7fe fc7c 	bl	80088f8 <__sinit>
 800a000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a002:	07d9      	lsls	r1, r3, #31
 800a004:	d405      	bmi.n	800a012 <_vfiprintf_r+0x2a>
 800a006:	89ab      	ldrh	r3, [r5, #12]
 800a008:	059a      	lsls	r2, r3, #22
 800a00a:	d402      	bmi.n	800a012 <_vfiprintf_r+0x2a>
 800a00c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a00e:	f7fe fd78 	bl	8008b02 <__retarget_lock_acquire_recursive>
 800a012:	89ab      	ldrh	r3, [r5, #12]
 800a014:	071b      	lsls	r3, r3, #28
 800a016:	d501      	bpl.n	800a01c <_vfiprintf_r+0x34>
 800a018:	692b      	ldr	r3, [r5, #16]
 800a01a:	b99b      	cbnz	r3, 800a044 <_vfiprintf_r+0x5c>
 800a01c:	4629      	mov	r1, r5
 800a01e:	4630      	mov	r0, r6
 800a020:	f000 faca 	bl	800a5b8 <__swsetup_r>
 800a024:	b170      	cbz	r0, 800a044 <_vfiprintf_r+0x5c>
 800a026:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a028:	07dc      	lsls	r4, r3, #31
 800a02a:	d504      	bpl.n	800a036 <_vfiprintf_r+0x4e>
 800a02c:	f04f 30ff 	mov.w	r0, #4294967295
 800a030:	b01d      	add	sp, #116	; 0x74
 800a032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a036:	89ab      	ldrh	r3, [r5, #12]
 800a038:	0598      	lsls	r0, r3, #22
 800a03a:	d4f7      	bmi.n	800a02c <_vfiprintf_r+0x44>
 800a03c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a03e:	f7fe fd61 	bl	8008b04 <__retarget_lock_release_recursive>
 800a042:	e7f3      	b.n	800a02c <_vfiprintf_r+0x44>
 800a044:	2300      	movs	r3, #0
 800a046:	9309      	str	r3, [sp, #36]	; 0x24
 800a048:	2320      	movs	r3, #32
 800a04a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a04e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a052:	2330      	movs	r3, #48	; 0x30
 800a054:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a208 <_vfiprintf_r+0x220>
 800a058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a05c:	f04f 0901 	mov.w	r9, #1
 800a060:	4623      	mov	r3, r4
 800a062:	469a      	mov	sl, r3
 800a064:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a068:	b10a      	cbz	r2, 800a06e <_vfiprintf_r+0x86>
 800a06a:	2a25      	cmp	r2, #37	; 0x25
 800a06c:	d1f9      	bne.n	800a062 <_vfiprintf_r+0x7a>
 800a06e:	ebba 0b04 	subs.w	fp, sl, r4
 800a072:	d00b      	beq.n	800a08c <_vfiprintf_r+0xa4>
 800a074:	465b      	mov	r3, fp
 800a076:	4622      	mov	r2, r4
 800a078:	4629      	mov	r1, r5
 800a07a:	4630      	mov	r0, r6
 800a07c:	f7ff ffa2 	bl	8009fc4 <__sfputs_r>
 800a080:	3001      	adds	r0, #1
 800a082:	f000 80a9 	beq.w	800a1d8 <_vfiprintf_r+0x1f0>
 800a086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a088:	445a      	add	r2, fp
 800a08a:	9209      	str	r2, [sp, #36]	; 0x24
 800a08c:	f89a 3000 	ldrb.w	r3, [sl]
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 80a1 	beq.w	800a1d8 <_vfiprintf_r+0x1f0>
 800a096:	2300      	movs	r3, #0
 800a098:	f04f 32ff 	mov.w	r2, #4294967295
 800a09c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0a0:	f10a 0a01 	add.w	sl, sl, #1
 800a0a4:	9304      	str	r3, [sp, #16]
 800a0a6:	9307      	str	r3, [sp, #28]
 800a0a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a0ae:	4654      	mov	r4, sl
 800a0b0:	2205      	movs	r2, #5
 800a0b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0b6:	4854      	ldr	r0, [pc, #336]	; (800a208 <_vfiprintf_r+0x220>)
 800a0b8:	f7f6 f8aa 	bl	8000210 <memchr>
 800a0bc:	9a04      	ldr	r2, [sp, #16]
 800a0be:	b9d8      	cbnz	r0, 800a0f8 <_vfiprintf_r+0x110>
 800a0c0:	06d1      	lsls	r1, r2, #27
 800a0c2:	bf44      	itt	mi
 800a0c4:	2320      	movmi	r3, #32
 800a0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ca:	0713      	lsls	r3, r2, #28
 800a0cc:	bf44      	itt	mi
 800a0ce:	232b      	movmi	r3, #43	; 0x2b
 800a0d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a0d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a0da:	d015      	beq.n	800a108 <_vfiprintf_r+0x120>
 800a0dc:	9a07      	ldr	r2, [sp, #28]
 800a0de:	4654      	mov	r4, sl
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	f04f 0c0a 	mov.w	ip, #10
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ec:	3b30      	subs	r3, #48	; 0x30
 800a0ee:	2b09      	cmp	r3, #9
 800a0f0:	d94d      	bls.n	800a18e <_vfiprintf_r+0x1a6>
 800a0f2:	b1b0      	cbz	r0, 800a122 <_vfiprintf_r+0x13a>
 800a0f4:	9207      	str	r2, [sp, #28]
 800a0f6:	e014      	b.n	800a122 <_vfiprintf_r+0x13a>
 800a0f8:	eba0 0308 	sub.w	r3, r0, r8
 800a0fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a100:	4313      	orrs	r3, r2
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	46a2      	mov	sl, r4
 800a106:	e7d2      	b.n	800a0ae <_vfiprintf_r+0xc6>
 800a108:	9b03      	ldr	r3, [sp, #12]
 800a10a:	1d19      	adds	r1, r3, #4
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	9103      	str	r1, [sp, #12]
 800a110:	2b00      	cmp	r3, #0
 800a112:	bfbb      	ittet	lt
 800a114:	425b      	neglt	r3, r3
 800a116:	f042 0202 	orrlt.w	r2, r2, #2
 800a11a:	9307      	strge	r3, [sp, #28]
 800a11c:	9307      	strlt	r3, [sp, #28]
 800a11e:	bfb8      	it	lt
 800a120:	9204      	strlt	r2, [sp, #16]
 800a122:	7823      	ldrb	r3, [r4, #0]
 800a124:	2b2e      	cmp	r3, #46	; 0x2e
 800a126:	d10c      	bne.n	800a142 <_vfiprintf_r+0x15a>
 800a128:	7863      	ldrb	r3, [r4, #1]
 800a12a:	2b2a      	cmp	r3, #42	; 0x2a
 800a12c:	d134      	bne.n	800a198 <_vfiprintf_r+0x1b0>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	1d1a      	adds	r2, r3, #4
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	9203      	str	r2, [sp, #12]
 800a136:	2b00      	cmp	r3, #0
 800a138:	bfb8      	it	lt
 800a13a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a13e:	3402      	adds	r4, #2
 800a140:	9305      	str	r3, [sp, #20]
 800a142:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a218 <_vfiprintf_r+0x230>
 800a146:	7821      	ldrb	r1, [r4, #0]
 800a148:	2203      	movs	r2, #3
 800a14a:	4650      	mov	r0, sl
 800a14c:	f7f6 f860 	bl	8000210 <memchr>
 800a150:	b138      	cbz	r0, 800a162 <_vfiprintf_r+0x17a>
 800a152:	9b04      	ldr	r3, [sp, #16]
 800a154:	eba0 000a 	sub.w	r0, r0, sl
 800a158:	2240      	movs	r2, #64	; 0x40
 800a15a:	4082      	lsls	r2, r0
 800a15c:	4313      	orrs	r3, r2
 800a15e:	3401      	adds	r4, #1
 800a160:	9304      	str	r3, [sp, #16]
 800a162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a166:	4829      	ldr	r0, [pc, #164]	; (800a20c <_vfiprintf_r+0x224>)
 800a168:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a16c:	2206      	movs	r2, #6
 800a16e:	f7f6 f84f 	bl	8000210 <memchr>
 800a172:	2800      	cmp	r0, #0
 800a174:	d03f      	beq.n	800a1f6 <_vfiprintf_r+0x20e>
 800a176:	4b26      	ldr	r3, [pc, #152]	; (800a210 <_vfiprintf_r+0x228>)
 800a178:	bb1b      	cbnz	r3, 800a1c2 <_vfiprintf_r+0x1da>
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	3307      	adds	r3, #7
 800a17e:	f023 0307 	bic.w	r3, r3, #7
 800a182:	3308      	adds	r3, #8
 800a184:	9303      	str	r3, [sp, #12]
 800a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a188:	443b      	add	r3, r7
 800a18a:	9309      	str	r3, [sp, #36]	; 0x24
 800a18c:	e768      	b.n	800a060 <_vfiprintf_r+0x78>
 800a18e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a192:	460c      	mov	r4, r1
 800a194:	2001      	movs	r0, #1
 800a196:	e7a6      	b.n	800a0e6 <_vfiprintf_r+0xfe>
 800a198:	2300      	movs	r3, #0
 800a19a:	3401      	adds	r4, #1
 800a19c:	9305      	str	r3, [sp, #20]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	f04f 0c0a 	mov.w	ip, #10
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1aa:	3a30      	subs	r2, #48	; 0x30
 800a1ac:	2a09      	cmp	r2, #9
 800a1ae:	d903      	bls.n	800a1b8 <_vfiprintf_r+0x1d0>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0c6      	beq.n	800a142 <_vfiprintf_r+0x15a>
 800a1b4:	9105      	str	r1, [sp, #20]
 800a1b6:	e7c4      	b.n	800a142 <_vfiprintf_r+0x15a>
 800a1b8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1bc:	4604      	mov	r4, r0
 800a1be:	2301      	movs	r3, #1
 800a1c0:	e7f0      	b.n	800a1a4 <_vfiprintf_r+0x1bc>
 800a1c2:	ab03      	add	r3, sp, #12
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	462a      	mov	r2, r5
 800a1c8:	4b12      	ldr	r3, [pc, #72]	; (800a214 <_vfiprintf_r+0x22c>)
 800a1ca:	a904      	add	r1, sp, #16
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f3af 8000 	nop.w
 800a1d2:	4607      	mov	r7, r0
 800a1d4:	1c78      	adds	r0, r7, #1
 800a1d6:	d1d6      	bne.n	800a186 <_vfiprintf_r+0x19e>
 800a1d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1da:	07d9      	lsls	r1, r3, #31
 800a1dc:	d405      	bmi.n	800a1ea <_vfiprintf_r+0x202>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	059a      	lsls	r2, r3, #22
 800a1e2:	d402      	bmi.n	800a1ea <_vfiprintf_r+0x202>
 800a1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1e6:	f7fe fc8d 	bl	8008b04 <__retarget_lock_release_recursive>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	065b      	lsls	r3, r3, #25
 800a1ee:	f53f af1d 	bmi.w	800a02c <_vfiprintf_r+0x44>
 800a1f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1f4:	e71c      	b.n	800a030 <_vfiprintf_r+0x48>
 800a1f6:	ab03      	add	r3, sp, #12
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	462a      	mov	r2, r5
 800a1fc:	4b05      	ldr	r3, [pc, #20]	; (800a214 <_vfiprintf_r+0x22c>)
 800a1fe:	a904      	add	r1, sp, #16
 800a200:	4630      	mov	r0, r6
 800a202:	f000 f879 	bl	800a2f8 <_printf_i>
 800a206:	e7e4      	b.n	800a1d2 <_vfiprintf_r+0x1ea>
 800a208:	0800bf81 	.word	0x0800bf81
 800a20c:	0800bf8b 	.word	0x0800bf8b
 800a210:	00000000 	.word	0x00000000
 800a214:	08009fc5 	.word	0x08009fc5
 800a218:	0800bf87 	.word	0x0800bf87

0800a21c <_printf_common>:
 800a21c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	4616      	mov	r6, r2
 800a222:	4699      	mov	r9, r3
 800a224:	688a      	ldr	r2, [r1, #8]
 800a226:	690b      	ldr	r3, [r1, #16]
 800a228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a22c:	4293      	cmp	r3, r2
 800a22e:	bfb8      	it	lt
 800a230:	4613      	movlt	r3, r2
 800a232:	6033      	str	r3, [r6, #0]
 800a234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a238:	4607      	mov	r7, r0
 800a23a:	460c      	mov	r4, r1
 800a23c:	b10a      	cbz	r2, 800a242 <_printf_common+0x26>
 800a23e:	3301      	adds	r3, #1
 800a240:	6033      	str	r3, [r6, #0]
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	0699      	lsls	r1, r3, #26
 800a246:	bf42      	ittt	mi
 800a248:	6833      	ldrmi	r3, [r6, #0]
 800a24a:	3302      	addmi	r3, #2
 800a24c:	6033      	strmi	r3, [r6, #0]
 800a24e:	6825      	ldr	r5, [r4, #0]
 800a250:	f015 0506 	ands.w	r5, r5, #6
 800a254:	d106      	bne.n	800a264 <_printf_common+0x48>
 800a256:	f104 0a19 	add.w	sl, r4, #25
 800a25a:	68e3      	ldr	r3, [r4, #12]
 800a25c:	6832      	ldr	r2, [r6, #0]
 800a25e:	1a9b      	subs	r3, r3, r2
 800a260:	42ab      	cmp	r3, r5
 800a262:	dc26      	bgt.n	800a2b2 <_printf_common+0x96>
 800a264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a268:	1e13      	subs	r3, r2, #0
 800a26a:	6822      	ldr	r2, [r4, #0]
 800a26c:	bf18      	it	ne
 800a26e:	2301      	movne	r3, #1
 800a270:	0692      	lsls	r2, r2, #26
 800a272:	d42b      	bmi.n	800a2cc <_printf_common+0xb0>
 800a274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a278:	4649      	mov	r1, r9
 800a27a:	4638      	mov	r0, r7
 800a27c:	47c0      	blx	r8
 800a27e:	3001      	adds	r0, #1
 800a280:	d01e      	beq.n	800a2c0 <_printf_common+0xa4>
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	6922      	ldr	r2, [r4, #16]
 800a286:	f003 0306 	and.w	r3, r3, #6
 800a28a:	2b04      	cmp	r3, #4
 800a28c:	bf02      	ittt	eq
 800a28e:	68e5      	ldreq	r5, [r4, #12]
 800a290:	6833      	ldreq	r3, [r6, #0]
 800a292:	1aed      	subeq	r5, r5, r3
 800a294:	68a3      	ldr	r3, [r4, #8]
 800a296:	bf0c      	ite	eq
 800a298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a29c:	2500      	movne	r5, #0
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	bfc4      	itt	gt
 800a2a2:	1a9b      	subgt	r3, r3, r2
 800a2a4:	18ed      	addgt	r5, r5, r3
 800a2a6:	2600      	movs	r6, #0
 800a2a8:	341a      	adds	r4, #26
 800a2aa:	42b5      	cmp	r5, r6
 800a2ac:	d11a      	bne.n	800a2e4 <_printf_common+0xc8>
 800a2ae:	2000      	movs	r0, #0
 800a2b0:	e008      	b.n	800a2c4 <_printf_common+0xa8>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	4652      	mov	r2, sl
 800a2b6:	4649      	mov	r1, r9
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	47c0      	blx	r8
 800a2bc:	3001      	adds	r0, #1
 800a2be:	d103      	bne.n	800a2c8 <_printf_common+0xac>
 800a2c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	e7c6      	b.n	800a25a <_printf_common+0x3e>
 800a2cc:	18e1      	adds	r1, r4, r3
 800a2ce:	1c5a      	adds	r2, r3, #1
 800a2d0:	2030      	movs	r0, #48	; 0x30
 800a2d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2d6:	4422      	add	r2, r4
 800a2d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2e0:	3302      	adds	r3, #2
 800a2e2:	e7c7      	b.n	800a274 <_printf_common+0x58>
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	4622      	mov	r2, r4
 800a2e8:	4649      	mov	r1, r9
 800a2ea:	4638      	mov	r0, r7
 800a2ec:	47c0      	blx	r8
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	d0e6      	beq.n	800a2c0 <_printf_common+0xa4>
 800a2f2:	3601      	adds	r6, #1
 800a2f4:	e7d9      	b.n	800a2aa <_printf_common+0x8e>
	...

0800a2f8 <_printf_i>:
 800a2f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	7e0f      	ldrb	r7, [r1, #24]
 800a2fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a300:	2f78      	cmp	r7, #120	; 0x78
 800a302:	4691      	mov	r9, r2
 800a304:	4680      	mov	r8, r0
 800a306:	460c      	mov	r4, r1
 800a308:	469a      	mov	sl, r3
 800a30a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a30e:	d807      	bhi.n	800a320 <_printf_i+0x28>
 800a310:	2f62      	cmp	r7, #98	; 0x62
 800a312:	d80a      	bhi.n	800a32a <_printf_i+0x32>
 800a314:	2f00      	cmp	r7, #0
 800a316:	f000 80d4 	beq.w	800a4c2 <_printf_i+0x1ca>
 800a31a:	2f58      	cmp	r7, #88	; 0x58
 800a31c:	f000 80c0 	beq.w	800a4a0 <_printf_i+0x1a8>
 800a320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a328:	e03a      	b.n	800a3a0 <_printf_i+0xa8>
 800a32a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a32e:	2b15      	cmp	r3, #21
 800a330:	d8f6      	bhi.n	800a320 <_printf_i+0x28>
 800a332:	a101      	add	r1, pc, #4	; (adr r1, 800a338 <_printf_i+0x40>)
 800a334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a338:	0800a391 	.word	0x0800a391
 800a33c:	0800a3a5 	.word	0x0800a3a5
 800a340:	0800a321 	.word	0x0800a321
 800a344:	0800a321 	.word	0x0800a321
 800a348:	0800a321 	.word	0x0800a321
 800a34c:	0800a321 	.word	0x0800a321
 800a350:	0800a3a5 	.word	0x0800a3a5
 800a354:	0800a321 	.word	0x0800a321
 800a358:	0800a321 	.word	0x0800a321
 800a35c:	0800a321 	.word	0x0800a321
 800a360:	0800a321 	.word	0x0800a321
 800a364:	0800a4a9 	.word	0x0800a4a9
 800a368:	0800a3d1 	.word	0x0800a3d1
 800a36c:	0800a463 	.word	0x0800a463
 800a370:	0800a321 	.word	0x0800a321
 800a374:	0800a321 	.word	0x0800a321
 800a378:	0800a4cb 	.word	0x0800a4cb
 800a37c:	0800a321 	.word	0x0800a321
 800a380:	0800a3d1 	.word	0x0800a3d1
 800a384:	0800a321 	.word	0x0800a321
 800a388:	0800a321 	.word	0x0800a321
 800a38c:	0800a46b 	.word	0x0800a46b
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	1d1a      	adds	r2, r3, #4
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	602a      	str	r2, [r5, #0]
 800a398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a39c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e09f      	b.n	800a4e4 <_printf_i+0x1ec>
 800a3a4:	6820      	ldr	r0, [r4, #0]
 800a3a6:	682b      	ldr	r3, [r5, #0]
 800a3a8:	0607      	lsls	r7, r0, #24
 800a3aa:	f103 0104 	add.w	r1, r3, #4
 800a3ae:	6029      	str	r1, [r5, #0]
 800a3b0:	d501      	bpl.n	800a3b6 <_printf_i+0xbe>
 800a3b2:	681e      	ldr	r6, [r3, #0]
 800a3b4:	e003      	b.n	800a3be <_printf_i+0xc6>
 800a3b6:	0646      	lsls	r6, r0, #25
 800a3b8:	d5fb      	bpl.n	800a3b2 <_printf_i+0xba>
 800a3ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a3be:	2e00      	cmp	r6, #0
 800a3c0:	da03      	bge.n	800a3ca <_printf_i+0xd2>
 800a3c2:	232d      	movs	r3, #45	; 0x2d
 800a3c4:	4276      	negs	r6, r6
 800a3c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3ca:	485a      	ldr	r0, [pc, #360]	; (800a534 <_printf_i+0x23c>)
 800a3cc:	230a      	movs	r3, #10
 800a3ce:	e012      	b.n	800a3f6 <_printf_i+0xfe>
 800a3d0:	682b      	ldr	r3, [r5, #0]
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	1d19      	adds	r1, r3, #4
 800a3d6:	6029      	str	r1, [r5, #0]
 800a3d8:	0605      	lsls	r5, r0, #24
 800a3da:	d501      	bpl.n	800a3e0 <_printf_i+0xe8>
 800a3dc:	681e      	ldr	r6, [r3, #0]
 800a3de:	e002      	b.n	800a3e6 <_printf_i+0xee>
 800a3e0:	0641      	lsls	r1, r0, #25
 800a3e2:	d5fb      	bpl.n	800a3dc <_printf_i+0xe4>
 800a3e4:	881e      	ldrh	r6, [r3, #0]
 800a3e6:	4853      	ldr	r0, [pc, #332]	; (800a534 <_printf_i+0x23c>)
 800a3e8:	2f6f      	cmp	r7, #111	; 0x6f
 800a3ea:	bf0c      	ite	eq
 800a3ec:	2308      	moveq	r3, #8
 800a3ee:	230a      	movne	r3, #10
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3f6:	6865      	ldr	r5, [r4, #4]
 800a3f8:	60a5      	str	r5, [r4, #8]
 800a3fa:	2d00      	cmp	r5, #0
 800a3fc:	bfa2      	ittt	ge
 800a3fe:	6821      	ldrge	r1, [r4, #0]
 800a400:	f021 0104 	bicge.w	r1, r1, #4
 800a404:	6021      	strge	r1, [r4, #0]
 800a406:	b90e      	cbnz	r6, 800a40c <_printf_i+0x114>
 800a408:	2d00      	cmp	r5, #0
 800a40a:	d04b      	beq.n	800a4a4 <_printf_i+0x1ac>
 800a40c:	4615      	mov	r5, r2
 800a40e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a412:	fb03 6711 	mls	r7, r3, r1, r6
 800a416:	5dc7      	ldrb	r7, [r0, r7]
 800a418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a41c:	4637      	mov	r7, r6
 800a41e:	42bb      	cmp	r3, r7
 800a420:	460e      	mov	r6, r1
 800a422:	d9f4      	bls.n	800a40e <_printf_i+0x116>
 800a424:	2b08      	cmp	r3, #8
 800a426:	d10b      	bne.n	800a440 <_printf_i+0x148>
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	07de      	lsls	r6, r3, #31
 800a42c:	d508      	bpl.n	800a440 <_printf_i+0x148>
 800a42e:	6923      	ldr	r3, [r4, #16]
 800a430:	6861      	ldr	r1, [r4, #4]
 800a432:	4299      	cmp	r1, r3
 800a434:	bfde      	ittt	le
 800a436:	2330      	movle	r3, #48	; 0x30
 800a438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a43c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a440:	1b52      	subs	r2, r2, r5
 800a442:	6122      	str	r2, [r4, #16]
 800a444:	f8cd a000 	str.w	sl, [sp]
 800a448:	464b      	mov	r3, r9
 800a44a:	aa03      	add	r2, sp, #12
 800a44c:	4621      	mov	r1, r4
 800a44e:	4640      	mov	r0, r8
 800a450:	f7ff fee4 	bl	800a21c <_printf_common>
 800a454:	3001      	adds	r0, #1
 800a456:	d14a      	bne.n	800a4ee <_printf_i+0x1f6>
 800a458:	f04f 30ff 	mov.w	r0, #4294967295
 800a45c:	b004      	add	sp, #16
 800a45e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a462:	6823      	ldr	r3, [r4, #0]
 800a464:	f043 0320 	orr.w	r3, r3, #32
 800a468:	6023      	str	r3, [r4, #0]
 800a46a:	4833      	ldr	r0, [pc, #204]	; (800a538 <_printf_i+0x240>)
 800a46c:	2778      	movs	r7, #120	; 0x78
 800a46e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	6829      	ldr	r1, [r5, #0]
 800a476:	061f      	lsls	r7, r3, #24
 800a478:	f851 6b04 	ldr.w	r6, [r1], #4
 800a47c:	d402      	bmi.n	800a484 <_printf_i+0x18c>
 800a47e:	065f      	lsls	r7, r3, #25
 800a480:	bf48      	it	mi
 800a482:	b2b6      	uxthmi	r6, r6
 800a484:	07df      	lsls	r7, r3, #31
 800a486:	bf48      	it	mi
 800a488:	f043 0320 	orrmi.w	r3, r3, #32
 800a48c:	6029      	str	r1, [r5, #0]
 800a48e:	bf48      	it	mi
 800a490:	6023      	strmi	r3, [r4, #0]
 800a492:	b91e      	cbnz	r6, 800a49c <_printf_i+0x1a4>
 800a494:	6823      	ldr	r3, [r4, #0]
 800a496:	f023 0320 	bic.w	r3, r3, #32
 800a49a:	6023      	str	r3, [r4, #0]
 800a49c:	2310      	movs	r3, #16
 800a49e:	e7a7      	b.n	800a3f0 <_printf_i+0xf8>
 800a4a0:	4824      	ldr	r0, [pc, #144]	; (800a534 <_printf_i+0x23c>)
 800a4a2:	e7e4      	b.n	800a46e <_printf_i+0x176>
 800a4a4:	4615      	mov	r5, r2
 800a4a6:	e7bd      	b.n	800a424 <_printf_i+0x12c>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	6826      	ldr	r6, [r4, #0]
 800a4ac:	6961      	ldr	r1, [r4, #20]
 800a4ae:	1d18      	adds	r0, r3, #4
 800a4b0:	6028      	str	r0, [r5, #0]
 800a4b2:	0635      	lsls	r5, r6, #24
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	d501      	bpl.n	800a4bc <_printf_i+0x1c4>
 800a4b8:	6019      	str	r1, [r3, #0]
 800a4ba:	e002      	b.n	800a4c2 <_printf_i+0x1ca>
 800a4bc:	0670      	lsls	r0, r6, #25
 800a4be:	d5fb      	bpl.n	800a4b8 <_printf_i+0x1c0>
 800a4c0:	8019      	strh	r1, [r3, #0]
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	6123      	str	r3, [r4, #16]
 800a4c6:	4615      	mov	r5, r2
 800a4c8:	e7bc      	b.n	800a444 <_printf_i+0x14c>
 800a4ca:	682b      	ldr	r3, [r5, #0]
 800a4cc:	1d1a      	adds	r2, r3, #4
 800a4ce:	602a      	str	r2, [r5, #0]
 800a4d0:	681d      	ldr	r5, [r3, #0]
 800a4d2:	6862      	ldr	r2, [r4, #4]
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	f7f5 fe9a 	bl	8000210 <memchr>
 800a4dc:	b108      	cbz	r0, 800a4e2 <_printf_i+0x1ea>
 800a4de:	1b40      	subs	r0, r0, r5
 800a4e0:	6060      	str	r0, [r4, #4]
 800a4e2:	6863      	ldr	r3, [r4, #4]
 800a4e4:	6123      	str	r3, [r4, #16]
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ec:	e7aa      	b.n	800a444 <_printf_i+0x14c>
 800a4ee:	6923      	ldr	r3, [r4, #16]
 800a4f0:	462a      	mov	r2, r5
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	47d0      	blx	sl
 800a4f8:	3001      	adds	r0, #1
 800a4fa:	d0ad      	beq.n	800a458 <_printf_i+0x160>
 800a4fc:	6823      	ldr	r3, [r4, #0]
 800a4fe:	079b      	lsls	r3, r3, #30
 800a500:	d413      	bmi.n	800a52a <_printf_i+0x232>
 800a502:	68e0      	ldr	r0, [r4, #12]
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	4298      	cmp	r0, r3
 800a508:	bfb8      	it	lt
 800a50a:	4618      	movlt	r0, r3
 800a50c:	e7a6      	b.n	800a45c <_printf_i+0x164>
 800a50e:	2301      	movs	r3, #1
 800a510:	4632      	mov	r2, r6
 800a512:	4649      	mov	r1, r9
 800a514:	4640      	mov	r0, r8
 800a516:	47d0      	blx	sl
 800a518:	3001      	adds	r0, #1
 800a51a:	d09d      	beq.n	800a458 <_printf_i+0x160>
 800a51c:	3501      	adds	r5, #1
 800a51e:	68e3      	ldr	r3, [r4, #12]
 800a520:	9903      	ldr	r1, [sp, #12]
 800a522:	1a5b      	subs	r3, r3, r1
 800a524:	42ab      	cmp	r3, r5
 800a526:	dcf2      	bgt.n	800a50e <_printf_i+0x216>
 800a528:	e7eb      	b.n	800a502 <_printf_i+0x20a>
 800a52a:	2500      	movs	r5, #0
 800a52c:	f104 0619 	add.w	r6, r4, #25
 800a530:	e7f5      	b.n	800a51e <_printf_i+0x226>
 800a532:	bf00      	nop
 800a534:	0800bf92 	.word	0x0800bf92
 800a538:	0800bfa3 	.word	0x0800bfa3

0800a53c <__swbuf_r>:
 800a53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a53e:	460e      	mov	r6, r1
 800a540:	4614      	mov	r4, r2
 800a542:	4605      	mov	r5, r0
 800a544:	b118      	cbz	r0, 800a54e <__swbuf_r+0x12>
 800a546:	6a03      	ldr	r3, [r0, #32]
 800a548:	b90b      	cbnz	r3, 800a54e <__swbuf_r+0x12>
 800a54a:	f7fe f9d5 	bl	80088f8 <__sinit>
 800a54e:	69a3      	ldr	r3, [r4, #24]
 800a550:	60a3      	str	r3, [r4, #8]
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	071a      	lsls	r2, r3, #28
 800a556:	d525      	bpl.n	800a5a4 <__swbuf_r+0x68>
 800a558:	6923      	ldr	r3, [r4, #16]
 800a55a:	b31b      	cbz	r3, 800a5a4 <__swbuf_r+0x68>
 800a55c:	6823      	ldr	r3, [r4, #0]
 800a55e:	6922      	ldr	r2, [r4, #16]
 800a560:	1a98      	subs	r0, r3, r2
 800a562:	6963      	ldr	r3, [r4, #20]
 800a564:	b2f6      	uxtb	r6, r6
 800a566:	4283      	cmp	r3, r0
 800a568:	4637      	mov	r7, r6
 800a56a:	dc04      	bgt.n	800a576 <__swbuf_r+0x3a>
 800a56c:	4621      	mov	r1, r4
 800a56e:	4628      	mov	r0, r5
 800a570:	f7ff fc84 	bl	8009e7c <_fflush_r>
 800a574:	b9e0      	cbnz	r0, 800a5b0 <__swbuf_r+0x74>
 800a576:	68a3      	ldr	r3, [r4, #8]
 800a578:	3b01      	subs	r3, #1
 800a57a:	60a3      	str	r3, [r4, #8]
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	1c5a      	adds	r2, r3, #1
 800a580:	6022      	str	r2, [r4, #0]
 800a582:	701e      	strb	r6, [r3, #0]
 800a584:	6962      	ldr	r2, [r4, #20]
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	429a      	cmp	r2, r3
 800a58a:	d004      	beq.n	800a596 <__swbuf_r+0x5a>
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	07db      	lsls	r3, r3, #31
 800a590:	d506      	bpl.n	800a5a0 <__swbuf_r+0x64>
 800a592:	2e0a      	cmp	r6, #10
 800a594:	d104      	bne.n	800a5a0 <__swbuf_r+0x64>
 800a596:	4621      	mov	r1, r4
 800a598:	4628      	mov	r0, r5
 800a59a:	f7ff fc6f 	bl	8009e7c <_fflush_r>
 800a59e:	b938      	cbnz	r0, 800a5b0 <__swbuf_r+0x74>
 800a5a0:	4638      	mov	r0, r7
 800a5a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5a4:	4621      	mov	r1, r4
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	f000 f806 	bl	800a5b8 <__swsetup_r>
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d0d5      	beq.n	800a55c <__swbuf_r+0x20>
 800a5b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a5b4:	e7f4      	b.n	800a5a0 <__swbuf_r+0x64>
	...

0800a5b8 <__swsetup_r>:
 800a5b8:	b538      	push	{r3, r4, r5, lr}
 800a5ba:	4b2a      	ldr	r3, [pc, #168]	; (800a664 <__swsetup_r+0xac>)
 800a5bc:	4605      	mov	r5, r0
 800a5be:	6818      	ldr	r0, [r3, #0]
 800a5c0:	460c      	mov	r4, r1
 800a5c2:	b118      	cbz	r0, 800a5cc <__swsetup_r+0x14>
 800a5c4:	6a03      	ldr	r3, [r0, #32]
 800a5c6:	b90b      	cbnz	r3, 800a5cc <__swsetup_r+0x14>
 800a5c8:	f7fe f996 	bl	80088f8 <__sinit>
 800a5cc:	89a3      	ldrh	r3, [r4, #12]
 800a5ce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d2:	0718      	lsls	r0, r3, #28
 800a5d4:	d422      	bmi.n	800a61c <__swsetup_r+0x64>
 800a5d6:	06d9      	lsls	r1, r3, #27
 800a5d8:	d407      	bmi.n	800a5ea <__swsetup_r+0x32>
 800a5da:	2309      	movs	r3, #9
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5e2:	81a3      	strh	r3, [r4, #12]
 800a5e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e8:	e034      	b.n	800a654 <__swsetup_r+0x9c>
 800a5ea:	0758      	lsls	r0, r3, #29
 800a5ec:	d512      	bpl.n	800a614 <__swsetup_r+0x5c>
 800a5ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5f0:	b141      	cbz	r1, 800a604 <__swsetup_r+0x4c>
 800a5f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5f6:	4299      	cmp	r1, r3
 800a5f8:	d002      	beq.n	800a600 <__swsetup_r+0x48>
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f7fe fa9c 	bl	8008b38 <_free_r>
 800a600:	2300      	movs	r3, #0
 800a602:	6363      	str	r3, [r4, #52]	; 0x34
 800a604:	89a3      	ldrh	r3, [r4, #12]
 800a606:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a60a:	81a3      	strh	r3, [r4, #12]
 800a60c:	2300      	movs	r3, #0
 800a60e:	6063      	str	r3, [r4, #4]
 800a610:	6923      	ldr	r3, [r4, #16]
 800a612:	6023      	str	r3, [r4, #0]
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	f043 0308 	orr.w	r3, r3, #8
 800a61a:	81a3      	strh	r3, [r4, #12]
 800a61c:	6923      	ldr	r3, [r4, #16]
 800a61e:	b94b      	cbnz	r3, 800a634 <__swsetup_r+0x7c>
 800a620:	89a3      	ldrh	r3, [r4, #12]
 800a622:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a626:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a62a:	d003      	beq.n	800a634 <__swsetup_r+0x7c>
 800a62c:	4621      	mov	r1, r4
 800a62e:	4628      	mov	r0, r5
 800a630:	f000 f884 	bl	800a73c <__smakebuf_r>
 800a634:	89a0      	ldrh	r0, [r4, #12]
 800a636:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a63a:	f010 0301 	ands.w	r3, r0, #1
 800a63e:	d00a      	beq.n	800a656 <__swsetup_r+0x9e>
 800a640:	2300      	movs	r3, #0
 800a642:	60a3      	str	r3, [r4, #8]
 800a644:	6963      	ldr	r3, [r4, #20]
 800a646:	425b      	negs	r3, r3
 800a648:	61a3      	str	r3, [r4, #24]
 800a64a:	6923      	ldr	r3, [r4, #16]
 800a64c:	b943      	cbnz	r3, 800a660 <__swsetup_r+0xa8>
 800a64e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a652:	d1c4      	bne.n	800a5de <__swsetup_r+0x26>
 800a654:	bd38      	pop	{r3, r4, r5, pc}
 800a656:	0781      	lsls	r1, r0, #30
 800a658:	bf58      	it	pl
 800a65a:	6963      	ldrpl	r3, [r4, #20]
 800a65c:	60a3      	str	r3, [r4, #8]
 800a65e:	e7f4      	b.n	800a64a <__swsetup_r+0x92>
 800a660:	2000      	movs	r0, #0
 800a662:	e7f7      	b.n	800a654 <__swsetup_r+0x9c>
 800a664:	20000238 	.word	0x20000238

0800a668 <_raise_r>:
 800a668:	291f      	cmp	r1, #31
 800a66a:	b538      	push	{r3, r4, r5, lr}
 800a66c:	4604      	mov	r4, r0
 800a66e:	460d      	mov	r5, r1
 800a670:	d904      	bls.n	800a67c <_raise_r+0x14>
 800a672:	2316      	movs	r3, #22
 800a674:	6003      	str	r3, [r0, #0]
 800a676:	f04f 30ff 	mov.w	r0, #4294967295
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a67e:	b112      	cbz	r2, 800a686 <_raise_r+0x1e>
 800a680:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a684:	b94b      	cbnz	r3, 800a69a <_raise_r+0x32>
 800a686:	4620      	mov	r0, r4
 800a688:	f000 f830 	bl	800a6ec <_getpid_r>
 800a68c:	462a      	mov	r2, r5
 800a68e:	4601      	mov	r1, r0
 800a690:	4620      	mov	r0, r4
 800a692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a696:	f000 b817 	b.w	800a6c8 <_kill_r>
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d00a      	beq.n	800a6b4 <_raise_r+0x4c>
 800a69e:	1c59      	adds	r1, r3, #1
 800a6a0:	d103      	bne.n	800a6aa <_raise_r+0x42>
 800a6a2:	2316      	movs	r3, #22
 800a6a4:	6003      	str	r3, [r0, #0]
 800a6a6:	2001      	movs	r0, #1
 800a6a8:	e7e7      	b.n	800a67a <_raise_r+0x12>
 800a6aa:	2400      	movs	r4, #0
 800a6ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6b0:	4628      	mov	r0, r5
 800a6b2:	4798      	blx	r3
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e7e0      	b.n	800a67a <_raise_r+0x12>

0800a6b8 <raise>:
 800a6b8:	4b02      	ldr	r3, [pc, #8]	; (800a6c4 <raise+0xc>)
 800a6ba:	4601      	mov	r1, r0
 800a6bc:	6818      	ldr	r0, [r3, #0]
 800a6be:	f7ff bfd3 	b.w	800a668 <_raise_r>
 800a6c2:	bf00      	nop
 800a6c4:	20000238 	.word	0x20000238

0800a6c8 <_kill_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d07      	ldr	r5, [pc, #28]	; (800a6e8 <_kill_r+0x20>)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	f7f9 fcd5 	bl	8004084 <_kill>
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d102      	bne.n	800a6e4 <_kill_r+0x1c>
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	b103      	cbz	r3, 800a6e4 <_kill_r+0x1c>
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	bd38      	pop	{r3, r4, r5, pc}
 800a6e6:	bf00      	nop
 800a6e8:	200007d4 	.word	0x200007d4

0800a6ec <_getpid_r>:
 800a6ec:	f7f9 bcc2 	b.w	8004074 <_getpid>

0800a6f0 <__swhatbuf_r>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	460c      	mov	r4, r1
 800a6f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6f8:	2900      	cmp	r1, #0
 800a6fa:	b096      	sub	sp, #88	; 0x58
 800a6fc:	4615      	mov	r5, r2
 800a6fe:	461e      	mov	r6, r3
 800a700:	da0d      	bge.n	800a71e <__swhatbuf_r+0x2e>
 800a702:	89a3      	ldrh	r3, [r4, #12]
 800a704:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a708:	f04f 0100 	mov.w	r1, #0
 800a70c:	bf0c      	ite	eq
 800a70e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a712:	2340      	movne	r3, #64	; 0x40
 800a714:	2000      	movs	r0, #0
 800a716:	6031      	str	r1, [r6, #0]
 800a718:	602b      	str	r3, [r5, #0]
 800a71a:	b016      	add	sp, #88	; 0x58
 800a71c:	bd70      	pop	{r4, r5, r6, pc}
 800a71e:	466a      	mov	r2, sp
 800a720:	f000 f848 	bl	800a7b4 <_fstat_r>
 800a724:	2800      	cmp	r0, #0
 800a726:	dbec      	blt.n	800a702 <__swhatbuf_r+0x12>
 800a728:	9901      	ldr	r1, [sp, #4]
 800a72a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a72e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a732:	4259      	negs	r1, r3
 800a734:	4159      	adcs	r1, r3
 800a736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a73a:	e7eb      	b.n	800a714 <__swhatbuf_r+0x24>

0800a73c <__smakebuf_r>:
 800a73c:	898b      	ldrh	r3, [r1, #12]
 800a73e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a740:	079d      	lsls	r5, r3, #30
 800a742:	4606      	mov	r6, r0
 800a744:	460c      	mov	r4, r1
 800a746:	d507      	bpl.n	800a758 <__smakebuf_r+0x1c>
 800a748:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a74c:	6023      	str	r3, [r4, #0]
 800a74e:	6123      	str	r3, [r4, #16]
 800a750:	2301      	movs	r3, #1
 800a752:	6163      	str	r3, [r4, #20]
 800a754:	b002      	add	sp, #8
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	ab01      	add	r3, sp, #4
 800a75a:	466a      	mov	r2, sp
 800a75c:	f7ff ffc8 	bl	800a6f0 <__swhatbuf_r>
 800a760:	9900      	ldr	r1, [sp, #0]
 800a762:	4605      	mov	r5, r0
 800a764:	4630      	mov	r0, r6
 800a766:	f7fe fdab 	bl	80092c0 <_malloc_r>
 800a76a:	b948      	cbnz	r0, 800a780 <__smakebuf_r+0x44>
 800a76c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a770:	059a      	lsls	r2, r3, #22
 800a772:	d4ef      	bmi.n	800a754 <__smakebuf_r+0x18>
 800a774:	f023 0303 	bic.w	r3, r3, #3
 800a778:	f043 0302 	orr.w	r3, r3, #2
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	e7e3      	b.n	800a748 <__smakebuf_r+0xc>
 800a780:	89a3      	ldrh	r3, [r4, #12]
 800a782:	6020      	str	r0, [r4, #0]
 800a784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a788:	81a3      	strh	r3, [r4, #12]
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	6163      	str	r3, [r4, #20]
 800a78e:	9b01      	ldr	r3, [sp, #4]
 800a790:	6120      	str	r0, [r4, #16]
 800a792:	b15b      	cbz	r3, 800a7ac <__smakebuf_r+0x70>
 800a794:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a798:	4630      	mov	r0, r6
 800a79a:	f000 f81d 	bl	800a7d8 <_isatty_r>
 800a79e:	b128      	cbz	r0, 800a7ac <__smakebuf_r+0x70>
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	f023 0303 	bic.w	r3, r3, #3
 800a7a6:	f043 0301 	orr.w	r3, r3, #1
 800a7aa:	81a3      	strh	r3, [r4, #12]
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	431d      	orrs	r5, r3
 800a7b0:	81a5      	strh	r5, [r4, #12]
 800a7b2:	e7cf      	b.n	800a754 <__smakebuf_r+0x18>

0800a7b4 <_fstat_r>:
 800a7b4:	b538      	push	{r3, r4, r5, lr}
 800a7b6:	4d07      	ldr	r5, [pc, #28]	; (800a7d4 <_fstat_r+0x20>)
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	4604      	mov	r4, r0
 800a7bc:	4608      	mov	r0, r1
 800a7be:	4611      	mov	r1, r2
 800a7c0:	602b      	str	r3, [r5, #0]
 800a7c2:	f7f9 fcbe 	bl	8004142 <_fstat>
 800a7c6:	1c43      	adds	r3, r0, #1
 800a7c8:	d102      	bne.n	800a7d0 <_fstat_r+0x1c>
 800a7ca:	682b      	ldr	r3, [r5, #0]
 800a7cc:	b103      	cbz	r3, 800a7d0 <_fstat_r+0x1c>
 800a7ce:	6023      	str	r3, [r4, #0]
 800a7d0:	bd38      	pop	{r3, r4, r5, pc}
 800a7d2:	bf00      	nop
 800a7d4:	200007d4 	.word	0x200007d4

0800a7d8 <_isatty_r>:
 800a7d8:	b538      	push	{r3, r4, r5, lr}
 800a7da:	4d06      	ldr	r5, [pc, #24]	; (800a7f4 <_isatty_r+0x1c>)
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4604      	mov	r4, r0
 800a7e0:	4608      	mov	r0, r1
 800a7e2:	602b      	str	r3, [r5, #0]
 800a7e4:	f7f9 fcbd 	bl	8004162 <_isatty>
 800a7e8:	1c43      	adds	r3, r0, #1
 800a7ea:	d102      	bne.n	800a7f2 <_isatty_r+0x1a>
 800a7ec:	682b      	ldr	r3, [r5, #0]
 800a7ee:	b103      	cbz	r3, 800a7f2 <_isatty_r+0x1a>
 800a7f0:	6023      	str	r3, [r4, #0]
 800a7f2:	bd38      	pop	{r3, r4, r5, pc}
 800a7f4:	200007d4 	.word	0x200007d4

0800a7f8 <atan2>:
 800a7f8:	f000 b956 	b.w	800aaa8 <__ieee754_atan2>

0800a7fc <pow>:
 800a7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7fe:	ed2d 8b02 	vpush	{d8}
 800a802:	eeb0 8a40 	vmov.f32	s16, s0
 800a806:	eef0 8a60 	vmov.f32	s17, s1
 800a80a:	ec55 4b11 	vmov	r4, r5, d1
 800a80e:	f000 fa13 	bl	800ac38 <__ieee754_pow>
 800a812:	4622      	mov	r2, r4
 800a814:	462b      	mov	r3, r5
 800a816:	4620      	mov	r0, r4
 800a818:	4629      	mov	r1, r5
 800a81a:	ec57 6b10 	vmov	r6, r7, d0
 800a81e:	f7f6 f99d 	bl	8000b5c <__aeabi_dcmpun>
 800a822:	2800      	cmp	r0, #0
 800a824:	d13b      	bne.n	800a89e <pow+0xa2>
 800a826:	ec51 0b18 	vmov	r0, r1, d8
 800a82a:	2200      	movs	r2, #0
 800a82c:	2300      	movs	r3, #0
 800a82e:	f7f6 f963 	bl	8000af8 <__aeabi_dcmpeq>
 800a832:	b1b8      	cbz	r0, 800a864 <pow+0x68>
 800a834:	2200      	movs	r2, #0
 800a836:	2300      	movs	r3, #0
 800a838:	4620      	mov	r0, r4
 800a83a:	4629      	mov	r1, r5
 800a83c:	f7f6 f95c 	bl	8000af8 <__aeabi_dcmpeq>
 800a840:	2800      	cmp	r0, #0
 800a842:	d146      	bne.n	800a8d2 <pow+0xd6>
 800a844:	ec45 4b10 	vmov	d0, r4, r5
 800a848:	f000 f848 	bl	800a8dc <finite>
 800a84c:	b338      	cbz	r0, 800a89e <pow+0xa2>
 800a84e:	2200      	movs	r2, #0
 800a850:	2300      	movs	r3, #0
 800a852:	4620      	mov	r0, r4
 800a854:	4629      	mov	r1, r5
 800a856:	f7f6 f959 	bl	8000b0c <__aeabi_dcmplt>
 800a85a:	b300      	cbz	r0, 800a89e <pow+0xa2>
 800a85c:	f7fe f926 	bl	8008aac <__errno>
 800a860:	2322      	movs	r3, #34	; 0x22
 800a862:	e01b      	b.n	800a89c <pow+0xa0>
 800a864:	ec47 6b10 	vmov	d0, r6, r7
 800a868:	f000 f838 	bl	800a8dc <finite>
 800a86c:	b9e0      	cbnz	r0, 800a8a8 <pow+0xac>
 800a86e:	eeb0 0a48 	vmov.f32	s0, s16
 800a872:	eef0 0a68 	vmov.f32	s1, s17
 800a876:	f000 f831 	bl	800a8dc <finite>
 800a87a:	b1a8      	cbz	r0, 800a8a8 <pow+0xac>
 800a87c:	ec45 4b10 	vmov	d0, r4, r5
 800a880:	f000 f82c 	bl	800a8dc <finite>
 800a884:	b180      	cbz	r0, 800a8a8 <pow+0xac>
 800a886:	4632      	mov	r2, r6
 800a888:	463b      	mov	r3, r7
 800a88a:	4630      	mov	r0, r6
 800a88c:	4639      	mov	r1, r7
 800a88e:	f7f6 f965 	bl	8000b5c <__aeabi_dcmpun>
 800a892:	2800      	cmp	r0, #0
 800a894:	d0e2      	beq.n	800a85c <pow+0x60>
 800a896:	f7fe f909 	bl	8008aac <__errno>
 800a89a:	2321      	movs	r3, #33	; 0x21
 800a89c:	6003      	str	r3, [r0, #0]
 800a89e:	ecbd 8b02 	vpop	{d8}
 800a8a2:	ec47 6b10 	vmov	d0, r6, r7
 800a8a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f7f6 f922 	bl	8000af8 <__aeabi_dcmpeq>
 800a8b4:	2800      	cmp	r0, #0
 800a8b6:	d0f2      	beq.n	800a89e <pow+0xa2>
 800a8b8:	eeb0 0a48 	vmov.f32	s0, s16
 800a8bc:	eef0 0a68 	vmov.f32	s1, s17
 800a8c0:	f000 f80c 	bl	800a8dc <finite>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	d0ea      	beq.n	800a89e <pow+0xa2>
 800a8c8:	ec45 4b10 	vmov	d0, r4, r5
 800a8cc:	f000 f806 	bl	800a8dc <finite>
 800a8d0:	e7c3      	b.n	800a85a <pow+0x5e>
 800a8d2:	4f01      	ldr	r7, [pc, #4]	; (800a8d8 <pow+0xdc>)
 800a8d4:	2600      	movs	r6, #0
 800a8d6:	e7e2      	b.n	800a89e <pow+0xa2>
 800a8d8:	3ff00000 	.word	0x3ff00000

0800a8dc <finite>:
 800a8dc:	b082      	sub	sp, #8
 800a8de:	ed8d 0b00 	vstr	d0, [sp]
 800a8e2:	9801      	ldr	r0, [sp, #4]
 800a8e4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a8e8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a8ec:	0fc0      	lsrs	r0, r0, #31
 800a8ee:	b002      	add	sp, #8
 800a8f0:	4770      	bx	lr
	...

0800a8f4 <__ieee754_sqrt>:
 800a8f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8f8:	ec55 4b10 	vmov	r4, r5, d0
 800a8fc:	4e67      	ldr	r6, [pc, #412]	; (800aa9c <__ieee754_sqrt+0x1a8>)
 800a8fe:	43ae      	bics	r6, r5
 800a900:	ee10 0a10 	vmov	r0, s0
 800a904:	ee10 2a10 	vmov	r2, s0
 800a908:	4629      	mov	r1, r5
 800a90a:	462b      	mov	r3, r5
 800a90c:	d10d      	bne.n	800a92a <__ieee754_sqrt+0x36>
 800a90e:	f7f5 fe8b 	bl	8000628 <__aeabi_dmul>
 800a912:	4602      	mov	r2, r0
 800a914:	460b      	mov	r3, r1
 800a916:	4620      	mov	r0, r4
 800a918:	4629      	mov	r1, r5
 800a91a:	f7f5 fccf 	bl	80002bc <__adddf3>
 800a91e:	4604      	mov	r4, r0
 800a920:	460d      	mov	r5, r1
 800a922:	ec45 4b10 	vmov	d0, r4, r5
 800a926:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a92a:	2d00      	cmp	r5, #0
 800a92c:	dc0b      	bgt.n	800a946 <__ieee754_sqrt+0x52>
 800a92e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a932:	4326      	orrs	r6, r4
 800a934:	d0f5      	beq.n	800a922 <__ieee754_sqrt+0x2e>
 800a936:	b135      	cbz	r5, 800a946 <__ieee754_sqrt+0x52>
 800a938:	f7f5 fcbe 	bl	80002b8 <__aeabi_dsub>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	f7f5 ff9c 	bl	800087c <__aeabi_ddiv>
 800a944:	e7eb      	b.n	800a91e <__ieee754_sqrt+0x2a>
 800a946:	1509      	asrs	r1, r1, #20
 800a948:	f000 808d 	beq.w	800aa66 <__ieee754_sqrt+0x172>
 800a94c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a950:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800a954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a958:	07c9      	lsls	r1, r1, #31
 800a95a:	bf5c      	itt	pl
 800a95c:	005b      	lslpl	r3, r3, #1
 800a95e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800a962:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a966:	bf58      	it	pl
 800a968:	0052      	lslpl	r2, r2, #1
 800a96a:	2500      	movs	r5, #0
 800a96c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a970:	1076      	asrs	r6, r6, #1
 800a972:	0052      	lsls	r2, r2, #1
 800a974:	f04f 0e16 	mov.w	lr, #22
 800a978:	46ac      	mov	ip, r5
 800a97a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a97e:	eb0c 0001 	add.w	r0, ip, r1
 800a982:	4298      	cmp	r0, r3
 800a984:	bfde      	ittt	le
 800a986:	1a1b      	suble	r3, r3, r0
 800a988:	eb00 0c01 	addle.w	ip, r0, r1
 800a98c:	186d      	addle	r5, r5, r1
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	f1be 0e01 	subs.w	lr, lr, #1
 800a994:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a998:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a99c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a9a0:	d1ed      	bne.n	800a97e <__ieee754_sqrt+0x8a>
 800a9a2:	4674      	mov	r4, lr
 800a9a4:	2720      	movs	r7, #32
 800a9a6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800a9aa:	4563      	cmp	r3, ip
 800a9ac:	eb01 000e 	add.w	r0, r1, lr
 800a9b0:	dc02      	bgt.n	800a9b8 <__ieee754_sqrt+0xc4>
 800a9b2:	d113      	bne.n	800a9dc <__ieee754_sqrt+0xe8>
 800a9b4:	4290      	cmp	r0, r2
 800a9b6:	d811      	bhi.n	800a9dc <__ieee754_sqrt+0xe8>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	eb00 0e01 	add.w	lr, r0, r1
 800a9be:	da57      	bge.n	800aa70 <__ieee754_sqrt+0x17c>
 800a9c0:	f1be 0f00 	cmp.w	lr, #0
 800a9c4:	db54      	blt.n	800aa70 <__ieee754_sqrt+0x17c>
 800a9c6:	f10c 0801 	add.w	r8, ip, #1
 800a9ca:	eba3 030c 	sub.w	r3, r3, ip
 800a9ce:	4290      	cmp	r0, r2
 800a9d0:	bf88      	it	hi
 800a9d2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a9d6:	1a12      	subs	r2, r2, r0
 800a9d8:	440c      	add	r4, r1
 800a9da:	46c4      	mov	ip, r8
 800a9dc:	005b      	lsls	r3, r3, #1
 800a9de:	3f01      	subs	r7, #1
 800a9e0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800a9e4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a9e8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a9ec:	d1dd      	bne.n	800a9aa <__ieee754_sqrt+0xb6>
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	d01b      	beq.n	800aa2a <__ieee754_sqrt+0x136>
 800a9f2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800aaa0 <__ieee754_sqrt+0x1ac>
 800a9f6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800aaa4 <__ieee754_sqrt+0x1b0>
 800a9fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800a9fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa02:	f7f5 fc59 	bl	80002b8 <__aeabi_dsub>
 800aa06:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4640      	mov	r0, r8
 800aa10:	4649      	mov	r1, r9
 800aa12:	f7f6 f885 	bl	8000b20 <__aeabi_dcmple>
 800aa16:	b140      	cbz	r0, 800aa2a <__ieee754_sqrt+0x136>
 800aa18:	f1b4 3fff 	cmp.w	r4, #4294967295
 800aa1c:	e9da 0100 	ldrd	r0, r1, [sl]
 800aa20:	e9db 2300 	ldrd	r2, r3, [fp]
 800aa24:	d126      	bne.n	800aa74 <__ieee754_sqrt+0x180>
 800aa26:	3501      	adds	r5, #1
 800aa28:	463c      	mov	r4, r7
 800aa2a:	106a      	asrs	r2, r5, #1
 800aa2c:	0863      	lsrs	r3, r4, #1
 800aa2e:	07e9      	lsls	r1, r5, #31
 800aa30:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800aa34:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800aa38:	bf48      	it	mi
 800aa3a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800aa3e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800aa42:	461c      	mov	r4, r3
 800aa44:	e76d      	b.n	800a922 <__ieee754_sqrt+0x2e>
 800aa46:	0ad3      	lsrs	r3, r2, #11
 800aa48:	3815      	subs	r0, #21
 800aa4a:	0552      	lsls	r2, r2, #21
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d0fa      	beq.n	800aa46 <__ieee754_sqrt+0x152>
 800aa50:	02dc      	lsls	r4, r3, #11
 800aa52:	d50a      	bpl.n	800aa6a <__ieee754_sqrt+0x176>
 800aa54:	f1c1 0420 	rsb	r4, r1, #32
 800aa58:	fa22 f404 	lsr.w	r4, r2, r4
 800aa5c:	1e4d      	subs	r5, r1, #1
 800aa5e:	408a      	lsls	r2, r1
 800aa60:	4323      	orrs	r3, r4
 800aa62:	1b41      	subs	r1, r0, r5
 800aa64:	e772      	b.n	800a94c <__ieee754_sqrt+0x58>
 800aa66:	4608      	mov	r0, r1
 800aa68:	e7f0      	b.n	800aa4c <__ieee754_sqrt+0x158>
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	3101      	adds	r1, #1
 800aa6e:	e7ef      	b.n	800aa50 <__ieee754_sqrt+0x15c>
 800aa70:	46e0      	mov	r8, ip
 800aa72:	e7aa      	b.n	800a9ca <__ieee754_sqrt+0xd6>
 800aa74:	f7f5 fc22 	bl	80002bc <__adddf3>
 800aa78:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4640      	mov	r0, r8
 800aa82:	4649      	mov	r1, r9
 800aa84:	f7f6 f842 	bl	8000b0c <__aeabi_dcmplt>
 800aa88:	b120      	cbz	r0, 800aa94 <__ieee754_sqrt+0x1a0>
 800aa8a:	1ca0      	adds	r0, r4, #2
 800aa8c:	bf08      	it	eq
 800aa8e:	3501      	addeq	r5, #1
 800aa90:	3402      	adds	r4, #2
 800aa92:	e7ca      	b.n	800aa2a <__ieee754_sqrt+0x136>
 800aa94:	3401      	adds	r4, #1
 800aa96:	f024 0401 	bic.w	r4, r4, #1
 800aa9a:	e7c6      	b.n	800aa2a <__ieee754_sqrt+0x136>
 800aa9c:	7ff00000 	.word	0x7ff00000
 800aaa0:	20000240 	.word	0x20000240
 800aaa4:	20000248 	.word	0x20000248

0800aaa8 <__ieee754_atan2>:
 800aaa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaac:	ec57 6b11 	vmov	r6, r7, d1
 800aab0:	4273      	negs	r3, r6
 800aab2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 800ac30 <__ieee754_atan2+0x188>
 800aab6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800aaba:	4333      	orrs	r3, r6
 800aabc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800aac0:	4543      	cmp	r3, r8
 800aac2:	ec51 0b10 	vmov	r0, r1, d0
 800aac6:	ee11 5a10 	vmov	r5, s2
 800aaca:	d80a      	bhi.n	800aae2 <__ieee754_atan2+0x3a>
 800aacc:	4244      	negs	r4, r0
 800aace:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aad2:	4304      	orrs	r4, r0
 800aad4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800aad8:	4544      	cmp	r4, r8
 800aada:	ee10 9a10 	vmov	r9, s0
 800aade:	468e      	mov	lr, r1
 800aae0:	d907      	bls.n	800aaf2 <__ieee754_atan2+0x4a>
 800aae2:	4632      	mov	r2, r6
 800aae4:	463b      	mov	r3, r7
 800aae6:	f7f5 fbe9 	bl	80002bc <__adddf3>
 800aaea:	ec41 0b10 	vmov	d0, r0, r1
 800aaee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800aaf6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aafa:	4334      	orrs	r4, r6
 800aafc:	d103      	bne.n	800ab06 <__ieee754_atan2+0x5e>
 800aafe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab02:	f000 bdc5 	b.w	800b690 <atan>
 800ab06:	17bc      	asrs	r4, r7, #30
 800ab08:	f004 0402 	and.w	r4, r4, #2
 800ab0c:	ea53 0909 	orrs.w	r9, r3, r9
 800ab10:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800ab14:	d107      	bne.n	800ab26 <__ieee754_atan2+0x7e>
 800ab16:	2c02      	cmp	r4, #2
 800ab18:	d05f      	beq.n	800abda <__ieee754_atan2+0x132>
 800ab1a:	2c03      	cmp	r4, #3
 800ab1c:	d1e5      	bne.n	800aaea <__ieee754_atan2+0x42>
 800ab1e:	a140      	add	r1, pc, #256	; (adr r1, 800ac20 <__ieee754_atan2+0x178>)
 800ab20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab24:	e7e1      	b.n	800aaea <__ieee754_atan2+0x42>
 800ab26:	4315      	orrs	r5, r2
 800ab28:	d106      	bne.n	800ab38 <__ieee754_atan2+0x90>
 800ab2a:	f1be 0f00 	cmp.w	lr, #0
 800ab2e:	da5f      	bge.n	800abf0 <__ieee754_atan2+0x148>
 800ab30:	a13d      	add	r1, pc, #244	; (adr r1, 800ac28 <__ieee754_atan2+0x180>)
 800ab32:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab36:	e7d8      	b.n	800aaea <__ieee754_atan2+0x42>
 800ab38:	4542      	cmp	r2, r8
 800ab3a:	d10f      	bne.n	800ab5c <__ieee754_atan2+0xb4>
 800ab3c:	4293      	cmp	r3, r2
 800ab3e:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab42:	d107      	bne.n	800ab54 <__ieee754_atan2+0xac>
 800ab44:	2c02      	cmp	r4, #2
 800ab46:	d84c      	bhi.n	800abe2 <__ieee754_atan2+0x13a>
 800ab48:	4b33      	ldr	r3, [pc, #204]	; (800ac18 <__ieee754_atan2+0x170>)
 800ab4a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ab4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ab52:	e7ca      	b.n	800aaea <__ieee754_atan2+0x42>
 800ab54:	2c02      	cmp	r4, #2
 800ab56:	d848      	bhi.n	800abea <__ieee754_atan2+0x142>
 800ab58:	4b30      	ldr	r3, [pc, #192]	; (800ac1c <__ieee754_atan2+0x174>)
 800ab5a:	e7f6      	b.n	800ab4a <__ieee754_atan2+0xa2>
 800ab5c:	4543      	cmp	r3, r8
 800ab5e:	d0e4      	beq.n	800ab2a <__ieee754_atan2+0x82>
 800ab60:	1a9b      	subs	r3, r3, r2
 800ab62:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800ab66:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ab6a:	da1e      	bge.n	800abaa <__ieee754_atan2+0x102>
 800ab6c:	2f00      	cmp	r7, #0
 800ab6e:	da01      	bge.n	800ab74 <__ieee754_atan2+0xcc>
 800ab70:	323c      	adds	r2, #60	; 0x3c
 800ab72:	db1e      	blt.n	800abb2 <__ieee754_atan2+0x10a>
 800ab74:	4632      	mov	r2, r6
 800ab76:	463b      	mov	r3, r7
 800ab78:	f7f5 fe80 	bl	800087c <__aeabi_ddiv>
 800ab7c:	ec41 0b10 	vmov	d0, r0, r1
 800ab80:	f000 ff26 	bl	800b9d0 <fabs>
 800ab84:	f000 fd84 	bl	800b690 <atan>
 800ab88:	ec51 0b10 	vmov	r0, r1, d0
 800ab8c:	2c01      	cmp	r4, #1
 800ab8e:	d013      	beq.n	800abb8 <__ieee754_atan2+0x110>
 800ab90:	2c02      	cmp	r4, #2
 800ab92:	d015      	beq.n	800abc0 <__ieee754_atan2+0x118>
 800ab94:	2c00      	cmp	r4, #0
 800ab96:	d0a8      	beq.n	800aaea <__ieee754_atan2+0x42>
 800ab98:	a317      	add	r3, pc, #92	; (adr r3, 800abf8 <__ieee754_atan2+0x150>)
 800ab9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9e:	f7f5 fb8b 	bl	80002b8 <__aeabi_dsub>
 800aba2:	a317      	add	r3, pc, #92	; (adr r3, 800ac00 <__ieee754_atan2+0x158>)
 800aba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba8:	e014      	b.n	800abd4 <__ieee754_atan2+0x12c>
 800abaa:	a117      	add	r1, pc, #92	; (adr r1, 800ac08 <__ieee754_atan2+0x160>)
 800abac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abb0:	e7ec      	b.n	800ab8c <__ieee754_atan2+0xe4>
 800abb2:	2000      	movs	r0, #0
 800abb4:	2100      	movs	r1, #0
 800abb6:	e7e9      	b.n	800ab8c <__ieee754_atan2+0xe4>
 800abb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abbc:	4619      	mov	r1, r3
 800abbe:	e794      	b.n	800aaea <__ieee754_atan2+0x42>
 800abc0:	a30d      	add	r3, pc, #52	; (adr r3, 800abf8 <__ieee754_atan2+0x150>)
 800abc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abc6:	f7f5 fb77 	bl	80002b8 <__aeabi_dsub>
 800abca:	4602      	mov	r2, r0
 800abcc:	460b      	mov	r3, r1
 800abce:	a10c      	add	r1, pc, #48	; (adr r1, 800ac00 <__ieee754_atan2+0x158>)
 800abd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abd4:	f7f5 fb70 	bl	80002b8 <__aeabi_dsub>
 800abd8:	e787      	b.n	800aaea <__ieee754_atan2+0x42>
 800abda:	a109      	add	r1, pc, #36	; (adr r1, 800ac00 <__ieee754_atan2+0x158>)
 800abdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe0:	e783      	b.n	800aaea <__ieee754_atan2+0x42>
 800abe2:	a10b      	add	r1, pc, #44	; (adr r1, 800ac10 <__ieee754_atan2+0x168>)
 800abe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe8:	e77f      	b.n	800aaea <__ieee754_atan2+0x42>
 800abea:	2000      	movs	r0, #0
 800abec:	2100      	movs	r1, #0
 800abee:	e77c      	b.n	800aaea <__ieee754_atan2+0x42>
 800abf0:	a105      	add	r1, pc, #20	; (adr r1, 800ac08 <__ieee754_atan2+0x160>)
 800abf2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abf6:	e778      	b.n	800aaea <__ieee754_atan2+0x42>
 800abf8:	33145c07 	.word	0x33145c07
 800abfc:	3ca1a626 	.word	0x3ca1a626
 800ac00:	54442d18 	.word	0x54442d18
 800ac04:	400921fb 	.word	0x400921fb
 800ac08:	54442d18 	.word	0x54442d18
 800ac0c:	3ff921fb 	.word	0x3ff921fb
 800ac10:	54442d18 	.word	0x54442d18
 800ac14:	3fe921fb 	.word	0x3fe921fb
 800ac18:	0800bfb8 	.word	0x0800bfb8
 800ac1c:	0800bfd0 	.word	0x0800bfd0
 800ac20:	54442d18 	.word	0x54442d18
 800ac24:	c00921fb 	.word	0xc00921fb
 800ac28:	54442d18 	.word	0x54442d18
 800ac2c:	bff921fb 	.word	0xbff921fb
 800ac30:	7ff00000 	.word	0x7ff00000
 800ac34:	00000000 	.word	0x00000000

0800ac38 <__ieee754_pow>:
 800ac38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	ed2d 8b06 	vpush	{d8-d10}
 800ac40:	b089      	sub	sp, #36	; 0x24
 800ac42:	ed8d 1b00 	vstr	d1, [sp]
 800ac46:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ac4a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ac4e:	ea58 0102 	orrs.w	r1, r8, r2
 800ac52:	ec57 6b10 	vmov	r6, r7, d0
 800ac56:	d115      	bne.n	800ac84 <__ieee754_pow+0x4c>
 800ac58:	19b3      	adds	r3, r6, r6
 800ac5a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ac5e:	4152      	adcs	r2, r2
 800ac60:	4299      	cmp	r1, r3
 800ac62:	4b89      	ldr	r3, [pc, #548]	; (800ae88 <__ieee754_pow+0x250>)
 800ac64:	4193      	sbcs	r3, r2
 800ac66:	f080 84d1 	bcs.w	800b60c <__ieee754_pow+0x9d4>
 800ac6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac6e:	4630      	mov	r0, r6
 800ac70:	4639      	mov	r1, r7
 800ac72:	f7f5 fb23 	bl	80002bc <__adddf3>
 800ac76:	ec41 0b10 	vmov	d0, r0, r1
 800ac7a:	b009      	add	sp, #36	; 0x24
 800ac7c:	ecbd 8b06 	vpop	{d8-d10}
 800ac80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac84:	4b81      	ldr	r3, [pc, #516]	; (800ae8c <__ieee754_pow+0x254>)
 800ac86:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ac8a:	429c      	cmp	r4, r3
 800ac8c:	ee10 aa10 	vmov	sl, s0
 800ac90:	463d      	mov	r5, r7
 800ac92:	dc06      	bgt.n	800aca2 <__ieee754_pow+0x6a>
 800ac94:	d101      	bne.n	800ac9a <__ieee754_pow+0x62>
 800ac96:	2e00      	cmp	r6, #0
 800ac98:	d1e7      	bne.n	800ac6a <__ieee754_pow+0x32>
 800ac9a:	4598      	cmp	r8, r3
 800ac9c:	dc01      	bgt.n	800aca2 <__ieee754_pow+0x6a>
 800ac9e:	d10f      	bne.n	800acc0 <__ieee754_pow+0x88>
 800aca0:	b172      	cbz	r2, 800acc0 <__ieee754_pow+0x88>
 800aca2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800aca6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800acaa:	ea55 050a 	orrs.w	r5, r5, sl
 800acae:	d1dc      	bne.n	800ac6a <__ieee754_pow+0x32>
 800acb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800acb4:	18db      	adds	r3, r3, r3
 800acb6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800acba:	4152      	adcs	r2, r2
 800acbc:	429d      	cmp	r5, r3
 800acbe:	e7d0      	b.n	800ac62 <__ieee754_pow+0x2a>
 800acc0:	2d00      	cmp	r5, #0
 800acc2:	da3b      	bge.n	800ad3c <__ieee754_pow+0x104>
 800acc4:	4b72      	ldr	r3, [pc, #456]	; (800ae90 <__ieee754_pow+0x258>)
 800acc6:	4598      	cmp	r8, r3
 800acc8:	dc51      	bgt.n	800ad6e <__ieee754_pow+0x136>
 800acca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800acce:	4598      	cmp	r8, r3
 800acd0:	f340 84ab 	ble.w	800b62a <__ieee754_pow+0x9f2>
 800acd4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800acd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800acdc:	2b14      	cmp	r3, #20
 800acde:	dd0f      	ble.n	800ad00 <__ieee754_pow+0xc8>
 800ace0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ace4:	fa22 f103 	lsr.w	r1, r2, r3
 800ace8:	fa01 f303 	lsl.w	r3, r1, r3
 800acec:	4293      	cmp	r3, r2
 800acee:	f040 849c 	bne.w	800b62a <__ieee754_pow+0x9f2>
 800acf2:	f001 0101 	and.w	r1, r1, #1
 800acf6:	f1c1 0302 	rsb	r3, r1, #2
 800acfa:	9304      	str	r3, [sp, #16]
 800acfc:	b182      	cbz	r2, 800ad20 <__ieee754_pow+0xe8>
 800acfe:	e05f      	b.n	800adc0 <__ieee754_pow+0x188>
 800ad00:	2a00      	cmp	r2, #0
 800ad02:	d15b      	bne.n	800adbc <__ieee754_pow+0x184>
 800ad04:	f1c3 0314 	rsb	r3, r3, #20
 800ad08:	fa48 f103 	asr.w	r1, r8, r3
 800ad0c:	fa01 f303 	lsl.w	r3, r1, r3
 800ad10:	4543      	cmp	r3, r8
 800ad12:	f040 8487 	bne.w	800b624 <__ieee754_pow+0x9ec>
 800ad16:	f001 0101 	and.w	r1, r1, #1
 800ad1a:	f1c1 0302 	rsb	r3, r1, #2
 800ad1e:	9304      	str	r3, [sp, #16]
 800ad20:	4b5c      	ldr	r3, [pc, #368]	; (800ae94 <__ieee754_pow+0x25c>)
 800ad22:	4598      	cmp	r8, r3
 800ad24:	d132      	bne.n	800ad8c <__ieee754_pow+0x154>
 800ad26:	f1b9 0f00 	cmp.w	r9, #0
 800ad2a:	f280 8477 	bge.w	800b61c <__ieee754_pow+0x9e4>
 800ad2e:	4959      	ldr	r1, [pc, #356]	; (800ae94 <__ieee754_pow+0x25c>)
 800ad30:	4632      	mov	r2, r6
 800ad32:	463b      	mov	r3, r7
 800ad34:	2000      	movs	r0, #0
 800ad36:	f7f5 fda1 	bl	800087c <__aeabi_ddiv>
 800ad3a:	e79c      	b.n	800ac76 <__ieee754_pow+0x3e>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	9304      	str	r3, [sp, #16]
 800ad40:	2a00      	cmp	r2, #0
 800ad42:	d13d      	bne.n	800adc0 <__ieee754_pow+0x188>
 800ad44:	4b51      	ldr	r3, [pc, #324]	; (800ae8c <__ieee754_pow+0x254>)
 800ad46:	4598      	cmp	r8, r3
 800ad48:	d1ea      	bne.n	800ad20 <__ieee754_pow+0xe8>
 800ad4a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ad4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ad52:	ea53 030a 	orrs.w	r3, r3, sl
 800ad56:	f000 8459 	beq.w	800b60c <__ieee754_pow+0x9d4>
 800ad5a:	4b4f      	ldr	r3, [pc, #316]	; (800ae98 <__ieee754_pow+0x260>)
 800ad5c:	429c      	cmp	r4, r3
 800ad5e:	dd08      	ble.n	800ad72 <__ieee754_pow+0x13a>
 800ad60:	f1b9 0f00 	cmp.w	r9, #0
 800ad64:	f2c0 8456 	blt.w	800b614 <__ieee754_pow+0x9dc>
 800ad68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ad6c:	e783      	b.n	800ac76 <__ieee754_pow+0x3e>
 800ad6e:	2302      	movs	r3, #2
 800ad70:	e7e5      	b.n	800ad3e <__ieee754_pow+0x106>
 800ad72:	f1b9 0f00 	cmp.w	r9, #0
 800ad76:	f04f 0000 	mov.w	r0, #0
 800ad7a:	f04f 0100 	mov.w	r1, #0
 800ad7e:	f6bf af7a 	bge.w	800ac76 <__ieee754_pow+0x3e>
 800ad82:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ad86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ad8a:	e774      	b.n	800ac76 <__ieee754_pow+0x3e>
 800ad8c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ad90:	d106      	bne.n	800ada0 <__ieee754_pow+0x168>
 800ad92:	4632      	mov	r2, r6
 800ad94:	463b      	mov	r3, r7
 800ad96:	4630      	mov	r0, r6
 800ad98:	4639      	mov	r1, r7
 800ad9a:	f7f5 fc45 	bl	8000628 <__aeabi_dmul>
 800ad9e:	e76a      	b.n	800ac76 <__ieee754_pow+0x3e>
 800ada0:	4b3e      	ldr	r3, [pc, #248]	; (800ae9c <__ieee754_pow+0x264>)
 800ada2:	4599      	cmp	r9, r3
 800ada4:	d10c      	bne.n	800adc0 <__ieee754_pow+0x188>
 800ada6:	2d00      	cmp	r5, #0
 800ada8:	db0a      	blt.n	800adc0 <__ieee754_pow+0x188>
 800adaa:	ec47 6b10 	vmov	d0, r6, r7
 800adae:	b009      	add	sp, #36	; 0x24
 800adb0:	ecbd 8b06 	vpop	{d8-d10}
 800adb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb8:	f7ff bd9c 	b.w	800a8f4 <__ieee754_sqrt>
 800adbc:	2300      	movs	r3, #0
 800adbe:	9304      	str	r3, [sp, #16]
 800adc0:	ec47 6b10 	vmov	d0, r6, r7
 800adc4:	f000 fe04 	bl	800b9d0 <fabs>
 800adc8:	ec51 0b10 	vmov	r0, r1, d0
 800adcc:	f1ba 0f00 	cmp.w	sl, #0
 800add0:	d129      	bne.n	800ae26 <__ieee754_pow+0x1ee>
 800add2:	b124      	cbz	r4, 800adde <__ieee754_pow+0x1a6>
 800add4:	4b2f      	ldr	r3, [pc, #188]	; (800ae94 <__ieee754_pow+0x25c>)
 800add6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800adda:	429a      	cmp	r2, r3
 800addc:	d123      	bne.n	800ae26 <__ieee754_pow+0x1ee>
 800adde:	f1b9 0f00 	cmp.w	r9, #0
 800ade2:	da05      	bge.n	800adf0 <__ieee754_pow+0x1b8>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	2000      	movs	r0, #0
 800adea:	492a      	ldr	r1, [pc, #168]	; (800ae94 <__ieee754_pow+0x25c>)
 800adec:	f7f5 fd46 	bl	800087c <__aeabi_ddiv>
 800adf0:	2d00      	cmp	r5, #0
 800adf2:	f6bf af40 	bge.w	800ac76 <__ieee754_pow+0x3e>
 800adf6:	9b04      	ldr	r3, [sp, #16]
 800adf8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800adfc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ae00:	431c      	orrs	r4, r3
 800ae02:	d108      	bne.n	800ae16 <__ieee754_pow+0x1de>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4610      	mov	r0, r2
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	f7f5 fa54 	bl	80002b8 <__aeabi_dsub>
 800ae10:	4602      	mov	r2, r0
 800ae12:	460b      	mov	r3, r1
 800ae14:	e78f      	b.n	800ad36 <__ieee754_pow+0xfe>
 800ae16:	9b04      	ldr	r3, [sp, #16]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	f47f af2c 	bne.w	800ac76 <__ieee754_pow+0x3e>
 800ae1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae22:	4619      	mov	r1, r3
 800ae24:	e727      	b.n	800ac76 <__ieee754_pow+0x3e>
 800ae26:	0feb      	lsrs	r3, r5, #31
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	9306      	str	r3, [sp, #24]
 800ae2c:	9a06      	ldr	r2, [sp, #24]
 800ae2e:	9b04      	ldr	r3, [sp, #16]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	d102      	bne.n	800ae3a <__ieee754_pow+0x202>
 800ae34:	4632      	mov	r2, r6
 800ae36:	463b      	mov	r3, r7
 800ae38:	e7e6      	b.n	800ae08 <__ieee754_pow+0x1d0>
 800ae3a:	4b19      	ldr	r3, [pc, #100]	; (800aea0 <__ieee754_pow+0x268>)
 800ae3c:	4598      	cmp	r8, r3
 800ae3e:	f340 80fb 	ble.w	800b038 <__ieee754_pow+0x400>
 800ae42:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ae46:	4598      	cmp	r8, r3
 800ae48:	4b13      	ldr	r3, [pc, #76]	; (800ae98 <__ieee754_pow+0x260>)
 800ae4a:	dd0c      	ble.n	800ae66 <__ieee754_pow+0x22e>
 800ae4c:	429c      	cmp	r4, r3
 800ae4e:	dc0f      	bgt.n	800ae70 <__ieee754_pow+0x238>
 800ae50:	f1b9 0f00 	cmp.w	r9, #0
 800ae54:	da0f      	bge.n	800ae76 <__ieee754_pow+0x23e>
 800ae56:	2000      	movs	r0, #0
 800ae58:	b009      	add	sp, #36	; 0x24
 800ae5a:	ecbd 8b06 	vpop	{d8-d10}
 800ae5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae62:	f000 be66 	b.w	800bb32 <__math_oflow>
 800ae66:	429c      	cmp	r4, r3
 800ae68:	dbf2      	blt.n	800ae50 <__ieee754_pow+0x218>
 800ae6a:	4b0a      	ldr	r3, [pc, #40]	; (800ae94 <__ieee754_pow+0x25c>)
 800ae6c:	429c      	cmp	r4, r3
 800ae6e:	dd19      	ble.n	800aea4 <__ieee754_pow+0x26c>
 800ae70:	f1b9 0f00 	cmp.w	r9, #0
 800ae74:	dcef      	bgt.n	800ae56 <__ieee754_pow+0x21e>
 800ae76:	2000      	movs	r0, #0
 800ae78:	b009      	add	sp, #36	; 0x24
 800ae7a:	ecbd 8b06 	vpop	{d8-d10}
 800ae7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae82:	f000 be4d 	b.w	800bb20 <__math_uflow>
 800ae86:	bf00      	nop
 800ae88:	fff00000 	.word	0xfff00000
 800ae8c:	7ff00000 	.word	0x7ff00000
 800ae90:	433fffff 	.word	0x433fffff
 800ae94:	3ff00000 	.word	0x3ff00000
 800ae98:	3fefffff 	.word	0x3fefffff
 800ae9c:	3fe00000 	.word	0x3fe00000
 800aea0:	41e00000 	.word	0x41e00000
 800aea4:	4b60      	ldr	r3, [pc, #384]	; (800b028 <__ieee754_pow+0x3f0>)
 800aea6:	2200      	movs	r2, #0
 800aea8:	f7f5 fa06 	bl	80002b8 <__aeabi_dsub>
 800aeac:	a354      	add	r3, pc, #336	; (adr r3, 800b000 <__ieee754_pow+0x3c8>)
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	460d      	mov	r5, r1
 800aeb6:	f7f5 fbb7 	bl	8000628 <__aeabi_dmul>
 800aeba:	a353      	add	r3, pc, #332	; (adr r3, 800b008 <__ieee754_pow+0x3d0>)
 800aebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec0:	4606      	mov	r6, r0
 800aec2:	460f      	mov	r7, r1
 800aec4:	4620      	mov	r0, r4
 800aec6:	4629      	mov	r1, r5
 800aec8:	f7f5 fbae 	bl	8000628 <__aeabi_dmul>
 800aecc:	4b57      	ldr	r3, [pc, #348]	; (800b02c <__ieee754_pow+0x3f4>)
 800aece:	4682      	mov	sl, r0
 800aed0:	468b      	mov	fp, r1
 800aed2:	2200      	movs	r2, #0
 800aed4:	4620      	mov	r0, r4
 800aed6:	4629      	mov	r1, r5
 800aed8:	f7f5 fba6 	bl	8000628 <__aeabi_dmul>
 800aedc:	4602      	mov	r2, r0
 800aede:	460b      	mov	r3, r1
 800aee0:	a14b      	add	r1, pc, #300	; (adr r1, 800b010 <__ieee754_pow+0x3d8>)
 800aee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aee6:	f7f5 f9e7 	bl	80002b8 <__aeabi_dsub>
 800aeea:	4622      	mov	r2, r4
 800aeec:	462b      	mov	r3, r5
 800aeee:	f7f5 fb9b 	bl	8000628 <__aeabi_dmul>
 800aef2:	4602      	mov	r2, r0
 800aef4:	460b      	mov	r3, r1
 800aef6:	2000      	movs	r0, #0
 800aef8:	494d      	ldr	r1, [pc, #308]	; (800b030 <__ieee754_pow+0x3f8>)
 800aefa:	f7f5 f9dd 	bl	80002b8 <__aeabi_dsub>
 800aefe:	4622      	mov	r2, r4
 800af00:	4680      	mov	r8, r0
 800af02:	4689      	mov	r9, r1
 800af04:	462b      	mov	r3, r5
 800af06:	4620      	mov	r0, r4
 800af08:	4629      	mov	r1, r5
 800af0a:	f7f5 fb8d 	bl	8000628 <__aeabi_dmul>
 800af0e:	4602      	mov	r2, r0
 800af10:	460b      	mov	r3, r1
 800af12:	4640      	mov	r0, r8
 800af14:	4649      	mov	r1, r9
 800af16:	f7f5 fb87 	bl	8000628 <__aeabi_dmul>
 800af1a:	a33f      	add	r3, pc, #252	; (adr r3, 800b018 <__ieee754_pow+0x3e0>)
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	f7f5 fb82 	bl	8000628 <__aeabi_dmul>
 800af24:	4602      	mov	r2, r0
 800af26:	460b      	mov	r3, r1
 800af28:	4650      	mov	r0, sl
 800af2a:	4659      	mov	r1, fp
 800af2c:	f7f5 f9c4 	bl	80002b8 <__aeabi_dsub>
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4680      	mov	r8, r0
 800af36:	4689      	mov	r9, r1
 800af38:	4630      	mov	r0, r6
 800af3a:	4639      	mov	r1, r7
 800af3c:	f7f5 f9be 	bl	80002bc <__adddf3>
 800af40:	2000      	movs	r0, #0
 800af42:	4632      	mov	r2, r6
 800af44:	463b      	mov	r3, r7
 800af46:	4604      	mov	r4, r0
 800af48:	460d      	mov	r5, r1
 800af4a:	f7f5 f9b5 	bl	80002b8 <__aeabi_dsub>
 800af4e:	4602      	mov	r2, r0
 800af50:	460b      	mov	r3, r1
 800af52:	4640      	mov	r0, r8
 800af54:	4649      	mov	r1, r9
 800af56:	f7f5 f9af 	bl	80002b8 <__aeabi_dsub>
 800af5a:	9b04      	ldr	r3, [sp, #16]
 800af5c:	9a06      	ldr	r2, [sp, #24]
 800af5e:	3b01      	subs	r3, #1
 800af60:	4313      	orrs	r3, r2
 800af62:	4682      	mov	sl, r0
 800af64:	468b      	mov	fp, r1
 800af66:	f040 81e7 	bne.w	800b338 <__ieee754_pow+0x700>
 800af6a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b020 <__ieee754_pow+0x3e8>
 800af6e:	eeb0 8a47 	vmov.f32	s16, s14
 800af72:	eef0 8a67 	vmov.f32	s17, s15
 800af76:	e9dd 6700 	ldrd	r6, r7, [sp]
 800af7a:	2600      	movs	r6, #0
 800af7c:	4632      	mov	r2, r6
 800af7e:	463b      	mov	r3, r7
 800af80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af84:	f7f5 f998 	bl	80002b8 <__aeabi_dsub>
 800af88:	4622      	mov	r2, r4
 800af8a:	462b      	mov	r3, r5
 800af8c:	f7f5 fb4c 	bl	8000628 <__aeabi_dmul>
 800af90:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af94:	4680      	mov	r8, r0
 800af96:	4689      	mov	r9, r1
 800af98:	4650      	mov	r0, sl
 800af9a:	4659      	mov	r1, fp
 800af9c:	f7f5 fb44 	bl	8000628 <__aeabi_dmul>
 800afa0:	4602      	mov	r2, r0
 800afa2:	460b      	mov	r3, r1
 800afa4:	4640      	mov	r0, r8
 800afa6:	4649      	mov	r1, r9
 800afa8:	f7f5 f988 	bl	80002bc <__adddf3>
 800afac:	4632      	mov	r2, r6
 800afae:	463b      	mov	r3, r7
 800afb0:	4680      	mov	r8, r0
 800afb2:	4689      	mov	r9, r1
 800afb4:	4620      	mov	r0, r4
 800afb6:	4629      	mov	r1, r5
 800afb8:	f7f5 fb36 	bl	8000628 <__aeabi_dmul>
 800afbc:	460b      	mov	r3, r1
 800afbe:	4604      	mov	r4, r0
 800afc0:	460d      	mov	r5, r1
 800afc2:	4602      	mov	r2, r0
 800afc4:	4649      	mov	r1, r9
 800afc6:	4640      	mov	r0, r8
 800afc8:	f7f5 f978 	bl	80002bc <__adddf3>
 800afcc:	4b19      	ldr	r3, [pc, #100]	; (800b034 <__ieee754_pow+0x3fc>)
 800afce:	4299      	cmp	r1, r3
 800afd0:	ec45 4b19 	vmov	d9, r4, r5
 800afd4:	4606      	mov	r6, r0
 800afd6:	460f      	mov	r7, r1
 800afd8:	468b      	mov	fp, r1
 800afda:	f340 82f0 	ble.w	800b5be <__ieee754_pow+0x986>
 800afde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800afe2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800afe6:	4303      	orrs	r3, r0
 800afe8:	f000 81e4 	beq.w	800b3b4 <__ieee754_pow+0x77c>
 800afec:	ec51 0b18 	vmov	r0, r1, d8
 800aff0:	2200      	movs	r2, #0
 800aff2:	2300      	movs	r3, #0
 800aff4:	f7f5 fd8a 	bl	8000b0c <__aeabi_dcmplt>
 800aff8:	3800      	subs	r0, #0
 800affa:	bf18      	it	ne
 800affc:	2001      	movne	r0, #1
 800affe:	e72b      	b.n	800ae58 <__ieee754_pow+0x220>
 800b000:	60000000 	.word	0x60000000
 800b004:	3ff71547 	.word	0x3ff71547
 800b008:	f85ddf44 	.word	0xf85ddf44
 800b00c:	3e54ae0b 	.word	0x3e54ae0b
 800b010:	55555555 	.word	0x55555555
 800b014:	3fd55555 	.word	0x3fd55555
 800b018:	652b82fe 	.word	0x652b82fe
 800b01c:	3ff71547 	.word	0x3ff71547
 800b020:	00000000 	.word	0x00000000
 800b024:	bff00000 	.word	0xbff00000
 800b028:	3ff00000 	.word	0x3ff00000
 800b02c:	3fd00000 	.word	0x3fd00000
 800b030:	3fe00000 	.word	0x3fe00000
 800b034:	408fffff 	.word	0x408fffff
 800b038:	4bd5      	ldr	r3, [pc, #852]	; (800b390 <__ieee754_pow+0x758>)
 800b03a:	402b      	ands	r3, r5
 800b03c:	2200      	movs	r2, #0
 800b03e:	b92b      	cbnz	r3, 800b04c <__ieee754_pow+0x414>
 800b040:	4bd4      	ldr	r3, [pc, #848]	; (800b394 <__ieee754_pow+0x75c>)
 800b042:	f7f5 faf1 	bl	8000628 <__aeabi_dmul>
 800b046:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b04a:	460c      	mov	r4, r1
 800b04c:	1523      	asrs	r3, r4, #20
 800b04e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b052:	4413      	add	r3, r2
 800b054:	9305      	str	r3, [sp, #20]
 800b056:	4bd0      	ldr	r3, [pc, #832]	; (800b398 <__ieee754_pow+0x760>)
 800b058:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b05c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b060:	429c      	cmp	r4, r3
 800b062:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b066:	dd08      	ble.n	800b07a <__ieee754_pow+0x442>
 800b068:	4bcc      	ldr	r3, [pc, #816]	; (800b39c <__ieee754_pow+0x764>)
 800b06a:	429c      	cmp	r4, r3
 800b06c:	f340 8162 	ble.w	800b334 <__ieee754_pow+0x6fc>
 800b070:	9b05      	ldr	r3, [sp, #20]
 800b072:	3301      	adds	r3, #1
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b07a:	2400      	movs	r4, #0
 800b07c:	00e3      	lsls	r3, r4, #3
 800b07e:	9307      	str	r3, [sp, #28]
 800b080:	4bc7      	ldr	r3, [pc, #796]	; (800b3a0 <__ieee754_pow+0x768>)
 800b082:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b086:	ed93 7b00 	vldr	d7, [r3]
 800b08a:	4629      	mov	r1, r5
 800b08c:	ec53 2b17 	vmov	r2, r3, d7
 800b090:	eeb0 9a47 	vmov.f32	s18, s14
 800b094:	eef0 9a67 	vmov.f32	s19, s15
 800b098:	4682      	mov	sl, r0
 800b09a:	f7f5 f90d 	bl	80002b8 <__aeabi_dsub>
 800b09e:	4652      	mov	r2, sl
 800b0a0:	4606      	mov	r6, r0
 800b0a2:	460f      	mov	r7, r1
 800b0a4:	462b      	mov	r3, r5
 800b0a6:	ec51 0b19 	vmov	r0, r1, d9
 800b0aa:	f7f5 f907 	bl	80002bc <__adddf3>
 800b0ae:	4602      	mov	r2, r0
 800b0b0:	460b      	mov	r3, r1
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	49bb      	ldr	r1, [pc, #748]	; (800b3a4 <__ieee754_pow+0x76c>)
 800b0b6:	f7f5 fbe1 	bl	800087c <__aeabi_ddiv>
 800b0ba:	ec41 0b1a 	vmov	d10, r0, r1
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	4639      	mov	r1, r7
 800b0c6:	f7f5 faaf 	bl	8000628 <__aeabi_dmul>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0d0:	9302      	str	r3, [sp, #8]
 800b0d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0d6:	46ab      	mov	fp, r5
 800b0d8:	106d      	asrs	r5, r5, #1
 800b0da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b0de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b0e2:	ec41 0b18 	vmov	d8, r0, r1
 800b0e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	4614      	mov	r4, r2
 800b0f2:	461d      	mov	r5, r3
 800b0f4:	f7f5 fa98 	bl	8000628 <__aeabi_dmul>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	4630      	mov	r0, r6
 800b0fe:	4639      	mov	r1, r7
 800b100:	f7f5 f8da 	bl	80002b8 <__aeabi_dsub>
 800b104:	ec53 2b19 	vmov	r2, r3, d9
 800b108:	4606      	mov	r6, r0
 800b10a:	460f      	mov	r7, r1
 800b10c:	4620      	mov	r0, r4
 800b10e:	4629      	mov	r1, r5
 800b110:	f7f5 f8d2 	bl	80002b8 <__aeabi_dsub>
 800b114:	4602      	mov	r2, r0
 800b116:	460b      	mov	r3, r1
 800b118:	4650      	mov	r0, sl
 800b11a:	4659      	mov	r1, fp
 800b11c:	f7f5 f8cc 	bl	80002b8 <__aeabi_dsub>
 800b120:	4642      	mov	r2, r8
 800b122:	464b      	mov	r3, r9
 800b124:	f7f5 fa80 	bl	8000628 <__aeabi_dmul>
 800b128:	4602      	mov	r2, r0
 800b12a:	460b      	mov	r3, r1
 800b12c:	4630      	mov	r0, r6
 800b12e:	4639      	mov	r1, r7
 800b130:	f7f5 f8c2 	bl	80002b8 <__aeabi_dsub>
 800b134:	ec53 2b1a 	vmov	r2, r3, d10
 800b138:	f7f5 fa76 	bl	8000628 <__aeabi_dmul>
 800b13c:	ec53 2b18 	vmov	r2, r3, d8
 800b140:	ec41 0b19 	vmov	d9, r0, r1
 800b144:	ec51 0b18 	vmov	r0, r1, d8
 800b148:	f7f5 fa6e 	bl	8000628 <__aeabi_dmul>
 800b14c:	a37c      	add	r3, pc, #496	; (adr r3, 800b340 <__ieee754_pow+0x708>)
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	4604      	mov	r4, r0
 800b154:	460d      	mov	r5, r1
 800b156:	f7f5 fa67 	bl	8000628 <__aeabi_dmul>
 800b15a:	a37b      	add	r3, pc, #492	; (adr r3, 800b348 <__ieee754_pow+0x710>)
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f7f5 f8ac 	bl	80002bc <__adddf3>
 800b164:	4622      	mov	r2, r4
 800b166:	462b      	mov	r3, r5
 800b168:	f7f5 fa5e 	bl	8000628 <__aeabi_dmul>
 800b16c:	a378      	add	r3, pc, #480	; (adr r3, 800b350 <__ieee754_pow+0x718>)
 800b16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b172:	f7f5 f8a3 	bl	80002bc <__adddf3>
 800b176:	4622      	mov	r2, r4
 800b178:	462b      	mov	r3, r5
 800b17a:	f7f5 fa55 	bl	8000628 <__aeabi_dmul>
 800b17e:	a376      	add	r3, pc, #472	; (adr r3, 800b358 <__ieee754_pow+0x720>)
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f7f5 f89a 	bl	80002bc <__adddf3>
 800b188:	4622      	mov	r2, r4
 800b18a:	462b      	mov	r3, r5
 800b18c:	f7f5 fa4c 	bl	8000628 <__aeabi_dmul>
 800b190:	a373      	add	r3, pc, #460	; (adr r3, 800b360 <__ieee754_pow+0x728>)
 800b192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b196:	f7f5 f891 	bl	80002bc <__adddf3>
 800b19a:	4622      	mov	r2, r4
 800b19c:	462b      	mov	r3, r5
 800b19e:	f7f5 fa43 	bl	8000628 <__aeabi_dmul>
 800b1a2:	a371      	add	r3, pc, #452	; (adr r3, 800b368 <__ieee754_pow+0x730>)
 800b1a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a8:	f7f5 f888 	bl	80002bc <__adddf3>
 800b1ac:	4622      	mov	r2, r4
 800b1ae:	4606      	mov	r6, r0
 800b1b0:	460f      	mov	r7, r1
 800b1b2:	462b      	mov	r3, r5
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	f7f5 fa36 	bl	8000628 <__aeabi_dmul>
 800b1bc:	4602      	mov	r2, r0
 800b1be:	460b      	mov	r3, r1
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	4639      	mov	r1, r7
 800b1c4:	f7f5 fa30 	bl	8000628 <__aeabi_dmul>
 800b1c8:	4642      	mov	r2, r8
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	464b      	mov	r3, r9
 800b1d0:	ec51 0b18 	vmov	r0, r1, d8
 800b1d4:	f7f5 f872 	bl	80002bc <__adddf3>
 800b1d8:	ec53 2b19 	vmov	r2, r3, d9
 800b1dc:	f7f5 fa24 	bl	8000628 <__aeabi_dmul>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	f7f5 f86a 	bl	80002bc <__adddf3>
 800b1e8:	4642      	mov	r2, r8
 800b1ea:	4682      	mov	sl, r0
 800b1ec:	468b      	mov	fp, r1
 800b1ee:	464b      	mov	r3, r9
 800b1f0:	4640      	mov	r0, r8
 800b1f2:	4649      	mov	r1, r9
 800b1f4:	f7f5 fa18 	bl	8000628 <__aeabi_dmul>
 800b1f8:	4b6b      	ldr	r3, [pc, #428]	; (800b3a8 <__ieee754_pow+0x770>)
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	460f      	mov	r7, r1
 800b200:	f7f5 f85c 	bl	80002bc <__adddf3>
 800b204:	4652      	mov	r2, sl
 800b206:	465b      	mov	r3, fp
 800b208:	f7f5 f858 	bl	80002bc <__adddf3>
 800b20c:	2000      	movs	r0, #0
 800b20e:	4604      	mov	r4, r0
 800b210:	460d      	mov	r5, r1
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4640      	mov	r0, r8
 800b218:	4649      	mov	r1, r9
 800b21a:	f7f5 fa05 	bl	8000628 <__aeabi_dmul>
 800b21e:	4b62      	ldr	r3, [pc, #392]	; (800b3a8 <__ieee754_pow+0x770>)
 800b220:	4680      	mov	r8, r0
 800b222:	4689      	mov	r9, r1
 800b224:	2200      	movs	r2, #0
 800b226:	4620      	mov	r0, r4
 800b228:	4629      	mov	r1, r5
 800b22a:	f7f5 f845 	bl	80002b8 <__aeabi_dsub>
 800b22e:	4632      	mov	r2, r6
 800b230:	463b      	mov	r3, r7
 800b232:	f7f5 f841 	bl	80002b8 <__aeabi_dsub>
 800b236:	4602      	mov	r2, r0
 800b238:	460b      	mov	r3, r1
 800b23a:	4650      	mov	r0, sl
 800b23c:	4659      	mov	r1, fp
 800b23e:	f7f5 f83b 	bl	80002b8 <__aeabi_dsub>
 800b242:	ec53 2b18 	vmov	r2, r3, d8
 800b246:	f7f5 f9ef 	bl	8000628 <__aeabi_dmul>
 800b24a:	4622      	mov	r2, r4
 800b24c:	4606      	mov	r6, r0
 800b24e:	460f      	mov	r7, r1
 800b250:	462b      	mov	r3, r5
 800b252:	ec51 0b19 	vmov	r0, r1, d9
 800b256:	f7f5 f9e7 	bl	8000628 <__aeabi_dmul>
 800b25a:	4602      	mov	r2, r0
 800b25c:	460b      	mov	r3, r1
 800b25e:	4630      	mov	r0, r6
 800b260:	4639      	mov	r1, r7
 800b262:	f7f5 f82b 	bl	80002bc <__adddf3>
 800b266:	4606      	mov	r6, r0
 800b268:	460f      	mov	r7, r1
 800b26a:	4602      	mov	r2, r0
 800b26c:	460b      	mov	r3, r1
 800b26e:	4640      	mov	r0, r8
 800b270:	4649      	mov	r1, r9
 800b272:	f7f5 f823 	bl	80002bc <__adddf3>
 800b276:	a33e      	add	r3, pc, #248	; (adr r3, 800b370 <__ieee754_pow+0x738>)
 800b278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27c:	2000      	movs	r0, #0
 800b27e:	4604      	mov	r4, r0
 800b280:	460d      	mov	r5, r1
 800b282:	f7f5 f9d1 	bl	8000628 <__aeabi_dmul>
 800b286:	4642      	mov	r2, r8
 800b288:	ec41 0b18 	vmov	d8, r0, r1
 800b28c:	464b      	mov	r3, r9
 800b28e:	4620      	mov	r0, r4
 800b290:	4629      	mov	r1, r5
 800b292:	f7f5 f811 	bl	80002b8 <__aeabi_dsub>
 800b296:	4602      	mov	r2, r0
 800b298:	460b      	mov	r3, r1
 800b29a:	4630      	mov	r0, r6
 800b29c:	4639      	mov	r1, r7
 800b29e:	f7f5 f80b 	bl	80002b8 <__aeabi_dsub>
 800b2a2:	a335      	add	r3, pc, #212	; (adr r3, 800b378 <__ieee754_pow+0x740>)
 800b2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a8:	f7f5 f9be 	bl	8000628 <__aeabi_dmul>
 800b2ac:	a334      	add	r3, pc, #208	; (adr r3, 800b380 <__ieee754_pow+0x748>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	460f      	mov	r7, r1
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	4629      	mov	r1, r5
 800b2ba:	f7f5 f9b5 	bl	8000628 <__aeabi_dmul>
 800b2be:	4602      	mov	r2, r0
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	4630      	mov	r0, r6
 800b2c4:	4639      	mov	r1, r7
 800b2c6:	f7f4 fff9 	bl	80002bc <__adddf3>
 800b2ca:	9a07      	ldr	r2, [sp, #28]
 800b2cc:	4b37      	ldr	r3, [pc, #220]	; (800b3ac <__ieee754_pow+0x774>)
 800b2ce:	4413      	add	r3, r2
 800b2d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2d4:	f7f4 fff2 	bl	80002bc <__adddf3>
 800b2d8:	4682      	mov	sl, r0
 800b2da:	9805      	ldr	r0, [sp, #20]
 800b2dc:	468b      	mov	fp, r1
 800b2de:	f7f5 f939 	bl	8000554 <__aeabi_i2d>
 800b2e2:	9a07      	ldr	r2, [sp, #28]
 800b2e4:	4b32      	ldr	r3, [pc, #200]	; (800b3b0 <__ieee754_pow+0x778>)
 800b2e6:	4413      	add	r3, r2
 800b2e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b2ec:	4606      	mov	r6, r0
 800b2ee:	460f      	mov	r7, r1
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	465b      	mov	r3, fp
 800b2f4:	ec51 0b18 	vmov	r0, r1, d8
 800b2f8:	f7f4 ffe0 	bl	80002bc <__adddf3>
 800b2fc:	4642      	mov	r2, r8
 800b2fe:	464b      	mov	r3, r9
 800b300:	f7f4 ffdc 	bl	80002bc <__adddf3>
 800b304:	4632      	mov	r2, r6
 800b306:	463b      	mov	r3, r7
 800b308:	f7f4 ffd8 	bl	80002bc <__adddf3>
 800b30c:	2000      	movs	r0, #0
 800b30e:	4632      	mov	r2, r6
 800b310:	463b      	mov	r3, r7
 800b312:	4604      	mov	r4, r0
 800b314:	460d      	mov	r5, r1
 800b316:	f7f4 ffcf 	bl	80002b8 <__aeabi_dsub>
 800b31a:	4642      	mov	r2, r8
 800b31c:	464b      	mov	r3, r9
 800b31e:	f7f4 ffcb 	bl	80002b8 <__aeabi_dsub>
 800b322:	ec53 2b18 	vmov	r2, r3, d8
 800b326:	f7f4 ffc7 	bl	80002b8 <__aeabi_dsub>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	4650      	mov	r0, sl
 800b330:	4659      	mov	r1, fp
 800b332:	e610      	b.n	800af56 <__ieee754_pow+0x31e>
 800b334:	2401      	movs	r4, #1
 800b336:	e6a1      	b.n	800b07c <__ieee754_pow+0x444>
 800b338:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b388 <__ieee754_pow+0x750>
 800b33c:	e617      	b.n	800af6e <__ieee754_pow+0x336>
 800b33e:	bf00      	nop
 800b340:	4a454eef 	.word	0x4a454eef
 800b344:	3fca7e28 	.word	0x3fca7e28
 800b348:	93c9db65 	.word	0x93c9db65
 800b34c:	3fcd864a 	.word	0x3fcd864a
 800b350:	a91d4101 	.word	0xa91d4101
 800b354:	3fd17460 	.word	0x3fd17460
 800b358:	518f264d 	.word	0x518f264d
 800b35c:	3fd55555 	.word	0x3fd55555
 800b360:	db6fabff 	.word	0xdb6fabff
 800b364:	3fdb6db6 	.word	0x3fdb6db6
 800b368:	33333303 	.word	0x33333303
 800b36c:	3fe33333 	.word	0x3fe33333
 800b370:	e0000000 	.word	0xe0000000
 800b374:	3feec709 	.word	0x3feec709
 800b378:	dc3a03fd 	.word	0xdc3a03fd
 800b37c:	3feec709 	.word	0x3feec709
 800b380:	145b01f5 	.word	0x145b01f5
 800b384:	be3e2fe0 	.word	0xbe3e2fe0
 800b388:	00000000 	.word	0x00000000
 800b38c:	3ff00000 	.word	0x3ff00000
 800b390:	7ff00000 	.word	0x7ff00000
 800b394:	43400000 	.word	0x43400000
 800b398:	0003988e 	.word	0x0003988e
 800b39c:	000bb679 	.word	0x000bb679
 800b3a0:	0800bfe8 	.word	0x0800bfe8
 800b3a4:	3ff00000 	.word	0x3ff00000
 800b3a8:	40080000 	.word	0x40080000
 800b3ac:	0800c008 	.word	0x0800c008
 800b3b0:	0800bff8 	.word	0x0800bff8
 800b3b4:	a3b3      	add	r3, pc, #716	; (adr r3, 800b684 <__ieee754_pow+0xa4c>)
 800b3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	4649      	mov	r1, r9
 800b3be:	f7f4 ff7d 	bl	80002bc <__adddf3>
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	ec41 0b1a 	vmov	d10, r0, r1
 800b3c8:	462b      	mov	r3, r5
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	4639      	mov	r1, r7
 800b3ce:	f7f4 ff73 	bl	80002b8 <__aeabi_dsub>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	ec51 0b1a 	vmov	r0, r1, d10
 800b3da:	f7f5 fbb5 	bl	8000b48 <__aeabi_dcmpgt>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	f47f ae04 	bne.w	800afec <__ieee754_pow+0x3b4>
 800b3e4:	4aa2      	ldr	r2, [pc, #648]	; (800b670 <__ieee754_pow+0xa38>)
 800b3e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	f340 8107 	ble.w	800b5fe <__ieee754_pow+0x9c6>
 800b3f0:	151b      	asrs	r3, r3, #20
 800b3f2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b3f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b3fa:	fa4a fa03 	asr.w	sl, sl, r3
 800b3fe:	44da      	add	sl, fp
 800b400:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b404:	489b      	ldr	r0, [pc, #620]	; (800b674 <__ieee754_pow+0xa3c>)
 800b406:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b40a:	4108      	asrs	r0, r1
 800b40c:	ea00 030a 	and.w	r3, r0, sl
 800b410:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b414:	f1c1 0114 	rsb	r1, r1, #20
 800b418:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b41c:	fa4a fa01 	asr.w	sl, sl, r1
 800b420:	f1bb 0f00 	cmp.w	fp, #0
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	4620      	mov	r0, r4
 800b42a:	4629      	mov	r1, r5
 800b42c:	bfb8      	it	lt
 800b42e:	f1ca 0a00 	rsblt	sl, sl, #0
 800b432:	f7f4 ff41 	bl	80002b8 <__aeabi_dsub>
 800b436:	ec41 0b19 	vmov	d9, r0, r1
 800b43a:	4642      	mov	r2, r8
 800b43c:	464b      	mov	r3, r9
 800b43e:	ec51 0b19 	vmov	r0, r1, d9
 800b442:	f7f4 ff3b 	bl	80002bc <__adddf3>
 800b446:	a37a      	add	r3, pc, #488	; (adr r3, 800b630 <__ieee754_pow+0x9f8>)
 800b448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b44c:	2000      	movs	r0, #0
 800b44e:	4604      	mov	r4, r0
 800b450:	460d      	mov	r5, r1
 800b452:	f7f5 f8e9 	bl	8000628 <__aeabi_dmul>
 800b456:	ec53 2b19 	vmov	r2, r3, d9
 800b45a:	4606      	mov	r6, r0
 800b45c:	460f      	mov	r7, r1
 800b45e:	4620      	mov	r0, r4
 800b460:	4629      	mov	r1, r5
 800b462:	f7f4 ff29 	bl	80002b8 <__aeabi_dsub>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	4640      	mov	r0, r8
 800b46c:	4649      	mov	r1, r9
 800b46e:	f7f4 ff23 	bl	80002b8 <__aeabi_dsub>
 800b472:	a371      	add	r3, pc, #452	; (adr r3, 800b638 <__ieee754_pow+0xa00>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	f7f5 f8d6 	bl	8000628 <__aeabi_dmul>
 800b47c:	a370      	add	r3, pc, #448	; (adr r3, 800b640 <__ieee754_pow+0xa08>)
 800b47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b482:	4680      	mov	r8, r0
 800b484:	4689      	mov	r9, r1
 800b486:	4620      	mov	r0, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	f7f5 f8cd 	bl	8000628 <__aeabi_dmul>
 800b48e:	4602      	mov	r2, r0
 800b490:	460b      	mov	r3, r1
 800b492:	4640      	mov	r0, r8
 800b494:	4649      	mov	r1, r9
 800b496:	f7f4 ff11 	bl	80002bc <__adddf3>
 800b49a:	4604      	mov	r4, r0
 800b49c:	460d      	mov	r5, r1
 800b49e:	4602      	mov	r2, r0
 800b4a0:	460b      	mov	r3, r1
 800b4a2:	4630      	mov	r0, r6
 800b4a4:	4639      	mov	r1, r7
 800b4a6:	f7f4 ff09 	bl	80002bc <__adddf3>
 800b4aa:	4632      	mov	r2, r6
 800b4ac:	463b      	mov	r3, r7
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	4689      	mov	r9, r1
 800b4b2:	f7f4 ff01 	bl	80002b8 <__aeabi_dsub>
 800b4b6:	4602      	mov	r2, r0
 800b4b8:	460b      	mov	r3, r1
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f4 fefb 	bl	80002b8 <__aeabi_dsub>
 800b4c2:	4642      	mov	r2, r8
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	460f      	mov	r7, r1
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	4640      	mov	r0, r8
 800b4cc:	4649      	mov	r1, r9
 800b4ce:	f7f5 f8ab 	bl	8000628 <__aeabi_dmul>
 800b4d2:	a35d      	add	r3, pc, #372	; (adr r3, 800b648 <__ieee754_pow+0xa10>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	f7f5 f8a4 	bl	8000628 <__aeabi_dmul>
 800b4e0:	a35b      	add	r3, pc, #364	; (adr r3, 800b650 <__ieee754_pow+0xa18>)
 800b4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e6:	f7f4 fee7 	bl	80002b8 <__aeabi_dsub>
 800b4ea:	4622      	mov	r2, r4
 800b4ec:	462b      	mov	r3, r5
 800b4ee:	f7f5 f89b 	bl	8000628 <__aeabi_dmul>
 800b4f2:	a359      	add	r3, pc, #356	; (adr r3, 800b658 <__ieee754_pow+0xa20>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	f7f4 fee0 	bl	80002bc <__adddf3>
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	462b      	mov	r3, r5
 800b500:	f7f5 f892 	bl	8000628 <__aeabi_dmul>
 800b504:	a356      	add	r3, pc, #344	; (adr r3, 800b660 <__ieee754_pow+0xa28>)
 800b506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50a:	f7f4 fed5 	bl	80002b8 <__aeabi_dsub>
 800b50e:	4622      	mov	r2, r4
 800b510:	462b      	mov	r3, r5
 800b512:	f7f5 f889 	bl	8000628 <__aeabi_dmul>
 800b516:	a354      	add	r3, pc, #336	; (adr r3, 800b668 <__ieee754_pow+0xa30>)
 800b518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51c:	f7f4 fece 	bl	80002bc <__adddf3>
 800b520:	4622      	mov	r2, r4
 800b522:	462b      	mov	r3, r5
 800b524:	f7f5 f880 	bl	8000628 <__aeabi_dmul>
 800b528:	4602      	mov	r2, r0
 800b52a:	460b      	mov	r3, r1
 800b52c:	4640      	mov	r0, r8
 800b52e:	4649      	mov	r1, r9
 800b530:	f7f4 fec2 	bl	80002b8 <__aeabi_dsub>
 800b534:	4604      	mov	r4, r0
 800b536:	460d      	mov	r5, r1
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4640      	mov	r0, r8
 800b53e:	4649      	mov	r1, r9
 800b540:	f7f5 f872 	bl	8000628 <__aeabi_dmul>
 800b544:	2200      	movs	r2, #0
 800b546:	ec41 0b19 	vmov	d9, r0, r1
 800b54a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f4 feb1 	bl	80002b8 <__aeabi_dsub>
 800b556:	4602      	mov	r2, r0
 800b558:	460b      	mov	r3, r1
 800b55a:	ec51 0b19 	vmov	r0, r1, d9
 800b55e:	f7f5 f98d 	bl	800087c <__aeabi_ddiv>
 800b562:	4632      	mov	r2, r6
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	463b      	mov	r3, r7
 800b56a:	4640      	mov	r0, r8
 800b56c:	4649      	mov	r1, r9
 800b56e:	f7f5 f85b 	bl	8000628 <__aeabi_dmul>
 800b572:	4632      	mov	r2, r6
 800b574:	463b      	mov	r3, r7
 800b576:	f7f4 fea1 	bl	80002bc <__adddf3>
 800b57a:	4602      	mov	r2, r0
 800b57c:	460b      	mov	r3, r1
 800b57e:	4620      	mov	r0, r4
 800b580:	4629      	mov	r1, r5
 800b582:	f7f4 fe99 	bl	80002b8 <__aeabi_dsub>
 800b586:	4642      	mov	r2, r8
 800b588:	464b      	mov	r3, r9
 800b58a:	f7f4 fe95 	bl	80002b8 <__aeabi_dsub>
 800b58e:	460b      	mov	r3, r1
 800b590:	4602      	mov	r2, r0
 800b592:	4939      	ldr	r1, [pc, #228]	; (800b678 <__ieee754_pow+0xa40>)
 800b594:	2000      	movs	r0, #0
 800b596:	f7f4 fe8f 	bl	80002b8 <__aeabi_dsub>
 800b59a:	ec41 0b10 	vmov	d0, r0, r1
 800b59e:	ee10 3a90 	vmov	r3, s1
 800b5a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b5a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5aa:	da2b      	bge.n	800b604 <__ieee754_pow+0x9cc>
 800b5ac:	4650      	mov	r0, sl
 800b5ae:	f000 fa1b 	bl	800b9e8 <scalbn>
 800b5b2:	ec51 0b10 	vmov	r0, r1, d0
 800b5b6:	ec53 2b18 	vmov	r2, r3, d8
 800b5ba:	f7ff bbee 	b.w	800ad9a <__ieee754_pow+0x162>
 800b5be:	4b2f      	ldr	r3, [pc, #188]	; (800b67c <__ieee754_pow+0xa44>)
 800b5c0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b5c4:	429e      	cmp	r6, r3
 800b5c6:	f77f af0d 	ble.w	800b3e4 <__ieee754_pow+0x7ac>
 800b5ca:	4b2d      	ldr	r3, [pc, #180]	; (800b680 <__ieee754_pow+0xa48>)
 800b5cc:	440b      	add	r3, r1
 800b5ce:	4303      	orrs	r3, r0
 800b5d0:	d009      	beq.n	800b5e6 <__ieee754_pow+0x9ae>
 800b5d2:	ec51 0b18 	vmov	r0, r1, d8
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f7f5 fa97 	bl	8000b0c <__aeabi_dcmplt>
 800b5de:	3800      	subs	r0, #0
 800b5e0:	bf18      	it	ne
 800b5e2:	2001      	movne	r0, #1
 800b5e4:	e448      	b.n	800ae78 <__ieee754_pow+0x240>
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	f7f4 fe65 	bl	80002b8 <__aeabi_dsub>
 800b5ee:	4642      	mov	r2, r8
 800b5f0:	464b      	mov	r3, r9
 800b5f2:	f7f5 fa9f 	bl	8000b34 <__aeabi_dcmpge>
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	f43f aef4 	beq.w	800b3e4 <__ieee754_pow+0x7ac>
 800b5fc:	e7e9      	b.n	800b5d2 <__ieee754_pow+0x99a>
 800b5fe:	f04f 0a00 	mov.w	sl, #0
 800b602:	e71a      	b.n	800b43a <__ieee754_pow+0x802>
 800b604:	ec51 0b10 	vmov	r0, r1, d0
 800b608:	4619      	mov	r1, r3
 800b60a:	e7d4      	b.n	800b5b6 <__ieee754_pow+0x97e>
 800b60c:	491a      	ldr	r1, [pc, #104]	; (800b678 <__ieee754_pow+0xa40>)
 800b60e:	2000      	movs	r0, #0
 800b610:	f7ff bb31 	b.w	800ac76 <__ieee754_pow+0x3e>
 800b614:	2000      	movs	r0, #0
 800b616:	2100      	movs	r1, #0
 800b618:	f7ff bb2d 	b.w	800ac76 <__ieee754_pow+0x3e>
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f7ff bb29 	b.w	800ac76 <__ieee754_pow+0x3e>
 800b624:	9204      	str	r2, [sp, #16]
 800b626:	f7ff bb7b 	b.w	800ad20 <__ieee754_pow+0xe8>
 800b62a:	2300      	movs	r3, #0
 800b62c:	f7ff bb65 	b.w	800acfa <__ieee754_pow+0xc2>
 800b630:	00000000 	.word	0x00000000
 800b634:	3fe62e43 	.word	0x3fe62e43
 800b638:	fefa39ef 	.word	0xfefa39ef
 800b63c:	3fe62e42 	.word	0x3fe62e42
 800b640:	0ca86c39 	.word	0x0ca86c39
 800b644:	be205c61 	.word	0xbe205c61
 800b648:	72bea4d0 	.word	0x72bea4d0
 800b64c:	3e663769 	.word	0x3e663769
 800b650:	c5d26bf1 	.word	0xc5d26bf1
 800b654:	3ebbbd41 	.word	0x3ebbbd41
 800b658:	af25de2c 	.word	0xaf25de2c
 800b65c:	3f11566a 	.word	0x3f11566a
 800b660:	16bebd93 	.word	0x16bebd93
 800b664:	3f66c16c 	.word	0x3f66c16c
 800b668:	5555553e 	.word	0x5555553e
 800b66c:	3fc55555 	.word	0x3fc55555
 800b670:	3fe00000 	.word	0x3fe00000
 800b674:	fff00000 	.word	0xfff00000
 800b678:	3ff00000 	.word	0x3ff00000
 800b67c:	4090cbff 	.word	0x4090cbff
 800b680:	3f6f3400 	.word	0x3f6f3400
 800b684:	652b82fe 	.word	0x652b82fe
 800b688:	3c971547 	.word	0x3c971547
 800b68c:	00000000 	.word	0x00000000

0800b690 <atan>:
 800b690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b694:	ec55 4b10 	vmov	r4, r5, d0
 800b698:	4bc3      	ldr	r3, [pc, #780]	; (800b9a8 <atan+0x318>)
 800b69a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b69e:	429e      	cmp	r6, r3
 800b6a0:	46ab      	mov	fp, r5
 800b6a2:	dd18      	ble.n	800b6d6 <atan+0x46>
 800b6a4:	4bc1      	ldr	r3, [pc, #772]	; (800b9ac <atan+0x31c>)
 800b6a6:	429e      	cmp	r6, r3
 800b6a8:	dc01      	bgt.n	800b6ae <atan+0x1e>
 800b6aa:	d109      	bne.n	800b6c0 <atan+0x30>
 800b6ac:	b144      	cbz	r4, 800b6c0 <atan+0x30>
 800b6ae:	4622      	mov	r2, r4
 800b6b0:	462b      	mov	r3, r5
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	4629      	mov	r1, r5
 800b6b6:	f7f4 fe01 	bl	80002bc <__adddf3>
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	460d      	mov	r5, r1
 800b6be:	e006      	b.n	800b6ce <atan+0x3e>
 800b6c0:	f1bb 0f00 	cmp.w	fp, #0
 800b6c4:	f300 8131 	bgt.w	800b92a <atan+0x29a>
 800b6c8:	a59b      	add	r5, pc, #620	; (adr r5, 800b938 <atan+0x2a8>)
 800b6ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b6ce:	ec45 4b10 	vmov	d0, r4, r5
 800b6d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d6:	4bb6      	ldr	r3, [pc, #728]	; (800b9b0 <atan+0x320>)
 800b6d8:	429e      	cmp	r6, r3
 800b6da:	dc14      	bgt.n	800b706 <atan+0x76>
 800b6dc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b6e0:	429e      	cmp	r6, r3
 800b6e2:	dc0d      	bgt.n	800b700 <atan+0x70>
 800b6e4:	a396      	add	r3, pc, #600	; (adr r3, 800b940 <atan+0x2b0>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	ee10 0a10 	vmov	r0, s0
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f4 fde4 	bl	80002bc <__adddf3>
 800b6f4:	4baf      	ldr	r3, [pc, #700]	; (800b9b4 <atan+0x324>)
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f7f5 fa26 	bl	8000b48 <__aeabi_dcmpgt>
 800b6fc:	2800      	cmp	r0, #0
 800b6fe:	d1e6      	bne.n	800b6ce <atan+0x3e>
 800b700:	f04f 3aff 	mov.w	sl, #4294967295
 800b704:	e02b      	b.n	800b75e <atan+0xce>
 800b706:	f000 f963 	bl	800b9d0 <fabs>
 800b70a:	4bab      	ldr	r3, [pc, #684]	; (800b9b8 <atan+0x328>)
 800b70c:	429e      	cmp	r6, r3
 800b70e:	ec55 4b10 	vmov	r4, r5, d0
 800b712:	f300 80bf 	bgt.w	800b894 <atan+0x204>
 800b716:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b71a:	429e      	cmp	r6, r3
 800b71c:	f300 80a0 	bgt.w	800b860 <atan+0x1d0>
 800b720:	ee10 2a10 	vmov	r2, s0
 800b724:	ee10 0a10 	vmov	r0, s0
 800b728:	462b      	mov	r3, r5
 800b72a:	4629      	mov	r1, r5
 800b72c:	f7f4 fdc6 	bl	80002bc <__adddf3>
 800b730:	4ba0      	ldr	r3, [pc, #640]	; (800b9b4 <atan+0x324>)
 800b732:	2200      	movs	r2, #0
 800b734:	f7f4 fdc0 	bl	80002b8 <__aeabi_dsub>
 800b738:	2200      	movs	r2, #0
 800b73a:	4606      	mov	r6, r0
 800b73c:	460f      	mov	r7, r1
 800b73e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b742:	4620      	mov	r0, r4
 800b744:	4629      	mov	r1, r5
 800b746:	f7f4 fdb9 	bl	80002bc <__adddf3>
 800b74a:	4602      	mov	r2, r0
 800b74c:	460b      	mov	r3, r1
 800b74e:	4630      	mov	r0, r6
 800b750:	4639      	mov	r1, r7
 800b752:	f7f5 f893 	bl	800087c <__aeabi_ddiv>
 800b756:	f04f 0a00 	mov.w	sl, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	460d      	mov	r5, r1
 800b75e:	4622      	mov	r2, r4
 800b760:	462b      	mov	r3, r5
 800b762:	4620      	mov	r0, r4
 800b764:	4629      	mov	r1, r5
 800b766:	f7f4 ff5f 	bl	8000628 <__aeabi_dmul>
 800b76a:	4602      	mov	r2, r0
 800b76c:	460b      	mov	r3, r1
 800b76e:	4680      	mov	r8, r0
 800b770:	4689      	mov	r9, r1
 800b772:	f7f4 ff59 	bl	8000628 <__aeabi_dmul>
 800b776:	a374      	add	r3, pc, #464	; (adr r3, 800b948 <atan+0x2b8>)
 800b778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b77c:	4606      	mov	r6, r0
 800b77e:	460f      	mov	r7, r1
 800b780:	f7f4 ff52 	bl	8000628 <__aeabi_dmul>
 800b784:	a372      	add	r3, pc, #456	; (adr r3, 800b950 <atan+0x2c0>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	f7f4 fd97 	bl	80002bc <__adddf3>
 800b78e:	4632      	mov	r2, r6
 800b790:	463b      	mov	r3, r7
 800b792:	f7f4 ff49 	bl	8000628 <__aeabi_dmul>
 800b796:	a370      	add	r3, pc, #448	; (adr r3, 800b958 <atan+0x2c8>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f7f4 fd8e 	bl	80002bc <__adddf3>
 800b7a0:	4632      	mov	r2, r6
 800b7a2:	463b      	mov	r3, r7
 800b7a4:	f7f4 ff40 	bl	8000628 <__aeabi_dmul>
 800b7a8:	a36d      	add	r3, pc, #436	; (adr r3, 800b960 <atan+0x2d0>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f7f4 fd85 	bl	80002bc <__adddf3>
 800b7b2:	4632      	mov	r2, r6
 800b7b4:	463b      	mov	r3, r7
 800b7b6:	f7f4 ff37 	bl	8000628 <__aeabi_dmul>
 800b7ba:	a36b      	add	r3, pc, #428	; (adr r3, 800b968 <atan+0x2d8>)
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f7f4 fd7c 	bl	80002bc <__adddf3>
 800b7c4:	4632      	mov	r2, r6
 800b7c6:	463b      	mov	r3, r7
 800b7c8:	f7f4 ff2e 	bl	8000628 <__aeabi_dmul>
 800b7cc:	a368      	add	r3, pc, #416	; (adr r3, 800b970 <atan+0x2e0>)
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f7f4 fd73 	bl	80002bc <__adddf3>
 800b7d6:	4642      	mov	r2, r8
 800b7d8:	464b      	mov	r3, r9
 800b7da:	f7f4 ff25 	bl	8000628 <__aeabi_dmul>
 800b7de:	a366      	add	r3, pc, #408	; (adr r3, 800b978 <atan+0x2e8>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	4680      	mov	r8, r0
 800b7e6:	4689      	mov	r9, r1
 800b7e8:	4630      	mov	r0, r6
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	f7f4 ff1c 	bl	8000628 <__aeabi_dmul>
 800b7f0:	a363      	add	r3, pc, #396	; (adr r3, 800b980 <atan+0x2f0>)
 800b7f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f6:	f7f4 fd5f 	bl	80002b8 <__aeabi_dsub>
 800b7fa:	4632      	mov	r2, r6
 800b7fc:	463b      	mov	r3, r7
 800b7fe:	f7f4 ff13 	bl	8000628 <__aeabi_dmul>
 800b802:	a361      	add	r3, pc, #388	; (adr r3, 800b988 <atan+0x2f8>)
 800b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b808:	f7f4 fd56 	bl	80002b8 <__aeabi_dsub>
 800b80c:	4632      	mov	r2, r6
 800b80e:	463b      	mov	r3, r7
 800b810:	f7f4 ff0a 	bl	8000628 <__aeabi_dmul>
 800b814:	a35e      	add	r3, pc, #376	; (adr r3, 800b990 <atan+0x300>)
 800b816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81a:	f7f4 fd4d 	bl	80002b8 <__aeabi_dsub>
 800b81e:	4632      	mov	r2, r6
 800b820:	463b      	mov	r3, r7
 800b822:	f7f4 ff01 	bl	8000628 <__aeabi_dmul>
 800b826:	a35c      	add	r3, pc, #368	; (adr r3, 800b998 <atan+0x308>)
 800b828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b82c:	f7f4 fd44 	bl	80002b8 <__aeabi_dsub>
 800b830:	4632      	mov	r2, r6
 800b832:	463b      	mov	r3, r7
 800b834:	f7f4 fef8 	bl	8000628 <__aeabi_dmul>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4640      	mov	r0, r8
 800b83e:	4649      	mov	r1, r9
 800b840:	f7f4 fd3c 	bl	80002bc <__adddf3>
 800b844:	4622      	mov	r2, r4
 800b846:	462b      	mov	r3, r5
 800b848:	f7f4 feee 	bl	8000628 <__aeabi_dmul>
 800b84c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	d14b      	bne.n	800b8ee <atan+0x25e>
 800b856:	4620      	mov	r0, r4
 800b858:	4629      	mov	r1, r5
 800b85a:	f7f4 fd2d 	bl	80002b8 <__aeabi_dsub>
 800b85e:	e72c      	b.n	800b6ba <atan+0x2a>
 800b860:	ee10 0a10 	vmov	r0, s0
 800b864:	4b53      	ldr	r3, [pc, #332]	; (800b9b4 <atan+0x324>)
 800b866:	2200      	movs	r2, #0
 800b868:	4629      	mov	r1, r5
 800b86a:	f7f4 fd25 	bl	80002b8 <__aeabi_dsub>
 800b86e:	4b51      	ldr	r3, [pc, #324]	; (800b9b4 <atan+0x324>)
 800b870:	4606      	mov	r6, r0
 800b872:	460f      	mov	r7, r1
 800b874:	2200      	movs	r2, #0
 800b876:	4620      	mov	r0, r4
 800b878:	4629      	mov	r1, r5
 800b87a:	f7f4 fd1f 	bl	80002bc <__adddf3>
 800b87e:	4602      	mov	r2, r0
 800b880:	460b      	mov	r3, r1
 800b882:	4630      	mov	r0, r6
 800b884:	4639      	mov	r1, r7
 800b886:	f7f4 fff9 	bl	800087c <__aeabi_ddiv>
 800b88a:	f04f 0a01 	mov.w	sl, #1
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	e764      	b.n	800b75e <atan+0xce>
 800b894:	4b49      	ldr	r3, [pc, #292]	; (800b9bc <atan+0x32c>)
 800b896:	429e      	cmp	r6, r3
 800b898:	da1d      	bge.n	800b8d6 <atan+0x246>
 800b89a:	ee10 0a10 	vmov	r0, s0
 800b89e:	4b48      	ldr	r3, [pc, #288]	; (800b9c0 <atan+0x330>)
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	4629      	mov	r1, r5
 800b8a4:	f7f4 fd08 	bl	80002b8 <__aeabi_dsub>
 800b8a8:	4b45      	ldr	r3, [pc, #276]	; (800b9c0 <atan+0x330>)
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	460f      	mov	r7, r1
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f4 feb8 	bl	8000628 <__aeabi_dmul>
 800b8b8:	4b3e      	ldr	r3, [pc, #248]	; (800b9b4 <atan+0x324>)
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f7f4 fcfe 	bl	80002bc <__adddf3>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	f7f4 ffd8 	bl	800087c <__aeabi_ddiv>
 800b8cc:	f04f 0a02 	mov.w	sl, #2
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	460d      	mov	r5, r1
 800b8d4:	e743      	b.n	800b75e <atan+0xce>
 800b8d6:	462b      	mov	r3, r5
 800b8d8:	ee10 2a10 	vmov	r2, s0
 800b8dc:	4939      	ldr	r1, [pc, #228]	; (800b9c4 <atan+0x334>)
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f7f4 ffcc 	bl	800087c <__aeabi_ddiv>
 800b8e4:	f04f 0a03 	mov.w	sl, #3
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	460d      	mov	r5, r1
 800b8ec:	e737      	b.n	800b75e <atan+0xce>
 800b8ee:	4b36      	ldr	r3, [pc, #216]	; (800b9c8 <atan+0x338>)
 800b8f0:	4e36      	ldr	r6, [pc, #216]	; (800b9cc <atan+0x33c>)
 800b8f2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fa:	f7f4 fcdd 	bl	80002b8 <__aeabi_dsub>
 800b8fe:	4622      	mov	r2, r4
 800b900:	462b      	mov	r3, r5
 800b902:	f7f4 fcd9 	bl	80002b8 <__aeabi_dsub>
 800b906:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b90a:	4602      	mov	r2, r0
 800b90c:	460b      	mov	r3, r1
 800b90e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b912:	f7f4 fcd1 	bl	80002b8 <__aeabi_dsub>
 800b916:	f1bb 0f00 	cmp.w	fp, #0
 800b91a:	4604      	mov	r4, r0
 800b91c:	460d      	mov	r5, r1
 800b91e:	f6bf aed6 	bge.w	800b6ce <atan+0x3e>
 800b922:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b926:	461d      	mov	r5, r3
 800b928:	e6d1      	b.n	800b6ce <atan+0x3e>
 800b92a:	a51d      	add	r5, pc, #116	; (adr r5, 800b9a0 <atan+0x310>)
 800b92c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b930:	e6cd      	b.n	800b6ce <atan+0x3e>
 800b932:	bf00      	nop
 800b934:	f3af 8000 	nop.w
 800b938:	54442d18 	.word	0x54442d18
 800b93c:	bff921fb 	.word	0xbff921fb
 800b940:	8800759c 	.word	0x8800759c
 800b944:	7e37e43c 	.word	0x7e37e43c
 800b948:	e322da11 	.word	0xe322da11
 800b94c:	3f90ad3a 	.word	0x3f90ad3a
 800b950:	24760deb 	.word	0x24760deb
 800b954:	3fa97b4b 	.word	0x3fa97b4b
 800b958:	a0d03d51 	.word	0xa0d03d51
 800b95c:	3fb10d66 	.word	0x3fb10d66
 800b960:	c54c206e 	.word	0xc54c206e
 800b964:	3fb745cd 	.word	0x3fb745cd
 800b968:	920083ff 	.word	0x920083ff
 800b96c:	3fc24924 	.word	0x3fc24924
 800b970:	5555550d 	.word	0x5555550d
 800b974:	3fd55555 	.word	0x3fd55555
 800b978:	2c6a6c2f 	.word	0x2c6a6c2f
 800b97c:	bfa2b444 	.word	0xbfa2b444
 800b980:	52defd9a 	.word	0x52defd9a
 800b984:	3fadde2d 	.word	0x3fadde2d
 800b988:	af749a6d 	.word	0xaf749a6d
 800b98c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b990:	fe231671 	.word	0xfe231671
 800b994:	3fbc71c6 	.word	0x3fbc71c6
 800b998:	9998ebc4 	.word	0x9998ebc4
 800b99c:	3fc99999 	.word	0x3fc99999
 800b9a0:	54442d18 	.word	0x54442d18
 800b9a4:	3ff921fb 	.word	0x3ff921fb
 800b9a8:	440fffff 	.word	0x440fffff
 800b9ac:	7ff00000 	.word	0x7ff00000
 800b9b0:	3fdbffff 	.word	0x3fdbffff
 800b9b4:	3ff00000 	.word	0x3ff00000
 800b9b8:	3ff2ffff 	.word	0x3ff2ffff
 800b9bc:	40038000 	.word	0x40038000
 800b9c0:	3ff80000 	.word	0x3ff80000
 800b9c4:	bff00000 	.word	0xbff00000
 800b9c8:	0800c038 	.word	0x0800c038
 800b9cc:	0800c018 	.word	0x0800c018

0800b9d0 <fabs>:
 800b9d0:	ec51 0b10 	vmov	r0, r1, d0
 800b9d4:	ee10 2a10 	vmov	r2, s0
 800b9d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9dc:	ec43 2b10 	vmov	d0, r2, r3
 800b9e0:	4770      	bx	lr
 800b9e2:	0000      	movs	r0, r0
 800b9e4:	0000      	movs	r0, r0
	...

0800b9e8 <scalbn>:
 800b9e8:	b570      	push	{r4, r5, r6, lr}
 800b9ea:	ec55 4b10 	vmov	r4, r5, d0
 800b9ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b9f2:	4606      	mov	r6, r0
 800b9f4:	462b      	mov	r3, r5
 800b9f6:	b999      	cbnz	r1, 800ba20 <scalbn+0x38>
 800b9f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b9fc:	4323      	orrs	r3, r4
 800b9fe:	d03f      	beq.n	800ba80 <scalbn+0x98>
 800ba00:	4b35      	ldr	r3, [pc, #212]	; (800bad8 <scalbn+0xf0>)
 800ba02:	4629      	mov	r1, r5
 800ba04:	ee10 0a10 	vmov	r0, s0
 800ba08:	2200      	movs	r2, #0
 800ba0a:	f7f4 fe0d 	bl	8000628 <__aeabi_dmul>
 800ba0e:	4b33      	ldr	r3, [pc, #204]	; (800badc <scalbn+0xf4>)
 800ba10:	429e      	cmp	r6, r3
 800ba12:	4604      	mov	r4, r0
 800ba14:	460d      	mov	r5, r1
 800ba16:	da10      	bge.n	800ba3a <scalbn+0x52>
 800ba18:	a327      	add	r3, pc, #156	; (adr r3, 800bab8 <scalbn+0xd0>)
 800ba1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba1e:	e01f      	b.n	800ba60 <scalbn+0x78>
 800ba20:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800ba24:	4291      	cmp	r1, r2
 800ba26:	d10c      	bne.n	800ba42 <scalbn+0x5a>
 800ba28:	ee10 2a10 	vmov	r2, s0
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	4629      	mov	r1, r5
 800ba30:	f7f4 fc44 	bl	80002bc <__adddf3>
 800ba34:	4604      	mov	r4, r0
 800ba36:	460d      	mov	r5, r1
 800ba38:	e022      	b.n	800ba80 <scalbn+0x98>
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800ba40:	3936      	subs	r1, #54	; 0x36
 800ba42:	f24c 3250 	movw	r2, #50000	; 0xc350
 800ba46:	4296      	cmp	r6, r2
 800ba48:	dd0d      	ble.n	800ba66 <scalbn+0x7e>
 800ba4a:	2d00      	cmp	r5, #0
 800ba4c:	a11c      	add	r1, pc, #112	; (adr r1, 800bac0 <scalbn+0xd8>)
 800ba4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba52:	da02      	bge.n	800ba5a <scalbn+0x72>
 800ba54:	a11c      	add	r1, pc, #112	; (adr r1, 800bac8 <scalbn+0xe0>)
 800ba56:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba5a:	a319      	add	r3, pc, #100	; (adr r3, 800bac0 <scalbn+0xd8>)
 800ba5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba60:	f7f4 fde2 	bl	8000628 <__aeabi_dmul>
 800ba64:	e7e6      	b.n	800ba34 <scalbn+0x4c>
 800ba66:	1872      	adds	r2, r6, r1
 800ba68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba6c:	428a      	cmp	r2, r1
 800ba6e:	dcec      	bgt.n	800ba4a <scalbn+0x62>
 800ba70:	2a00      	cmp	r2, #0
 800ba72:	dd08      	ble.n	800ba86 <scalbn+0x9e>
 800ba74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba80:	ec45 4b10 	vmov	d0, r4, r5
 800ba84:	bd70      	pop	{r4, r5, r6, pc}
 800ba86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ba8a:	da08      	bge.n	800ba9e <scalbn+0xb6>
 800ba8c:	2d00      	cmp	r5, #0
 800ba8e:	a10a      	add	r1, pc, #40	; (adr r1, 800bab8 <scalbn+0xd0>)
 800ba90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba94:	dac0      	bge.n	800ba18 <scalbn+0x30>
 800ba96:	a10e      	add	r1, pc, #56	; (adr r1, 800bad0 <scalbn+0xe8>)
 800ba98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9c:	e7bc      	b.n	800ba18 <scalbn+0x30>
 800ba9e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baa2:	3236      	adds	r2, #54	; 0x36
 800baa4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800baa8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800baac:	4620      	mov	r0, r4
 800baae:	4b0c      	ldr	r3, [pc, #48]	; (800bae0 <scalbn+0xf8>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	e7d5      	b.n	800ba60 <scalbn+0x78>
 800bab4:	f3af 8000 	nop.w
 800bab8:	c2f8f359 	.word	0xc2f8f359
 800babc:	01a56e1f 	.word	0x01a56e1f
 800bac0:	8800759c 	.word	0x8800759c
 800bac4:	7e37e43c 	.word	0x7e37e43c
 800bac8:	8800759c 	.word	0x8800759c
 800bacc:	fe37e43c 	.word	0xfe37e43c
 800bad0:	c2f8f359 	.word	0xc2f8f359
 800bad4:	81a56e1f 	.word	0x81a56e1f
 800bad8:	43500000 	.word	0x43500000
 800badc:	ffff3cb0 	.word	0xffff3cb0
 800bae0:	3c900000 	.word	0x3c900000

0800bae4 <with_errno>:
 800bae4:	b570      	push	{r4, r5, r6, lr}
 800bae6:	4604      	mov	r4, r0
 800bae8:	460d      	mov	r5, r1
 800baea:	4616      	mov	r6, r2
 800baec:	f7fc ffde 	bl	8008aac <__errno>
 800baf0:	4629      	mov	r1, r5
 800baf2:	6006      	str	r6, [r0, #0]
 800baf4:	4620      	mov	r0, r4
 800baf6:	bd70      	pop	{r4, r5, r6, pc}

0800baf8 <xflow>:
 800baf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bafa:	4614      	mov	r4, r2
 800bafc:	461d      	mov	r5, r3
 800bafe:	b108      	cbz	r0, 800bb04 <xflow+0xc>
 800bb00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bb04:	e9cd 2300 	strd	r2, r3, [sp]
 800bb08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb0c:	4620      	mov	r0, r4
 800bb0e:	4629      	mov	r1, r5
 800bb10:	f7f4 fd8a 	bl	8000628 <__aeabi_dmul>
 800bb14:	2222      	movs	r2, #34	; 0x22
 800bb16:	b003      	add	sp, #12
 800bb18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb1c:	f7ff bfe2 	b.w	800bae4 <with_errno>

0800bb20 <__math_uflow>:
 800bb20:	b508      	push	{r3, lr}
 800bb22:	2200      	movs	r2, #0
 800bb24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bb28:	f7ff ffe6 	bl	800baf8 <xflow>
 800bb2c:	ec41 0b10 	vmov	d0, r0, r1
 800bb30:	bd08      	pop	{r3, pc}

0800bb32 <__math_oflow>:
 800bb32:	b508      	push	{r3, lr}
 800bb34:	2200      	movs	r2, #0
 800bb36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bb3a:	f7ff ffdd 	bl	800baf8 <xflow>
 800bb3e:	ec41 0b10 	vmov	d0, r0, r1
 800bb42:	bd08      	pop	{r3, pc}

0800bb44 <_init>:
 800bb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb46:	bf00      	nop
 800bb48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4a:	bc08      	pop	{r3}
 800bb4c:	469e      	mov	lr, r3
 800bb4e:	4770      	bx	lr

0800bb50 <_fini>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	bf00      	nop
 800bb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb56:	bc08      	pop	{r3}
 800bb58:	469e      	mov	lr, r3
 800bb5a:	4770      	bx	lr
